{"version":3,"sources":["webpack:///../node_modules/id3js/lib/localReader.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAqC;AACZ;AACzB;AACA;AACA;AACO,0BAA0B,8CAAM;AACvC;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oCAAO;AACnB;AACA;AACA;AACA;AACA;AACA,gBAAgB,oCAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qCAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oCAAO;AACnB;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA","file":"node_modules_id3js_lib_localReader_js.main.min.js","sourcesContent":["import { Reader } from './reader.js';\nimport * as fs from 'fs';\n/**\n * Provides read access to the local file system\n */\nexport class LocalReader extends Reader {\n    /**\n     * @param {string} path Path of the local file\n     */\n    constructor(path) {\n        super();\n        this._path = path;\n    }\n    /** @inheritdoc */\n    async open() {\n        return new Promise((resolve, reject) => {\n            fs.stat(this._path, (err, stat) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                this.size = stat.size;\n                fs.open(this._path, 'r', (openErr, fd) => {\n                    if (openErr) {\n                        reject(err);\n                        return;\n                    }\n                    this._fd = fd;\n                    resolve();\n                });\n            });\n        });\n    }\n    /** @inheritdoc */\n    async close() {\n        return new Promise((resolve, reject) => {\n            if (this._fd === undefined) {\n                reject(new Error('Resource not yet open'));\n                return;\n            }\n            fs.close(this._fd, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    /** @inheritdoc */\n    async read(length, position) {\n        const buffer = Buffer.alloc(length);\n        return new Promise((resolve, reject) => {\n            if (this._fd === undefined) {\n                reject(new Error('Resource not yet open'));\n                return;\n            }\n            fs.read(this._fd, buffer, 0, length, position, (err, _bytesRead, buffer) => {\n                if (err) {\n                    return reject(err);\n                }\n                const ab = new ArrayBuffer(buffer.length);\n                const view = new Uint8Array(ab);\n                for (let i = 0; i < buffer.length; i++) {\n                    view[i] = buffer[i];\n                }\n                resolve(ab);\n            });\n        });\n    }\n}\n"],"sourceRoot":""}