/*
                   * From the latest spec (as of this writing):
                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.2
                   *
                   * Same text since EXT-X-BYTERANGE's introduction in draft 7:
                   * https://tools.ietf.org/html/draft-pantos-http-live-streaming-07#section-3.3.1)
                   *
                   * "If o [offset] is not present, the sub-range begins at the next byte
                   * following the sub-range of the previous media segment."
                   */

/*
       * Identify NAL unit types and pass on the NALU, trackId, presentation and decode timestamps
       * for the NALUs to the next stream component.
       * Also, preprocess caption and sequence parameter NALUs.
       *
       * @param {Uint8Array} data - A NAL unit identified by `NalByteStream.push`
       * @see NalByteStream.push
       */

/*
       * Pushes a packet from a stream onto the NalByteStream
       *
       * @param {Object} packet - A packet received from a stream
       * @param {Uint8Array} packet.data - The raw bytes of the packet
       * @param {Number} packet.dts - Decode timestamp of the packet
       * @param {Number} packet.pts - Presentation timestamp of the packet
       * @param {Number} packet.trackId - The id of the h264 track this packet came from
       * @param {('video'|'audio')} packet.type - The type of packet
       *
       */

/*
       * Scans a byte stream and triggers a data event with the NAL units found.
       * @param {Object} data Event received from H264Stream
       * @param {Uint8Array} data.data The h264 byte stream to be scanned
       *
       * @see H264Stream.push
       */

/*
     * Accepts a ElementaryStream and emits data events with parsed
     * AAC Audio Frames of the individual packets. Input audio in ADTS
     * format is unpacked and re-emitted as AAC frames.
     *
     * @see http://wiki.multimedia.cx/index.php?title=ADTS
     * @see http://wiki.multimedia.cx/?title=Understanding_AAC
     */

/*
     * Flattens a rule set into valid CSS
     * Hashes it, wraps the whole chunk in a .hash1234 {}
     * Returns the hash to be injected on render()
     * */

/*
     * Store the internal state of scrubbing
     *
     * @private
     * @return {Boolean} True if the user is scrubbing
     */

/*
     * When XDS sub-packets are interleaved with other services, the end of each sub-packet shall be followed
     * by a control pair to change to a different service. When any of the control codes from 0x10 to 0x1F is
     * used to begin a control code pair, it indicates the return to captioning or Text data. The control code pair
     * and subsequent data should then be processed according to the FCC rules. It may be necessary for the
     * line 21 data encoder to automatically insert a control code pair (i.e. RCL, RU2, RU3, RU4, RDC, or RTD)
     * to switch to captioning or Text.
    */

/*
    children:[
        
    ]
    */

/*
   * Check if the tech can support the given mime-type.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param  {string} type
   *         The mimetype to check for support
   *
   * @return {string}
   *         'probably', 'maybe', or empty string
   *
   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
   *
   * @abstract
   */

/*
   * Return whether the argument is a Tech or not.
   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
   *
   * @param {Object} component
   *        The item to check
   *
   * @return {boolean}
   *         Whether it is a tech or not
   *         - True if it is a tech
   *         - False if it is not
   */

/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/*
  track when we are at the live edge, and other helpers for live playback */

/*
  useMemo(()=>{
      if(canvas !== null && !isPaused )startTimer();
      if(canvas !== null && isPaused){
          stopTimer();
          clearRender(canvas.current);
      }
  },[isPaused]);
  */

/*
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html
 * used method of org.xml.sax.ext.LexicalHandler:
 *  #comment(chars, start, length)
 *  #startCDATA()
 *  #endCDATA()
 *  #startDTD(name, publicId, systemId)
 *
 *
 * IGNORED method of org.xml.sax.ext.LexicalHandler:
 *  #endDTD()
 *  #startEntity(name)
 *  #endEntity(name)
 *
 *
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html
 * IGNORED method of org.xml.sax.ext.DeclHandler
 * 	#attributeDecl(eName, aName, type, mode, value)
 *  #elementDecl(name, model)
 *  #externalEntityDecl(name, publicId, systemId)
 *  #internalEntityDecl(name, value)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html
 * IGNORED method of org.xml.sax.EntityResolver2
 *  #resolveEntity(String name,String publicId,String baseURI,String systemId)
 *  #resolveEntity(publicId, systemId)
 *  #getExternalSubset(name, baseURI)
 * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html
 * IGNORED method of org.xml.sax.DTDHandler
 *  #notationDecl(name, publicId, systemId) {};
 *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};
 */

/*
 * A utility for rendering a drag preview image
 */

/*
 * DOM Level 2
 * Object DOMException
 * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html
 */

/*
 * Parser for the MP4 (MPEG-4 Part 14) container format
 * Standard: ISO/IEC 14496-14
 * supporting:
 * - QuickTime container
 * - MP4 File Format
 * - 3GPP file format
 * - 3GPP2 file format
 *
 * MPEG-4 Audio / Part 3 (.m4a)& MPEG 4 Video (m4v, mp4) extension.
 * Support for Apple iTunes tags as found in a M4A/M4V files.
 * Ref:
 *   https://en.wikipedia.org/wiki/ISO_base_media_file_format
 *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/Metadata/Metadata.html
 *   http://atomicparsley.sourceforge.net/mpeg-4files.html
 *   https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata
 *   https://wiki.multimedia.cx/index.php/QuickTime_container
 */

/*
 * Player instance options, surfaced using options
 * options = Player.prototype.options_
 * Make changes in options, not here.
 *
 * @type {Object}
 * @private
 */

/*
 * This file contains all track properties that are used in
 * player.js, tech.js, html5.js and possibly other techs in the future.
 */

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
const useAudio:()=>[boolean,number,()=>void,()=>void,(url:string)=>void,(time:number)=>void] = () =>{
    const dispatch = useDispatch();
    const volume = useSelector((state:StateType)=>state.volume);
    const currentMusic = useSelector((state:StateType)=>state.currentMusic);
    const options = useSelector((state:StateType)=>state.playOptions);
    const albumList = useSelector((state:StateType)=>state.albumList);
    const pauseStatus = useSelector((state:StateType)=>state.isPaused);

    const playList = useSelector((state:StateType)=>state.playList);
    const isPlayList = useSelector((state:StateType)=>state.modeWindow.playlist);
    const [audio,setAudio] = useState(new Audio());
    dispatch(audioStatus_set(audio));
    const [, _forceUpdate] = useState(false);
    const forceUpdate = () => _forceUpdate(prevState=> !prevState);

    //audioメソッドは事前にthisを束縛しないといけない
    const play = () => audio.play.bind(audio);
    const pause = () =>audio.pause.bind(audio);
    const nextMusic = () =>{
        if(isPlayList){
            const playData = headNextPlayList(playList);
            if(playData === null)return;
            dispatch(playList_setMusicIndex(playData[1]));
            dispatch(currentMusic_set(playData[0]));
        }else{
            const indexes = headNextMusicIndex(albumList,currentMusic);
            dispatch(album_setIndex(indexes[0],indexes[1]));
            dispatch(currentMusic_set(albumList[indexes[0]].musics[indexes[1]]));
        }
    }
    const shuffleMusic = () =>{
        if(isPlayList){
            const currentList = playList.find(p=> p.selected === true);
            const shuffledNumber = randomNum(currentList?.musics.length ?? 0);
            dispatch(playList_setMusicIndex(shuffledNumber));
            dispatch(currentMusic_set(currentList?.musics[shuffledNumber] ?? currentMusic));
        }else{
            const randomAlbum = randomNum(albumList.length);
            const randomMusic = randomNum(albumList[randomAlbum].musics.length);
            dispatch(album_setIndex(randomAlbum,randomMusic));
            dispatch(currentMusic_set(albumList[randomAlbum].musics[randomMusic]));
        }
    }
    const switchMusic = () =>{
        console.log("end");
        if(options.repeat)audio.currentTime=0;
        if(options.succession)nextMusic();
        if(options.shuffle)shuffleMusic();
        if(options.noOption === false){
            play()()
        }else{
            pause()();
        }
        forceUpdate();
    }
    useEffect(()=>{
        audio.addEventListener("play", forceUpdate);
        audio.addEventListener("pause", forceUpdate);
        audio.addEventListener("ended",switchMusic);
        audio.addEventListener("timeupdate", ()=>{
            audio.removeEventListener("ended",forceUpdate);
            audio.addEventListener("ended",switchMusic);//endedイベントの関数は常に更新し続けないとredux変数も更新されない
            forceUpdate();
        });
    },[options,albumList,currentMusic]);

    const playMusic = () =>{
        if(audio.paused){
            //audio.src = currentMusic?.path ?? "";
            play()();
        }else{
            pause()();
        }
        dispatch(paused_set(audio.paused));
    }
    const stopMusic = () =>{
        audio.currentTime = 0;
        pause()();
        audio.src = "";
        const newAudio = new Audio();
        setAudio(newAudio);
        dispatch(audioStatus_set(newAudio));
        dispatch(paused_set(audio.paused));
    }

    const setMusic:(url:string)=>void = url => {
        const newAudio = new Audio();
        try{
            newAudio.src = url;//html input fileの場合、ファイルタイプの変換が必要だがlocalのパスを取得できる環境下では不要　
        }catch(e){
            alert(e);
        }finally{
            newAudio.currentTime = 0;
        }
        setAudio(newAudio);
        dispatch(audioStatus_set(newAudio));
        dispatch(paused_set(newAudio.paused));
    };
    const setCurrentTime:(time:number)=>void = time => audio.currentTime = time;
    audio.volume = volume;
    return [!audio.paused, audio.currentTime,playMusic,stopMusic,setMusic,setCurrentTime];
}
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/*                                 */

/*                             */

/*                            */

/*                          */

/*                        */

/*                       */

/*                      */

/*                     */

/*                    */

/*                   */

/*                  */

/*                 */

/*                */

/*               */

/*             */

/*            */

/*           */

/*          */

/*         */

/*       */

/*      */

/*     */

/*    */

/*   */

/*  */

/* */

/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */

/* ::<number | string, string, string, string> */

/* ::<number | string, string, string> */

/* @import rules are reordered to appear first */

/* Append to target when no previous element was passed */

/* Either execute or defer the function */

/* Fallbacks for unsupported event types
  ================================================================================ */

/* Firefox quirk requires us to step through all stylesheets to find one owned by the given tag */

/* HTML5 Support Testing ---------------------------------------------------- */

/* Handle objects */

/* Handle other components */

/* If config methods are called, wrap up a new template function and merge options */

/* Insert new style tag after the previous one */

/* Layer   I    II   III */

/* Modify/inject new props at runtime */

/* NOTE: This is just for backwards-compatibility with jest-styled-components */

/* Native HTML5 element property wrapping ----------------------------------- */

/* Object */

/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */

/* Remove sealed StyleSheets from the master sheet */

/* TODO: Decide whether two codecs should be assumed here.
       * Right now, for playlists that don't specify codecs, VHS assumes
       * that there are two (one for audio and one for video).
       * Although this is often the case, this may lead to broken behavior
       * if the playlist only has one codec. It may be better in the future
       * to decide at time of segment download how many tracks there are and
       * determine the proper codecs. This will come at a cost of potentially
       * more bandwidth, but will be a more robust approach than the assumption here.
       */

/* The master sheet might be reset, so keep a reference here */

/* These are helpers for the StyleTags to keep track of the injected
 * rule names for each (component) ID that they're keeping track of.
 * They're crucial for detecting whether a name has already been
 * injected.
 * (This excludes rehydrated names) */

/* This is callable directly as a template function */

/* This is the "capacity" of our alphabet i.e. 2x26 for all letters plus their capitalised
 * counterparts */

/* ToDo: iTunes tags:
    'COM:iTunNORM': ,
    'COM:iTunSMPB': 'encoder delay',
    'COM:iTunes_CDDB_IDs'
    */

/* Warning if there are several instances of styled-components */

/* We depend on components having unique IDs */

/* Work around insertRule quirk in EdgeHTML */

/* a list of tags belonging to this StyleSheet */

/* a map from ids to tags */

/* a tag for import rules */

/* abort early if cssRule string is falsy */

/* abort rehydration if no previous style tags were found */

/* abort rehydration if nothing was extracted */

/* add all extracted components to the new tag */

/* add deferred rules for component */

/* add rehydrated name to sheet to avoid re-adding styles */

/* add to clone array */

/* add up no of injected rules */

/* adds "children" to the StyleSheet that inherit all of the parents' rules
   * while their own rules do not affect the parent */

/* adds a new ID:name pairing to a names dictionary */

/* any error indicates an invalid rule */

/* binding */

/* caching layer checking id+name to already have a corresponding tag and injected rules */

/* check if style tag is a streamed tag */

/* children (aka clones) of this StyleSheet inheriting all and future injections */

/* clone all tags */

/* clone other maps */

/* combines hashStr (murmurhash) and nameGenerator for convenience */

/* create a tag to be used for rehydration */

/* create new empty text node and replace the current one */

/* current capacity until a new tag must be created */

/* deferred rules for a given id */

/* delete possible deferred rules */

/* don't inject when the id is already registered */

/* eslint-disable */

/* eslint-disable camelcase, no-undef */

/* eslint-disable consistent-this */

/* eslint-disable guard-for-in */

/* eslint-disable import/no-unresolved */

/* eslint-disable key-spacing */

/* eslint-disable max-len */

/* eslint-disable no-bitwise */

/* eslint-disable no-empty */

/* eslint-disable no-new */

/* eslint-disable no-new, handle-callback-err */

/* eslint-disable no-unused-expressions */

/* eslint-disable no-unused-vars */

/* eslint-disable no-use-before-define */

/* eslint-disable no-var */

/* eslint-disable react-internal/no-production-logging */

/* eslint-disable react/prop-types, flowtype-errors/show-errors */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* eslint-enable */

/* eslint-enable consistent-this */

/* eslint-enable key-spacing */

/* eslint-enable no-console */

/* eslint-enable no-empty */

/* eslint-env browser */

/* exception for rehydrated names which are checked separately */

/* extract all components and their CSS */

/* fail silently */

/* falls through */

/* force StyleSheet to create a new tag on the next injection */

/* get a char and divide by alphabet-length */

/* get a tag for a given componentId, assign the componentId to one, or shard */

/* global Symbol */

/* globals MSApp */

/* globals self */

/* harmony default export */

/* harmony export */

/* harmony import */

/* harmony reexport (unknown) */

/* ignore possible rehydrated names */

/* in speedy mode we can keep a lot more rules in a sheet before a slowdown can be expected */

/* injects rules for a given id with a name that will need to be cached */

/* input a number, usually a hash and convert it to base-52 */

/* istanbul ignore next */

/* mainly for createGlobalStyle to check for its id */

/* module decorator */

/* reconstruct tagMap */

/* reexport module object */

/* reexport safe */

/* registers a componentId and registers it on its tag */

/* rehydrate all SSR'd style tags */

/* remove all rules from the tag */

/* remove old HTMLStyleElements, since they have been rehydrated */

/* removes all rules for a given id, which doesn't remove its marker but resets it */

/* replace with bigint? (Token.UINT8.get(buf, off + 10) << 32) + */

/* replace with bigint? (Token.UINT8.get(buf, off + 11) << 32) + */

/* reset capacity and adjust MAX_SIZE by the initial size of the rehydration */

/* reset the internal "master" instance */

/* retrieve a "master" instance of StyleSheet which is typically used when no other is available
   * The master StyleSheet is targeted by createGlobalStyle, keyframes, and components outside of any
    * StyleSheetManager's context */

/* retrieve all component ids */

/* retrieve all component names */

/* returns Node */

/* shard (create a new tag) if the tag is exhausted (See MAX_SIZE) */

/* simply return a tag, when the componentId was already assigned one */

/* start at 75 for 'a' until 'z' (25) and then start at 65 for capitalised letters */

/* store original HTMLStyleElement */

/* string */

/* this is used for not reinjecting rules via hasNameForId() */

/* use insertRule and cap passed index with maxIndex (no of cssRules) */

/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */

/* we should always be able to find a tag */

/* webpack/runtime/compat get default export */

/* when rules for an id are removed using remove() we have to ignore rehydratedNames for it */

/*!
 * Programatically add the following
 */

/*!
 * content-type
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/*!
 * media-typer
 * Copyright(c) 2014-2017 Douglas Christopher Wilson
 * MIT Licensed
 */

/*!   export FILE [provided] [no usage info] [missing usage info prevents renaming] */

/*!   export TEXT [provided] [no usage info] [missing usage info prevents renaming] */

/*!   export URL [provided] [no usage info] [missing usage info prevents renaming] */

/*!   other exports [not provided] [no usage info] */

/*! ../../../../redux/actions/dispatchMusics */

/*! ../../../../redux/actions/dispatchPlayList */

/*! ../../../../redux/actions/dispatchWIndow */

/*! ../../../redux/actions/dispatchAudio */

/*! ../../../redux/actions/dispatchFilter */

/*! ../../../redux/actions/dispatchMusics */

/*! ../../../redux/actions/dispatchPlayList */

/*! ../../../redux/actions/dispatchUI */

/*! ../../../redux/actions/dispatchVisual */

/*! ../../../redux/actions/moveNextMusic */

/*! ../../../styles/containers */

/*! ../../../styles/mixin */

/*! ../../apev2/APEv2Parser */

/*! ../../common/BasicParser */

/*! ../../common/DragSourceMonitorImpl */

/*! ../../common/DropTargetMonitorImpl */

/*! ../../common/FourCC */

/*! ../../common/GenericTagMapper */

/*! ../../common/SourceConnector */

/*! ../../common/TargetConnector */

/*! ../../common/Util */

/*! ../../common/registration */

/*! ../../fileSystem/handleMusicFiles */

/*! ../../fileSystem/timeConvert */

/*! ../../id3v2/ID3v2Token */

/*! ../../redux/actions/dispatchAudio */

/*! ../../redux/actions/dispatchMusics */

/*! ../../redux/actions/dispatchPlayList */

/*! ../../redux/actions/dispatchWIndow */

/*! ../../redux/actions/moveNextMusic */

/*! ../../styles/containers */

/*! ../../styles/digiFont */

/*! ../../styles/mixin */

/*! ../../utils/js_utils */

/*! ../../utils/matchesType */

/*! ../NativeTypes */

/*! ../aac/utils.js */

/*! ../actions/dragDrop */

/*! ../actions/registry */

/*! ../apev2/APEv2Parser */

/*! ../apev2/APEv2TagMapper */

/*! ../asf/AsfTagMapper */

/*! ../common/BasicParser */

/*! ../common/CaseInsensitiveTagMap */

/*! ../common/DndContext */

/*! ../common/DragSourceMonitorImpl */

/*! ../common/DropTargetMonitorImpl */

/*! ../common/FourCC */

/*! ../common/GenericTagMapper */

/*! ../common/SourceConnector */

/*! ../common/TargetConnector */

/*! ../common/Util */

/*! ../common/registration */

/*! ../components/Context */

/*! ../components/connectAdvanced */

/*! ../components/controlor/controlor */

/*! ../components/label/Label */

/*! ../components/musicList/musicListContainer */

/*! ../components/setPlayList/playListContainer */

/*! ../components/setting/settingCompo */

/*! ../components/songDisplay/songDisplay */

/*! ../components/volume/valume */

/*! ../fileSystem/handleMusicFiles */

/*! ../id3v1/ID3v1Parser */

/*! ../id3v1/ID3v1TagMap */

/*! ../id3v2/AbstractID3Parser */

/*! ../id3v2/ID3v22TagMapper */

/*! ../id3v2/ID3v24TagMapper */

/*! ../id3v2/ID3v2Parser */

/*! ../id3v2/ID3v2Token */

/*! ../iff */

/*! ../lib */

/*! ../m2ts/probe.js */

/*! ../m2ts/stream-types.js */

/*! ../m2ts/timestamp-rollover-stream.js */

/*! ../mainMusicList/playListMain */

/*! ../matroska/MatroskaTagMapper */

/*! ../mp4/MP4TagMapper */

/*! ../mp4/find-box.js */

/*! ../mp4/parse-type.js */

/*! ../musicData */

/*! ../ogg/vorbis/Vorbis */

/*! ../ogg/vorbis/VorbisDecoder */

/*! ../ogg/vorbis/VorbisParser */

/*! ../ogg/vorbis/VorbisTagMapper */

/*! ../overCompo/overLayer */

/*! ../playListMain */

/*! ../reducer/audio */

/*! ../reducer/common */

/*! ../reducer/filter */

/*! ../reducer/label */

/*! ../reducer/musics */

/*! ../reducer/window */

/*! ../redux/actions/dispatchMusics */

/*! ../redux/actions/dispatchPlayList */

/*! ../redux/actions/dispatchWIndow */

/*! ../redux/reducer/musics */

/*! ../riff/RiffChunk */

/*! ../riff/RiffInfoTagMap */

/*! ../styles/containers */

/*! ../styles/mixin */

/*! ../tools/parse-tfdt.js */

/*! ../tools/parse-tfhd.js */

/*! ../tools/parse-trun.js */

/*! ../type */

/*! ../types */

/*! ../useDragDropManager */

/*! ../utils/Subscription */

/*! ../utils/bin */

/*! ../utils/clock */

/*! ../utils/cloneWithRef */

/*! ../utils/dirtiness */

/*! ../utils/equality */

/*! ../utils/isRef */

/*! ../utils/isValidType */

/*! ../utils/js_utils */

/*! ../utils/shallowEqual */

/*! ../utils/stream */

/*! ../utils/useIsomorphicLayoutEffect */

/*! ../utils/verifyPlainObject */

/*! ../utils/warning */

/*! ../vorbis/VorbisParser */

/*! ./../wav/WaveChunk */

/*! ./APEv2Token */

/*! ./AbstractTokenizer */

/*! ./AiffToken */

/*! ./AsfObject */

/*! ./AsfUtil */

/*! ./Atom */

/*! ./AtomToken */

/*! ./BitReader */

/*! ./BrowserDetector */

/*! ./BufferTokenizer */

/*! ./CombinedTagMapper */

/*! ./Context */

/*! ./DndContext */

/*! ./DndProvider */

/*! ./DragDropManagerImpl */

/*! ./DragDropMonitorImpl */

/*! ./DragLayer */

/*! ./DragPreviewImage */

/*! ./DragSource */

/*! ./DropTarget */

/*! ./DsdiffToken */

/*! ./DsfChunk */

/*! ./EndOfFileStream */

/*! ./EnterLeaveCounter */

/*! ./FileTokenizer */

/*! ./FrameParser */

/*! ./FsPromise */

/*! ./GUID */

/*! ./GenericTagMapper */

/*! ./GenericTagTypes */

/*! ./HTML5BackendImpl */

/*! ./HandlerRegistryImpl */

/*! ./ID3v2Parser */

/*! ./ID3v2Token */

/*! ./MatroskaDtd */

/*! ./MonotonicInterpolant */

/*! ./NativeDragSource */

/*! ./NativeDragSources */

/*! ./NativeTypes */

/*! ./OffsetUtils */

/*! ./OptionsReader */

/*! ./Opus */

/*! ./ParserFactory */

/*! ./ReadStreamTokenizer */

/*! ./Speex */

/*! ./StreamVersion7 */

/*! ./StreamVersion8 */

/*! ./Theora */

/*! ./Util */

/*! ./Vorbis */

/*! ./VorbisDecoder */

/*! ./WavPackToken */

/*! ./Windows1292Decoder */

/*! ./XingTag */

/*! ./actions/dragDrop */

/*! ./actions/registry */

/*! ./aiff/AiffParser */

/*! ./albumList */

/*! ./apev2/APEv2Parser */

/*! ./arrayLikeToArray */

/*! ./arrayWithHoles */

/*! ./arrayWithoutHoles */

/*! ./asap */

/*! ./asf/AsfParser */

/*! ./assertThisInitialized */

/*! ./audioContext */

/*! ./audioSpectrum/spectrum */

/*! ./background/background */

/*! ./batch */

/*! ./beginDrag */

/*! ./bgPath */

/*! ./buttons */

/*! ./buttons/playButtons */

/*! ./checkPropTypes */

/*! ./cjs/react-dom.development.js */

/*! ./cjs/react-is.development.js */

/*! ./cjs/react.development.js */

/*! ./cjs/scheduler-tracing.development.js */

/*! ./cjs/scheduler.development.js */

/*! ./colorButton */

/*! ./colorList/colorList */

/*! ./common */

/*! ./common/MetadataCollector */

/*! ./common/RandomBufferReader */

/*! ./common/RandomFileReader */

/*! ./commutDataBase */

/*! ./components/Context */

/*! ./components/Provider */

/*! ./components/connectAdvanced */

/*! ./connect/connect */

/*! ./connectors */

/*! ./containers/layout */

/*! ./contracts */

/*! ./core */

/*! ./cover/coverPicture */

/*! ./createSourceFactory */

/*! ./createTargetFactory */

/*! ./decorateHandler */

/*! ./decorators */

/*! ./dirtyHandlerIds */

/*! ./dispatchMusics */

/*! ./disposables */

/*! ./dom */

/*! ./dragOffset */

/*! ./dragOperation */

/*! ./drop */

/*! ./dsdiff/DsdiffParser */

/*! ./dsf/DsfParser */

/*! ./endDrag */

/*! ./factoryWithTypeCheckers */

/*! ./fillPlayListName */

/*! ./filter/filterSlider */

/*! ./flac/FlacParser */

/*! ./footer/playListFooter */

/*! ./footerIcons */

/*! ./getDataFromDataTransfer */

/*! ./getEmptyImage */

/*! ./header/playListHeader */

/*! ./hooks */

/*! ./hooks/useAudio */

/*! ./hooks/useDispatch */

/*! ./hooks/useSelector */

/*! ./hooks/useStore */

/*! ./hooksApi */

/*! ./hover */

/*! ./iconBase */

/*! ./iconContext */

/*! ./iconsManifest */

/*! ./id3v1/ID3v1Parser */

/*! ./interfaces */

/*! ./internal/drag */

/*! ./internal/drop */

/*! ./internal/useCollector */

/*! ./internal/useIsomorphicLayoutEffect */

/*! ./internal/useMonitorOutput */

/*! ./isNativeReflectConstruct */

/*! ./isPlainObject */

/*! ./iterableToArray */

/*! ./iterableToArrayLimit */

/*! ./js_utils */

/*! ./lib/ReactPropTypesSecret */

/*! ./listContainer */

/*! ./loading */

/*! ./local/setClientOffset */

/*! ./lyrics3/Lyrics3 */

/*! ./mainMusicList/playListMain */

/*! ./mapDispatchToProps */

/*! ./mapStateToProps */

/*! ./matroska/MatroskaParser */

/*! ./menu */

/*! ./mergeProps */

/*! ./monitors */

/*! ./mp4/MP4Parser */

/*! ./mpeg/MpegParser */

/*! ./musepack */

/*! ./music/musicList */

/*! ./musicData */

/*! ./nativeTypesConfig */

/*! ./nonIterableRest */

/*! ./nonIterableSpread */

/*! ./ogg/OggParser */

/*! ./optionBar/options */

/*! ./options */

/*! ./opus/OpusParser */

/*! ./parse-sample-flags.js */

/*! ./parse-type.js */

/*! ./playList/playListMusics */

/*! ./playListButton */

/*! ./playListMusics/playList */

/*! ./playlist/playList */

/*! ./ponyfill.js */

/*! ./progressBar */

/*! ./publishDragSource */

/*! ./rangeParts */

/*! ./raw */

/*! ./reducers */

/*! ./redux/store/store */

/*! ./refCount */

/*! ./sax */

/*! ./selectorFactory */

/*! ./setPrototypeOf */

/*! ./speex/SpeexParser */

/*! ./stateId */

/*! ./stream-types.js */

/*! ./supported */

/*! ./suspend */

/*! ./sv7/MpcSv7Parser */

/*! ./sv8/MpcSv8Parser */

/*! ./theora/TheoraParser */

/*! ./types */

/*! ./unsupportedIterableToArray */

/*! ./useCollector */

/*! ./useDrag */

/*! ./useDragDropManager */

/*! ./useDragLayer */

/*! ./useDrop */

/*! ./useIsomorphicLayoutEffect */

/*! ./useReduxContext */

/*! ./useStore */

/*! ./util */

/*! ./utils */

/*! ./utils/batch */

/*! ./utils/coords */

/*! ./utils/dirtiness */

/*! ./utils/getNextUniqueId */

/*! ./utils/js_utils */

/*! ./utils/matchesType */

/*! ./utils/reactBatchedUpdates */

/*! ./utils/shallowEqual */

/*! ./verifySubselectors */

/*! ./video/video */

/*! ./vorbis/VorbisParser */

/*! ./vtt.js */

/*! ./vttcue.js */

/*! ./vttregion.js */

/*! ./warning */

/*! ./wav/WaveParser */

/*! ./wavpack/WavPackParser */

/*! ./wrapConnectorHooks */

/*! ./wrapMapToProps */

/*! @babel/runtime/helpers/assertThisInitialized */

/*! @babel/runtime/helpers/asyncToGenerator */

/*! @babel/runtime/helpers/classCallCheck */

/*! @babel/runtime/helpers/construct */

/*! @babel/runtime/helpers/createClass */

/*! @babel/runtime/helpers/defineProperty */

/*! @babel/runtime/helpers/esm/assertThisInitialized */

/*! @babel/runtime/helpers/esm/construct */

/*! @babel/runtime/helpers/esm/extends */

/*! @babel/runtime/helpers/esm/getPrototypeOf */

/*! @babel/runtime/helpers/esm/inheritsLoose */

/*! @babel/runtime/helpers/esm/isNativeFunction */

/*! @babel/runtime/helpers/esm/isNativeReflectConstruct */

/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */

/*! @babel/runtime/helpers/esm/setPrototypeOf */

/*! @babel/runtime/helpers/esm/taggedTemplateLiteralLoose */

/*! @babel/runtime/helpers/esm/wrapNativeSuper */

/*! @babel/runtime/helpers/extends */

/*! @babel/runtime/helpers/getPrototypeOf */

/*! @babel/runtime/helpers/inherits */

/*! @babel/runtime/helpers/inheritsLoose */

/*! @babel/runtime/helpers/possibleConstructorReturn */

/*! @babel/runtime/helpers/slicedToArray */

/*! @babel/runtime/helpers/taggedTemplateLiteral */

/*! @babel/runtime/helpers/toConsumableArray */

/*! @babel/runtime/helpers/typeof */

/*! @babel/runtime/regenerator */

/*! @emotion/is-prop-valid */

/*! @emotion/memoize */

/*! @emotion/unitless */

/*! @name @videojs/http-streaming @version 2.2.4 @license Apache-2.0 */

/*! @name @videojs/vhs-utils @version 2.2.1 @license MIT */

/*! @name @videojs/vhs-utils @version 2.3.0 @license MIT */

/*! @name aes-decrypter @version 3.1.0 @license Apache-2.0 */

/*! @name pkcs7 @version 1.0.4 @license Apache-2.0 */

/*! @react-dnd/asap */

/*! @react-dnd/invariant */

/*! @react-dnd/shallowequal */

/*! @videojs/vhs-utils/dist/byte-helpers */

/*! @videojs/vhs-utils/dist/codecs.js */

/*! @videojs/vhs-utils/dist/containers */

/*! @videojs/vhs-utils/dist/decode-b64-to-uint8-array */

/*! @videojs/vhs-utils/dist/decode-b64-to-uint8-array.js */

/*! @videojs/vhs-utils/dist/media-types.js */

/*! @videojs/vhs-utils/dist/resolve-url */

/*! @videojs/vhs-utils/dist/resolve-url.js */

/*! @videojs/vhs-utils/dist/stream.js */

/*! @videojs/xhr */

/*! CommonJS bailout: exports is used directly at 255:37-44 */

/*! CommonJS bailout: exports is used directly at 66:0-7 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 125:13-33 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 149:24-44 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 193:15-35 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 52:26-46 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 548:28-48 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 565:25-45 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 591:20-40 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 695:20-40 */

/*! CommonJS bailout: exports.unstable_now(...) prevents optimization as exports is passed as call context at 804:24-44 */

/*! CommonJS bailout: exports.unstable_shouldYield(...) prevents optimization as exports is passed as call context at 578:74-102 */

/*! CommonJS bailout: module.exports is used directly at 102:0-14 */

/*! CommonJS bailout: module.exports is used directly at 103:0-14 */

/*! CommonJS bailout: module.exports is used directly at 10:0-14 */

/*! CommonJS bailout: module.exports is used directly at 11:0-14 */

/*! CommonJS bailout: module.exports is used directly at 126:0-14 */

/*! CommonJS bailout: module.exports is used directly at 12:0-14 */

/*! CommonJS bailout: module.exports is used directly at 1347:0-14 */

/*! CommonJS bailout: module.exports is used directly at 135:0-14 */

/*! CommonJS bailout: module.exports is used directly at 13:0-14 */

/*! CommonJS bailout: module.exports is used directly at 141:0-14 */

/*! CommonJS bailout: module.exports is used directly at 1433:0-14 */

/*! CommonJS bailout: module.exports is used directly at 14:0-14 */

/*! CommonJS bailout: module.exports is used directly at 14:2-16 */

/*! CommonJS bailout: module.exports is used directly at 15:0-14 */

/*! CommonJS bailout: module.exports is used directly at 166:4-18 */

/*! CommonJS bailout: module.exports is used directly at 16:0-14 */

/*! CommonJS bailout: module.exports is used directly at 17:0-14 */

/*! CommonJS bailout: module.exports is used directly at 184:0-14 */

/*! CommonJS bailout: module.exports is used directly at 18:0-14 */

/*! CommonJS bailout: module.exports is used directly at 19:0-14 */

/*! CommonJS bailout: module.exports is used directly at 1:0-14 */

/*! CommonJS bailout: module.exports is used directly at 1:66-80 */

/*! CommonJS bailout: module.exports is used directly at 22:0-14 */

/*! CommonJS bailout: module.exports is used directly at 23:0-14 */

/*! CommonJS bailout: module.exports is used directly at 24:12-26 */

/*! CommonJS bailout: module.exports is used directly at 255:0-14 */

/*! CommonJS bailout: module.exports is used directly at 257:21-35 */

/*! CommonJS bailout: module.exports is used directly at 261:0-14 */

/*! CommonJS bailout: module.exports is used directly at 26:0-14 */

/*! CommonJS bailout: module.exports is used directly at 279:0-14 */

/*! CommonJS bailout: module.exports is used directly at 286:0-14 */

/*! CommonJS bailout: module.exports is used directly at 28:0-14 */

/*! CommonJS bailout: module.exports is used directly at 29:0-14 */

/*! CommonJS bailout: module.exports is used directly at 2:2-16 */

/*! CommonJS bailout: module.exports is used directly at 2:65-82 */

/*! CommonJS bailout: module.exports is used directly at 355:0-14 */

/*! CommonJS bailout: module.exports is used directly at 37:0-14 */

/*! CommonJS bailout: module.exports is used directly at 38:0-14 */

/*! CommonJS bailout: module.exports is used directly at 3:0-14 */

/*! CommonJS bailout: module.exports is used directly at 43:0-14 */

/*! CommonJS bailout: module.exports is used directly at 49:0-14 */

/*! CommonJS bailout: module.exports is used directly at 518:0-14 */

/*! CommonJS bailout: module.exports is used directly at 5:0-14 */

/*! CommonJS bailout: module.exports is used directly at 5:4-18 */

/*! CommonJS bailout: module.exports is used directly at 65:0-14 */

/*! CommonJS bailout: module.exports is used directly at 66:10-24 */

/*! CommonJS bailout: module.exports is used directly at 732:31-45 */

/*! CommonJS bailout: module.exports is used directly at 7:0-14 */

/*! CommonJS bailout: module.exports is used directly at 7:4-18 */

/*! CommonJS bailout: module.exports is used directly at 82:0-14 */

/*! CommonJS bailout: module.exports is used directly at 8:0-14 */

/*! CommonJS bailout: module.exports is used directly at 98:0-14 */

/*! CommonJS bailout: module.exports is used directly at 9:0-14 */

/*! CommonJS bailout: module.exports is used directly at 9:4-18 */

/*! CommonJS bailout: module.exports.humanize(...) prevents optimization as module.exports is passed as call context at 152:8-31 */

/*! CommonJS bailout: this is used directly at 173:3-7 */

/*! content-type */

/*! debug */

/*! default exports */

/*! dnd-core */

/*! dynamic exports */

/*! electron */

/*! export ADD_SOURCE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ADD_TARGET [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AIFFParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ALL [provided] [no usage info] [missing usage info prevents renaming] */

/*! export APEv2Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export APEv2TagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AbstractID3Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AbstractTokenizer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AlubumData [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AnsiStringType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AsfParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AsfTagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AsfUtil [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AsyncMode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AsyncMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .AsyncMode */

/*! export Atom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export AttachedPictureType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BEGIN_DRAG [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BEGIN_DRAG [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js .BEGIN_DRAG */

/*! export BackTrack [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BasicParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BitReader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BoxTitle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BufferTokenizer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export BufferType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export CaseInsensitiveTagMap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ChannelType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ChapterText [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Children [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Children [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .Children */

/*! export ChunkHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export CombinedTagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Common [provided] [no usage info] [missing usage info prevents renaming] */

/*! export CommonHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export CommonTagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Component [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Component [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .Component */

/*! export CompositeDisposable [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ConcurrentMode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ConcurrentMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .ConcurrentMode */

/*! export ContentDescriptionObjectState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ContextConsumer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ContextConsumer [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .ContextConsumer */

/*! export ContextProvider [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ContextProvider [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .ContextProvider */

/*! export DEFAULT_AUDIO_CODEC [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DEFAULT_VIDEO_CODEC [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DOMImplementation [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DOMImplementation [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/xmldom/dom.js .DOMImplementation */

/*! export DOMParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DROP [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DROP [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js .DROP */

/*! export DataAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DataType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DefaultContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DefaultContext [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-icons/lib/esm/iconContext.js .DefaultContext */

/*! export DescriptorParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DigiFont [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Disposable [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DndContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DndContext [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/common/DndContext.js .DndContext */

/*! export DndProvider [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DndProvider [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/common/DndProvider.js .DndProvider */

/*! export DragDropManagerImpl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DragDropMonitorImpl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DragLayer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DragLayer [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/decorators/DragLayer.js .DragLayer */

/*! export DragPreviewImage [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DragPreviewImage [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/common/DragPreviewImage.js .DragPreviewImage */

/*! export DragSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DragSource [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/decorators/DragSource.js .DragSource */

/*! export DragSourceMonitorImpl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DropTarget [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DropTarget [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/decorators/DropTarget.js .DropTarget */

/*! export DropTargetMonitorImpl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DsdChunk [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DsdiffParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export DsfParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export END_DRAG [provided] [no usage info] [missing usage info prevents renaming] */

/*! export END_DRAG [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js .END_DRAG */

/*! export Element [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Element [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Element */

/*! export EndOfStreamError [provided] [no usage info] [missing usage info prevents renaming] */

/*! export EnterLeaveCounter [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ExtendedContentDescriptionObjectState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ExtendedHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ExtendedSize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ExtendedStreamPropertiesObjectState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FILE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FactChunk [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiActivity [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAirplay [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlertCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlertOctagon [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlertTriangle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlignCenter [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlignJustify [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlignLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAlignRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAnchor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAperture [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArchive [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowDownCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowDownLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowDownRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowLeftCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowRightCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowUpCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowUpLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiArrowUpRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAtSign [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiAward [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBarChart [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBarChart2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBattery [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBatteryCharging [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBell [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBellOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBluetooth [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBold [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBook [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBookOpen [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBookmark [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBox [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiBriefcase [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCalendar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCamera [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCameraOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCast [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCheck [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCheckCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCheckSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronsDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronsLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronsRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChevronsUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiChrome [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiClipboard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiClock [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCloud [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCloudDrizzle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCloudLightning [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCloudOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCloudRain [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCloudSnow [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCodepen [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCodesandbox [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCoffee [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiColumns [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCommand [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCompass [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCopy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerDownLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerDownRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerLeftDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerLeftUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerRightDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerRightUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerUpLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCornerUpRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCpu [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCreditCard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCrop [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiCrosshair [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDatabase [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDelete [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDisc [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDivide [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDivideCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDivideSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDollarSign [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDownload [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDownloadCloud [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDribbble [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiDroplet [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiEdit [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiEdit2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiEdit3 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiExternalLink [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiEye [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiEyeOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFacebook [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFastForward [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFeather [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFigma [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFileMinus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFilePlus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFileText [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFilm [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFilter [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFlag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFolder [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFolderMinus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFolderPlus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFramer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiFrown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGift [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGitBranch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGitCommit [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGitMerge [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGitPullRequest [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGithub [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGitlab [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGlobe [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiGrid [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHardDrive [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHash [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHeadphones [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHeart [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHelpCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHexagon [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiHome [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiImage [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiInbox [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiInfo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiInstagram [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiItalic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiKey [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLayers [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLayout [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLifeBuoy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLink [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLink2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLinkedin [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiList [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLoader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLock [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLogIn [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiLogOut [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMail [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMapPin [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMaximize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMaximize2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMeh [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMenu [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMessageCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMessageSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMicOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMinimize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMinimize2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMinus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMinusCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMinusSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMonitor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMoon [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMoreHorizontal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMoreVertical [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMousePointer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMove [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiMusic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiNavigation [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiNavigation2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiOctagon [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPackage [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPaperclip [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPause [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPauseCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPenTool [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPercent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhone [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhoneCall [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhoneForwarded [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhoneIncoming [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhoneMissed [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhoneOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPhoneOutgoing [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPieChart [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPlay [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPlayCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPlus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPlusCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPlusSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPocket [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPower [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiPrinter [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRadio [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRefreshCcw [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRefreshCw [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRepeat [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRewind [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRotateCcw [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRotateCw [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiRss [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSave [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiScissors [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSearch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSend [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiServer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSettings [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShare2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShield [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShieldOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShoppingBag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShoppingCart [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiShuffle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSidebar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSkipBack [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSkipForward [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSlack [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSlash [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSliders [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSmartphone [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSmile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSpeaker [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiStar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiStopCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSun [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSunrise [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiSunset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTablet [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTarget [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTerminal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiThermometer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiThumbsDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiThumbsUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiToggleLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiToggleRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTool [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTrash [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTrash2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTrello [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTrendingDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTrendingUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTriangle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTruck [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTv [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTwitch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiTwitter [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUmbrella [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUnderline [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUnlock [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUpload [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUploadCloud [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUserCheck [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUserMinus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUserPlus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUserX [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiUsers [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVideo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVideoOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVoicemail [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVolume [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVolume1 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVolume2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiVolumeX [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiWatch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiWifi [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiWifiOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiWind [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiX [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiXCircle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiXOctagon [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiXSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiYoutube [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiZap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiZapOff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiZoomIn [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FiZoomOut [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FilePropertiesObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FileTokenizer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FixedLengthAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FlacParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float16_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float16_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float32_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float32_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float64_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float64_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float80_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Float80_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Format [provided] [no usage info] [missing usage info prevents renaming] */

/*! export FormatChunk [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ForwardRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ForwardRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .ForwardRef */

/*! export FourCcToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Fragment [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Fragment [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Fragment */

/*! export Fragment [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .Fragment */

/*! export FrameParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GenIcon [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GenIcon [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-icons/lib/esm/iconBase.js .GenIcon */

/*! export Genres [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoAlert [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArchive [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowBoth [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowSmallDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowSmallLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowSmallRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowSmallUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoArrowUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBeaker [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBell [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBold [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBook [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBookmark [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBriefcase [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBroadcast [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBrowser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoBug [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCalendar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCheck [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoChecklist [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoChevronDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoChevronLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoChevronRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoChevronUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCircleSlash [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCircuitBoard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoClippy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoClock [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCloudDownload [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCloudUpload [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoComment [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCommentDiscussion [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoCreditCard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDash [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDashboard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDatabase [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDesktopDownload [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDeviceCamera [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDeviceCameraVideo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDeviceDesktop [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDeviceMobile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDiff [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDiffAdded [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDiffIgnored [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDiffModified [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDiffRemoved [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoDiffRenamed [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoEllipsis [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoEye [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoEyeClosed [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileBinary [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileCode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileDirectory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileMedia [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFilePdf [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileSubmodule [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileSymlinkDirectory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileSymlinkFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFileZip [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFlame [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFold [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFoldDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoFoldUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGear [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGift [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGist [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGistSecret [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGitBranch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGitCommit [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGitCompare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGitMerge [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGitPullRequest [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGithubAction [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGlobe [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGrabber [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoGraph [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoHeart [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoHistory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoHome [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoHorizontalRule [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoHubot [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoInbox [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoInfo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoIssueClosed [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoIssueOpened [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoIssueReopened [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoItalic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoJersey [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoKebabHorizontal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoKebabVertical [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoKey [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoKeyboard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLaw [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLightBulb [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLink [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLinkExternal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoListOrdered [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoListUnordered [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLocation [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLock [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLogoGist [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoLogoGithub [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMail [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMailRead [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMarkGithub [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMarkdown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMegaphone [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMention [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMilestone [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMirror [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMortarBoard [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoMute [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoNoNewline [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoNote [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoOctoface [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoOrganization [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPackage [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPaintcan [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPencil [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPerson [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPin [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPlay [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPlug [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPlus [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPlusSmall [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPrimitiveDot [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPrimitiveSquare [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoProject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoPulse [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoQuestion [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoQuote [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRadioTower [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoReply [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRepo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRepoClone [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRepoForcePush [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRepoForked [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRepoPull [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRepoPush [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoReport [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRequestChanges [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRocket [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRss [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoRuby [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoScreenFull [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoScreenNormal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSearch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoServer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSettings [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoShield [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSignIn [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSignOut [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSmiley [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSquirrel [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoStar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoStop [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoSync [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTasklist [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTelescope [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTerminal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTextSize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoThreeBars [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoThumbsdown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoThumbsup [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTools [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTrashcan [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTriangleDown [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTriangleLeft [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTriangleRight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoTriangleUp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoUnfold [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoUnmute [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoUnverified [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoVerified [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoVersions [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoWatch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoX [provided] [no usage info] [missing usage info prevents renaming] */

/*! export GoZap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HOVER [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HOVER [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js .HOVER */

/*! export HTML5Backend [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HTML5BackendImpl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HandlerRegistryImpl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HandlerRole [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HeadTrack [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Header [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HeaderExtensionObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export HeaderObjectToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ID3v1Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ID3v1TagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ID3v22TagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ID3v24TagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ID3v2Header [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ID3v2Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INIT_COORDS [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INIT_COORDS [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js .INIT_COORDS */

/*! export INT16_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT16_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT24_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT24_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT32_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT32_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT64_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT64_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export INT8 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IconBase [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IconBase [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-icons/lib/esm/iconBase.js .IconBase */

/*! export IconContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IconContext [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-icons/lib/esm/iconContext.js .IconContext */

/*! export IconsManifest [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IconsManifest [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-icons/lib/esm/iconsManifest.js .IconsManifest */

/*! export IdHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IdentificationHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IgnoreObjectState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export IgnoreType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export InfoTagHeaderTag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ItemType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export LameEncoderVersion [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Lazy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Lazy [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Lazy */

/*! export LineStream [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ListInfoTagValue [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MP4Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MP4TagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MatroskaParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MatroskaTagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MdhdAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Memo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Memo [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Memo */

/*! export MetadataCollector [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MetadataLibraryObjectState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MetadataObjectState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MonotonicInterpolant [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MpcSv7Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MpcSv8Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MpegParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MusicData [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MusicLength [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MusicList [provided] [no usage info] [missing usage info prevents renaming] */

/*! export MvhdAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export NONE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export NameAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export NativeDragSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export NativeTypes [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js */

/*! export OffPlayListButton [provided] [no usage info] [missing usage info prevents renaming] */

/*! export OggParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export OptionsReader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export OpusParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export PUBLISH_DRAG_SOURCE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export PUBLISH_DRAG_SOURCE [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js .PUBLISH_DRAG_SOURCE */

/*! export ParseStream [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Parser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ParserFactory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export PlayButton [provided] [no usage info] [missing usage info prevents renaming] */

/*! export PlayListData [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Portal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Portal [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Portal */

/*! export Profiler [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Profiler [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Profiler */

/*! export Profiler [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .Profiler */

/*! export ProgressBar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Provider [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/components/Provider.js .default */

/*! export PureComponent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export PureComponent [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .PureComponent */

/*! export REMOVE_SOURCE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export REMOVE_TARGET [provided] [no usage info] [missing usage info prevents renaming] */

/*! export RandomBufferReader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export RandomFileReader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ReactReduxContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ReactReduxContext [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/components/Context.js .ReactReduxContext */

/*! export ReadStreamTokenizer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export RiffInfoTagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SampleToChunkToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SegmentTable [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SerialDisposable [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ServerStyleSheet [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SoundSampleDescriptionV0 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SoundSampleDescriptionVersion [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SourceConnector [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SpeexParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export State [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StcoAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StopButton [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StreamPropertiesObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StreamReader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StrictMode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StrictMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .StrictMode */

/*! export StrictMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .StrictMode */

/*! export StringType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StscAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StsdAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StszAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export SttsAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export StyleSheetManager [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Suspense [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Suspense [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .Suspense */

/*! export Suspense [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .Suspense */

/*! export SuspoendLoading [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TEXT [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TagField [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TagFooter [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TagItemHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TargetConnector [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TargetType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TextEncodingToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ThemeConsumer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ThemeContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ThemeProvider [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TheoraParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TimeToSampleToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TopLevelHeaderObjectToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TrackHeaderAtom [provided] [no usage info] [missing usage info prevents renaming] */

/*! export TrackType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT16_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT16_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT24_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT24_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT32SYNCSAFE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT32_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT32_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT64_BE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT64_LE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export UINT8 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export URL [provided] [no usage info] [missing usage info prevents renaming] */

/*! export VERSION [provided] [no usage info] [missing usage info prevents renaming] */

/*! export VorbisDecoder [provided] [no usage info] [missing usage info prevents renaming] */

/*! export VorbisParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export VorbisPictureToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export VorbisTagMapper [provided] [no usage info] [missing usage info prevents renaming] */

/*! export WavPack [provided] [no usage info] [missing usage info prevents renaming] */

/*! export WavPackParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export WaveFormat [provided] [no usage info] [missing usage info prevents renaming] */

/*! export WaveParser [provided] [no usage info] [missing usage info prevents renaming] */

/*! export Windows1292Decoder [provided] [no usage info] [missing usage info prevents renaming] */

/*! export WmPictureToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export XMLReader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export XMLSerializer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export XMLSerializer [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/xmldom/dom.js .XMLSerializer */

/*! export XingHeaderFlags [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __DO_NOT_USE_OR_YOU_WILL_BE_HAUNTED_BY_SPOOKY_GHOSTS [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __DO_NOT_USE__ActionTypes [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED */

/*! export __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED */

/*! export __esModule [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */

/*! export __esModule [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/regenerator-runtime/runtime.js .__esModule */

/*! export __esModule [not provided] [no usage info] [missing usage info prevents renaming] */

/*! export __esModule [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __interactionsRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __interactionsRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .__interactionsRef */

/*! export __subscriberRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export __subscriberRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .__subscriberRef */

/*! export add [provided] [no usage info] [missing usage info prevents renaming] */

/*! export addSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export addTarget [provided] [no usage info] [missing usage info prevents renaming] */

/*! export adjustHue [provided] [no usage info] [missing usage info prevents renaming] */

/*! export albumList [provided] [no usage info] [missing usage info prevents renaming] */

/*! export album_add [provided] [no usage info] [missing usage info prevents renaming] */

/*! export album_remove [provided] [no usage info] [missing usage info prevents renaming] */

/*! export album_setIndex [provided] [no usage info] [missing usage info prevents renaming] */

/*! export animation [provided] [no usage info] [missing usage info prevents renaming] */

/*! export applyMiddleware [provided] [no usage info] [missing usage info prevents renaming] */

/*! export areArraysEqual [provided] [no usage info] [missing usage info prevents renaming] */

/*! export areCoordsEqual [provided] [no usage info] [missing usage info prevents renaming] */

/*! export areDirty [provided] [no usage info] [missing usage info prevents renaming] */

/*! export asap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export asap [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/@react-dnd/asap/dist/esm/browser/asap.js .asap */

/*! export audioObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export audioStatus_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export backToNextMusic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export background [provided] [no usage info] [missing usage info prevents renaming] */

/*! export backgroundImages [provided] [no usage info] [missing usage info prevents renaming] */

/*! export backgrounds [provided] [no usage info] [missing usage info prevents renaming] */

/*! export batch [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dom/cjs/react-dom.development.js .unstable_batchedUpdates */

/*! export between [provided] [no usage info] [missing usage info prevents renaming] */

/*! export bindActionCreators [provided] [no usage info] [missing usage info prevents renaming] */

/*! export blur_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export border [provided] [no usage info] [missing usage info prevents renaming] */

/*! export borderColor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export borderRadius [provided] [no usage info] [missing usage info prevents renaming] */

/*! export borderStyle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export borderWidth [provided] [no usage info] [missing usage info prevents renaming] */

/*! export browserSupportsCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export buttons [provided] [no usage info] [missing usage info prevents renaming] */

/*! export bytesToString [provided] [no usage info] [missing usage info prevents renaming] */

/*! export centerPlaced [provided] [no usage info] [missing usage info prevents renaming] */

/*! export checkDecoratorArguments [provided] [no usage info] [missing usage info prevents renaming] */

/*! export clearFix [provided] [no usage info] [missing usage info prevents renaming] */

/*! export cloneElement [provided] [no usage info] [missing usage info prevents renaming] */

/*! export cloneElement [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .cloneElement */

/*! export cloneWithRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export close [provided] [no usage info] [missing usage info prevents renaming] */

/*! export codecsFromDefault [provided] [no usage info] [missing usage info prevents renaming] */

/*! export combineReducers [provided] [no usage info] [missing usage info prevents renaming] */

/*! export commonTags [provided] [no usage info] [missing usage info prevents renaming] */

/*! export complement [provided] [no usage info] [missing usage info prevents renaming] */

/*! export compose [provided] [no usage info] [missing usage info prevents renaming] */

/*! export concatTypedArrays [provided] [no usage info] [missing usage info prevents renaming] */

/*! export connect [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/connect/connect.js .default */

/*! export connectAdvanced [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/components/connectAdvanced.js .default */

/*! export containers [provided] [no usage info] [missing usage info prevents renaming] */

/*! export contrast_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export convertText [provided] [no usage info] [missing usage info prevents renaming] */

/*! export cover [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createBeginDrag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createConnect [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createContext [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .createContext */

/*! export createDispatchHook [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createDispatchHook [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/hooks/useDispatch.js .createDispatchHook */

/*! export createDndContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createDndContext [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/common/DndContext.js .createDndContext */

/*! export createDragDropActions [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createDragDropManager [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createDrop [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createElement [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createElement [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .createElement */

/*! export createEndDrag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createFactory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createFactory [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .createFactory */

/*! export createGlobalStyle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createHover [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createNativeDragSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createPortal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createPortal [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .createPortal */

/*! export createPublishDragSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createReadStream [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .createRef */

/*! export createSelectorHook [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createSelectorHook [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/hooks/useSelector.js .createSelectorHook */

/*! export createSourceFactory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createStore [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createStoreHook [provided] [no usage info] [missing usage info prevents renaming] */

/*! export createStoreHook [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/hooks/useStore.js .createStoreHook */

/*! export createTargetFactory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export css [provided] [no usage info] [missing usage info prevents renaming] */

/*! export cssVar [provided] [no usage info] [missing usage info prevents renaming] */

/*! export currentMusic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export currentMusic_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export curtain_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export darken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export dbToRatio [provided] [no usage info] [missing usage info prevents renaming] */

/*! export decorateHandler [provided] [no usage info] [missing usage info prevents renaming] */

/*! export default [not provided] [no usage info] [missing usage info prevents renaming] */

/*! export default [provided] [no usage info] [missing usage info prevents renaming] */

/*! export defaultMergeProps [provided] [no usage info] [missing usage info prevents renaming] */

/*! export defaultMessages [provided] [no usage info] [missing usage info prevents renaming] */

/*! export desaturate [provided] [no usage info] [missing usage info prevents renaming] */

/*! export detectContainerForBytes [provided] [no usage info] [missing usage info prevents renaming] */

/*! export directionalProperty [provided] [no usage info] [missing usage info prevents renaming] */

/*! export easeIn [provided] [no usage info] [missing usage info prevents renaming] */

/*! export easeInOut [provided] [no usage info] [missing usage info prevents renaming] */

/*! export easeOut [provided] [no usage info] [missing usage info prevents renaming] */

/*! export elements [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ellipsis [provided] [no usage info] [missing usage info prevents renaming] */

/*! export em [provided] [no usage info] [missing usage info prevents renaming] */

/*! export endTag2 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export filterData [provided] [no usage info] [missing usage info prevents renaming] */

/*! export findDOMNode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export findDOMNode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .findDOMNode */

/*! export fluidRange [provided] [no usage info] [missing usage info prevents renaming] */

/*! export flushSync [provided] [no usage info] [missing usage info prevents renaming] */

/*! export flushSync [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .flushSync */

/*! export fontFace [provided] [no usage info] [missing usage info prevents renaming] */

/*! export format [provided] [no usage info] [missing usage info prevents renaming] */

/*! export forwardRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export forwardRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .forwardRef */

/*! export fromBuffer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export fromFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export fromStream [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ftyp [provided] [no usage info] [missing usage info prevents renaming] */

/*! export get [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getAlbumAndMusics [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getBatch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getContrast [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getDataFromDataTransfer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getDecoratedComponent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getDependsOnOwnProps [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getDifferenceFromInitialOffset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getDragPreviewOffset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getEmptyImage [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getEmptyImage [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd-html5-backend/dist/esm/getEmptyImage.js .getEmptyImage */

/*! export getEventClientOffset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getId3Offset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getLuminance [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getLyricsHeaderLength [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getMimeForCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getMusics [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getNextUniqueId [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getNodeClientOffset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getSourceClientOffset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getValueAndUnit [provided] [no usage info] [missing usage info prevents renaming] */

/*! export grayscale [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hasID3v1Header [provided] [no usage info] [missing usage info prevents renaming] */

/*! export headNextMusicIndex [provided] [no usage info] [missing usage info prevents renaming] */

/*! export headNextPlayList [provided] [no usage info] [missing usage info prevents renaming] */

/*! export headToNextMusic [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hiDPI [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hideText [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hideVisually [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hsl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hslToColorString [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hsla [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hydrate [provided] [no usage info] [missing usage info prevents renaming] */

/*! export hydrate [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .hydrate */

/*! export id3Size [provided] [no usage info] [missing usage info prevents renaming] */

/*! export id3v22TagMap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export important [provided] [no usage info] [missing usage info prevents renaming] */

/*! export impureFinalPropsSelectorFactory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export inheritAttributes [provided] [no usage info] [missing usage info prevents renaming] */

/*! export intersection [provided] [no usage info] [missing usage info prevents renaming] */

/*! export invariant [provided] [no usage info] [missing usage info prevents renaming] */

/*! export invert [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isAsyncMode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isAsyncMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isAsyncMode */

/*! export isAudioCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isBitSet [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isClassComponent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isConcurrentMode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isConcurrentMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isConcurrentMode */

/*! export isContextConsumer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isContextConsumer [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isContextConsumer */

/*! export isContextProvider [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isContextProvider [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isContextProvider */

/*! export isElement [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isElement [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isElement */

/*! export isFirefox [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isForwardRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isForwardRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isForwardRef */

/*! export isFragment [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isFragment [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isFragment */

/*! export isFunction [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isLazy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isLazy [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isLazy */

/*! export isLikely [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isLikelyFmp4MediaSegment [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isMemo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isMemo [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isMemo */

/*! export isObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isPaused [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isPlainObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isPortal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isPortal [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isPortal */

/*! export isProfiler [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isProfiler [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isProfiler */

/*! export isRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isRefForwardingComponent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isRefable [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isSafari [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isSingleton [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isStrictMode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isStrictMode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isStrictMode */

/*! export isString [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isStyledComponent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isSuspense [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isSuspense [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isSuspense */

/*! export isTextCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isTypedArray [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isUnique [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isValidElement [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isValidElement [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .isValidElement */

/*! export isValidElementType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isValidElementType [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .isValidElementType */

/*! export isValidType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isVideoCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export joinArtists [provided] [no usage info] [missing usage info prevents renaming] */

/*! export keyframes [provided] [no usage info] [missing usage info prevents renaming] */

/*! export lazy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export lazy [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .lazy */

/*! export lighten [provided] [no usage info] [missing usage info prevents renaming] */

/*! export linearGradient [provided] [no usage info] [missing usage info prevents renaming] */

/*! export mapLegacyAvcCodecs [provided] [no usage info] [missing usage info prevents renaming] */

/*! export margin [provided] [no usage info] [missing usage info prevents renaming] */

/*! export matchNativeItemType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export matchesType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export math [provided] [no usage info] [missing usage info prevents renaming] */

/*! export meetsContrastGuidelines [provided] [no usage info] [missing usage info prevents renaming] */

/*! export memo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export memo [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .memo */

/*! export memoize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export mhdr [provided] [no usage info] [missing usage info prevents renaming] */

/*! export mix [provided] [no usage info] [missing usage info prevents renaming] */

/*! export modeWindow [provided] [no usage info] [missing usage info prevents renaming] */

/*! export modularScale [provided] [no usage info] [missing usage info prevents renaming] */

/*! export muxerSupportsCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export nativeTypesConfig [provided] [no usage info] [missing usage info prevents renaming] */

/*! export noop [provided] [no usage info] [missing usage info prevents renaming] */

/*! export normalize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export opacify [provided] [no usage info] [missing usage info prevents renaming] */

/*! export open [provided] [no usage info] [missing usage info prevents renaming] */

/*! export orderTags [provided] [no usage info] [missing usage info prevents renaming] */

/*! export padding [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parse [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseBuffer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseCodecs [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseFromTokenizer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseHttpContentType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseStream [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseTagFlags [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseToHsl [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseToRgb [provided] [no usage info] [missing usage info prevents renaming] */

/*! export parseUTCTiming [provided] [no usage info] [missing usage info prevents renaming] */

/*! export pathExists [provided] [no usage info] [missing usage info prevents renaming] */

/*! export paused_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export picture_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playList [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playListContainer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playListTitle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playList_add [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playList_remove [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playList_select [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playList_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playList_setMusicIndex [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playMusic_add [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playMusic_remove [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playMusic_switch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playOptions [provided] [no usage info] [missing usage info prevents renaming] */

/*! export playOptions_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export position [provided] [no usage info] [missing usage info prevents renaming] */

/*! export pureFinalPropsSelectorFactory [provided] [no usage info] [missing usage info prevents renaming] */

/*! export radialGradient [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ratingToStars [provided] [no usage info] [missing usage info prevents renaming] */

/*! export ratioToDb [provided] [no usage info] [missing usage info prevents renaming] */

/*! export rawAsap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export read [provided] [no usage info] [missing usage info prevents renaming] */

/*! export readCodecEntries [provided] [no usage info] [missing usage info prevents renaming] */

/*! export readFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export readIntBE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export readUIntBE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export readXingHeader [provided] [no usage info] [missing usage info prevents renaming] */

/*! export readableColor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export reduce [provided] [no usage info] [missing usage info prevents renaming] */

/*! export registerSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export registerTarget [provided] [no usage info] [missing usage info prevents renaming] */

/*! export rem [provided] [no usage info] [missing usage info prevents renaming] */

/*! export removeSource [provided] [no usage info] [missing usage info prevents renaming] */

/*! export removeTarget [provided] [no usage info] [missing usage info prevents renaming] */

/*! export render [provided] [no usage info] [missing usage info prevents renaming] */

/*! export render [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .render */

/*! export retinaImage [provided] [no usage info] [missing usage info prevents renaming] */

/*! export rgb [provided] [no usage info] [missing usage info prevents renaming] */

/*! export rgbToColorString [provided] [no usage info] [missing usage info prevents renaming] */

/*! export rgba [provided] [no usage info] [missing usage info prevents renaming] */

/*! export riffInfoTagMap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export saturate [provided] [no usage info] [missing usage info prevents renaming] */

/*! export scanAppendingHeaders [provided] [no usage info] [missing usage info prevents renaming] */

/*! export selectCover [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setBatch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setClientOffset [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setHue [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setLightness [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setMinuteTime [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setSaturation [provided] [no usage info] [missing usage info prevents renaming] */

/*! export setToMin [provided] [no usage info] [missing usage info prevents renaming] */

/*! export shade [provided] [no usage info] [missing usage info prevents renaming] */

/*! export shallowEqual [provided] [no usage info] [missing usage info prevents renaming] */

/*! export shallowEqual [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/utils/shallowEqual.js .default */

/*! export shineSVG [provided] [no usage info] [missing usage info prevents renaming] */

/*! export shineStyle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export simpleTypeFromSourceType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export size [provided] [no usage info] [missing usage info prevents renaming] */

/*! export smallTitle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export stat [provided] [no usage info] [missing usage info prevents renaming] */

/*! export strictEquality [provided] [no usage info] [missing usage info prevents renaming] */

/*! export stringToBytes [provided] [no usage info] [missing usage info prevents renaming] */

/*! export stringToMpdXml [provided] [no usage info] [missing usage info prevents renaming] */

/*! export stripUnit [provided] [no usage info] [missing usage info prevents renaming] */

/*! export subtract [provided] [no usage info] [missing usage info prevents renaming] */

/*! export tagType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export tarHeaderChecksumMatches [provided] [no usage info] [missing usage info prevents renaming] */

/*! export test [provided] [no usage info] [missing usage info prevents renaming] */

/*! export textInputs [provided] [no usage info] [missing usage info prevents renaming] */

/*! export timingFunctions [provided] [no usage info] [missing usage info prevents renaming] */

/*! export tint [provided] [no usage info] [missing usage info prevents renaming] */

/*! export tkhd [provided] [no usage info] [missing usage info prevents renaming] */

/*! export toColorString [provided] [no usage info] [missing usage info prevents renaming] */

/*! export toM3u8 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export toPlaylists [provided] [no usage info] [missing usage info prevents renaming] */

/*! export toRatio [provided] [no usage info] [missing usage info prevents renaming] */

/*! export toUint8 [provided] [no usage info] [missing usage info prevents renaming] */

/*! export transitions [provided] [no usage info] [missing usage info prevents renaming] */

/*! export translateLegacyCodec [provided] [no usage info] [missing usage info prevents renaming] */

/*! export translateLegacyCodecs [provided] [no usage info] [missing usage info prevents renaming] */

/*! export transparentize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export triangle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export tuenSavedAlbums [provided] [no usage info] [missing usage info prevents renaming] */

/*! export turnSavedList [provided] [no usage info] [missing usage info prevents renaming] */

/*! export typeOf [provided] [no usage info] [missing usage info prevents renaming] */

/*! export typeOf [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-is/cjs/react-is.development.js .typeOf */

/*! export uiColor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export uiColor_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export uint32SyncSafeToken [provided] [no usage info] [missing usage info prevents renaming] */

/*! export union [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unmountComponentAtNode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unmountComponentAtNode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .unmountComponentAtNode */

/*! export unstable_IdlePriority [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_IdlePriority [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_IdlePriority */

/*! export unstable_ImmediatePriority [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_ImmediatePriority [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_ImmediatePriority */

/*! export unstable_LowPriority [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_LowPriority [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_LowPriority */

/*! export unstable_NormalPriority [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_NormalPriority [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_NormalPriority */

/*! export unstable_Profiling [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_Profiling [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_Profiling */

/*! export unstable_UserBlockingPriority [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_UserBlockingPriority [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_UserBlockingPriority */

/*! export unstable_batchedUpdates [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_batchedUpdates [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dom/cjs/react-dom.development.js .unstable_batchedUpdates */

/*! export unstable_batchedUpdates [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .unstable_batchedUpdates */

/*! export unstable_cancelCallback [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_cancelCallback [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_cancelCallback */

/*! export unstable_clear [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_clear [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_clear */

/*! export unstable_continueExecution [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_continueExecution [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_continueExecution */

/*! export unstable_createPortal [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_createPortal [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .unstable_createPortal */

/*! export unstable_forceFrameRate [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_forceFrameRate [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_forceFrameRate */

/*! export unstable_getCurrent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_getCurrent [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_getCurrent */

/*! export unstable_getCurrentPriorityLevel [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_getCurrentPriorityLevel [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_getCurrentPriorityLevel */

/*! export unstable_getFirstCallbackNode [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_getFirstCallbackNode [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_getFirstCallbackNode */

/*! export unstable_getThreadID [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_getThreadID [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_getThreadID */

/*! export unstable_next [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_next [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_next */

/*! export unstable_now [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_now [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_now */

/*! export unstable_pauseExecution [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_pauseExecution [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_pauseExecution */

/*! export unstable_renderSubtreeIntoContainer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_renderSubtreeIntoContainer [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .unstable_renderSubtreeIntoContainer */

/*! export unstable_requestPaint [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_requestPaint [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_requestPaint */

/*! export unstable_runWithPriority [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_runWithPriority [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_runWithPriority */

/*! export unstable_scheduleCallback [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_scheduleCallback [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_scheduleCallback */

/*! export unstable_shouldYield [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_shouldYield [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_shouldYield */

/*! export unstable_subscribe [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_subscribe [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_subscribe */

/*! export unstable_trace [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_trace [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_trace */

/*! export unstable_unsubscribe [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_unsubscribe [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_unsubscribe */

/*! export unstable_wrap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_wrap [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler-tracing.development.js .unstable_wrap */

/*! export unstable_wrapCallback [provided] [no usage info] [missing usage info prevents renaming] */

/*! export unstable_wrapCallback [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/scheduler/cjs/scheduler.development.js .unstable_wrapCallback */

/*! export useCallback [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useCallback [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useCallback */

/*! export useCollector [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useContext [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useContext */

/*! export useDebugValue [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDebugValue [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useDebugValue */

/*! export useDispatch [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDispatch [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/hooks/useDispatch.js .useDispatch */

/*! export useDrag [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */

/*! export useDrag [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDrag [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/hooks/useDrag.js .useDrag */

/*! export useDragDropManager [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */

/*! export useDragDropManager [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDragDropManager [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js .useDragDropManager */

/*! export useDragHandler [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDragLayer [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */

/*! export useDragLayer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDragLayer [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/hooks/useDragLayer.js .useDragLayer */

/*! export useDragSourceMonitor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDrop [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */

/*! export useDrop [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDrop [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-dnd/dist/esm/hooks/useDrop.js .useDrop */

/*! export useDropHandler [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useDropTargetMonitor [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useEffect [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useEffect [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useEffect */

/*! export useImperativeHandle [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useImperativeHandle [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useImperativeHandle */

/*! export useIsomorphicLayoutEffect [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useLayoutEffect [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useLayoutEffect [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useLayoutEffect */

/*! export useMemo [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useMemo [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useMemo */

/*! export useMonitorOutput [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useReducer [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useReducer [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useReducer */

/*! export useReduxContext [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useRef [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useRef [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useRef */

/*! export useSelector [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useSelector [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/hooks/useSelector.js .useSelector */

/*! export useState [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useState [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .useState */

/*! export useStore [provided] [no usage info] [missing usage info prevents renaming] */

/*! export useStore [provided] [no usage info] [missing usage info prevents renaming] -> ../../node_modules/react-redux/es/hooks/useStore.js .useStore */

/*! export validateSourceContract [provided] [no usage info] [missing usage info prevents renaming] */

/*! export validateTargetContract [provided] [no usage info] [missing usage info prevents renaming] */

/*! export validateType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export valumeHeight [provided] [no usage info] [missing usage info prevents renaming] */

/*! export version [provided] [no usage info] [missing usage info prevents renaming] */

/*! export version [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react-dom/cjs/react-dom.development.js .version */

/*! export version [provided] [no usage info] [provision prevents renaming (no use info)] -> ../../node_modules/react/cjs/react.development.js .version */

/*! export videoPath [provided] [no usage info] [missing usage info prevents renaming] */

/*! export video_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export visualSetiing [provided] [no usage info] [missing usage info prevents renaming] */

/*! export visualSetting_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export volume [provided] [no usage info] [missing usage info prevents renaming] */

/*! export volumeValue_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMapDispatchToPropsIsFunction [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMapDispatchToPropsIsMissing [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMapDispatchToPropsIsObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMapStateToPropsIsFunction [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMapStateToPropsIsMissing [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMergePropsIsFunction [provided] [no usage info] [missing usage info prevents renaming] */

/*! export whenMergePropsIsOmitted [provided] [no usage info] [missing usage info prevents renaming] */

/*! export windowMode_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export windowSize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export windowWidth [provided] [no usage info] [missing usage info prevents renaming] */

/*! export window_set [provided] [no usage info] [missing usage info prevents renaming] */

/*! export withTheme [provided] [no usage info] [missing usage info prevents renaming] */

/*! export without [provided] [no usage info] [missing usage info prevents renaming] */

/*! export wordWrap [provided] [no usage info] [missing usage info prevents renaming] */

/*! export wrapConnectorHooks [provided] [no usage info] [missing usage info prevents renaming] */

/*! export wrapMapToPropsConstant [provided] [no usage info] [missing usage info prevents renaming] */

/*! export wrapMapToPropsFunc [provided] [no usage info] [missing usage info prevents renaming] */

/*! export wrapMergePropsFunc [provided] [no usage info] [missing usage info prevents renaming] */

/*! export wrapPromise [provided] [no usage info] [missing usage info prevents renaming] */

/*! export write [provided] [no usage info] [missing usage info prevents renaming] */

/*! export writeFile [provided] [no usage info] [missing usage info prevents renaming] */

/*! export writeFileSync [provided] [no usage info] [missing usage info prevents renaming] */

/*! export writeIntBE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export writeIntLE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export writeUIntBE [provided] [no usage info] [missing usage info prevents renaming] */

/*! export xor [provided] [no usage info] [missing usage info prevents renaming] */

/*! exports [not provided] [no usage info] */

/*! file-type/core */

/*! flagged exports */

/*! fs */

/*! global/document */

/*! global/window */

/*! hoist-non-react-statics */

/*! ieee754 */

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

/*! is-function */

/*! keycode */

/*! m3u8-parser */

/*! media-typer */

/*! memoize-one */

/*! min-document */

/*! mpd-parser */

/*! ms */

/*! music-metadata */

/*! mux.js/lib/mp4/probe */

/*! mux.js/lib/tools/parse-sidx */

/*! mux.js/lib/tools/ts-inspector.js */

/*! mux.js/lib/utils/clock */

/*! namespace exports */

/*! object-assign */

/*! other exports [maybe provided (runtime-defined)] [no usage info] */

/*! other exports [maybe provided (runtime-defined)] [no usage info] -> ../../node_modules/react-dnd/dist/esm/decorators/interfaces.js */

/*! other exports [maybe provided (runtime-defined)] [no usage info] -> ../../node_modules/regenerator-runtime/runtime.js */

/*! other exports [not provided] [no usage info] */

/*! path */

/*! peek-readable */

/*! polished */

/*! prop-types */

/*! react */

/*! react-dnd */

/*! react-dnd-html5-backend */

/*! react-dom */

/*! react-icons/fi */

/*! react-icons/go */

/*! react-is */

/*! react-redux */

/*! redux */

/*! regenerator-runtime */

/*! runtime requirements:  */

/*! runtime requirements: __webpack_exports__ */

/*! runtime requirements: __webpack_exports__, __webpack_require__ */

/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_exports__, module */

/*! runtime requirements: __webpack_exports__, module, __webpack_require__ */

/*! runtime requirements: __webpack_require__, __webpack_exports__ */

/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.n, __webpack_require__.r, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.n, module.loaded, module.id, module, __webpack_require__.hmd, __webpack_exports__, __webpack_require__.r, __webpack_require__.nc, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, module */

/*! runtime requirements: __webpack_require__, module.loaded, module.id, module, __webpack_require__.hmd, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: module */

/*! runtime requirements: module, __webpack_require__ */

/*! runtime requirements: module, top-level-this-exports */

/*! safe-json-parse/tuple */

/*! scheduler */

/*! scheduler/tracing */

/*! strtok3 */

/*! strtok3/lib/core */

/*! styled-components */

/*! stylis-rule-sheet */

/*! stylis/stylis.min */

/*! symbol-observable */

/*! token-types */

/*! unknown exports (runtime-defined) */

/*! url-toolkit */

/*! video.js */

/*! videojs-vtt.js */

/*! xmldom */

/*!******************!*\
  !*** ./main.tsx ***!
  \******************/

/*!*********************!*\
  !*** external "fs" ***!
  \*********************/

/*!***********************!*\
  !*** external "path" ***!
  \***********************/

/*!*************************!*\
  !*** ./styles/mixin.ts ***!
  \*************************/

/*!***************************!*\
  !*** external "electron" ***!
  \***************************/

/*!****************************!*\
  !*** ./styles/digiFont.ts ***!
  \****************************/

/*!******************************!*\
  !*** ./redux/store/store.ts ***!
  \******************************/

/*!******************************!*\
  !*** ./styles/containers.ts ***!
  \******************************/

/*!******************************!*\
  !*** min-document (ignored) ***!
  \******************************/

/*!*******************************!*\
  !*** ./containers/layout.tsx ***!
  \*******************************/

/*!*******************************!*\
  !*** ./overCompo/loading.tsx ***!
  \*******************************/

/*!********************************!*\
  !*** ./redux/reducer/audio.ts ***!
  \********************************/

/*!********************************!*\
  !*** ./redux/reducer/label.ts ***!
  \********************************/

/*!*********************************!*\
  !*** ./overCompo/overLayer.tsx ***!
  \*********************************/

/*!*********************************!*\
  !*** ./redux/reducer/common.ts ***!
  \*********************************/

/*!*********************************!*\
  !*** ./redux/reducer/filter.ts ***!
  \*********************************/

/*!*********************************!*\
  !*** ./redux/reducer/musics.ts ***!
  \*********************************/

/*!*********************************!*\
  !*** ./redux/reducer/window.ts ***!
  \*********************************/

/*!***********************************!*\
  !*** ./fileSystem/timeConvert.ts ***!
  \***********************************/

/*!************************************!*\
  !*** ./components/label/Label.tsx ***!
  \************************************/

/*!*************************************!*\
  !*** ./redux/actions/dispatchUI.ts ***!
  \*************************************/

/*!**************************************!*\
  !*** ../../node_modules/ms/index.js ***!
  \**************************************/

/*!**************************************!*\
  !*** ./components/volume/valume.tsx ***!
  \**************************************/

/*!***************************************!*\
  !*** ./components/musicList/menu.tsx ***!
  \***************************************/

/*!***************************************!*\
  !*** ./containers/commutDataBase.tsx ***!
  \***************************************/

/*!****************************************!*\
  !*** ../../node_modules/xmldom/dom.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ../../node_modules/xmldom/sax.js ***!
  \****************************************/

/*!****************************************!*\
  !*** ./fileSystem/handleMusicFiles.ts ***!
  \****************************************/

/*!****************************************!*\
  !*** ./overCompo/fillPlayListName.tsx ***!
  \****************************************/

/*!****************************************!*\
  !*** ./redux/actions/dispatchAudio.ts ***!
  \****************************************/

/*!****************************************!*\
  !*** ./redux/actions/moveNextMusic.ts ***!
  \****************************************/

/*!*****************************************!*\
  !*** ../../node_modules/react/index.js ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./redux/actions/dispatchFilter.ts ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./redux/actions/dispatchMusics.ts ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./redux/actions/dispatchVisual.ts ***!
  \*****************************************/

/*!*****************************************!*\
  !*** ./redux/actions/dispatchWIndow.ts ***!
  \*****************************************/

/*!******************************************!*\
  !*** ./components/controlor/buttons.tsx ***!
  \******************************************/

/*!******************************************!*\
  !*** ./components/label/video/video.tsx ***!
  \******************************************/

/*!*******************************************!*\
  !*** ../../node_modules/global/window.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ../../node_modules/ieee754/index.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ../../node_modules/keycode/index.js ***!
  \*******************************************/

/*!*******************************************!*\
  !*** ./redux/actions/dispatchPlayList.ts ***!
  \*******************************************/

/*!********************************************!*\
  !*** ../../node_modules/react-is/index.js ***!
  \********************************************/

/*!********************************************!*\
  !*** ../../node_modules/redux/es/redux.js ***!
  \********************************************/

/*!********************************************!*\
  !*** ./components/controlor/controlor.tsx ***!
  \********************************************/

/*!********************************************!*\
  !*** ./components/label/cover/suspend.tsx ***!
  \********************************************/

/*!********************************************!*\
  !*** ./components/musicList/musicData.tsx ***!
  \********************************************/

/*!*********************************************!*\
  !*** ../../node_modules/global/document.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ../../node_modules/react-dom/index.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ../../node_modules/scheduler/index.js ***!
  \*********************************************/

/*!*********************************************!*\
  !*** ./components/setting/settingCompo.tsx ***!
  \*********************************************/

/*!**********************************************!*\
  !*** ../../node_modules/debug/src/common.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ../../node_modules/prop-types/index.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ../../node_modules/strtok3/lib/core.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ./components/controlor/progressBar.tsx ***!
  \**********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/debug/src/browser.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/is-function/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/media-typer/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/scheduler/tracing.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/strtok3/lib/index.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/stylis/stylis.min.js ***!
  \***********************************************/

/*!***********************************************!*\
  !*** ../../node_modules/xmldom/dom-parser.js ***!
  \***********************************************/

/*!************************************************!*\
  !*** ../../node_modules/@videojs/xhr/index.js ***!
  \************************************************/

/*!************************************************!*\
  !*** ../../node_modules/content-type/index.js ***!
  \************************************************/

/*!************************************************!*\
  !*** ./components/musicList/listContainer.tsx ***!
  \************************************************/

/*!************************************************!*\
  !*** ./components/songDisplay/songDisplay.tsx ***!
  \************************************************/

/*!*************************************************!*\
  !*** ../../node_modules/object-assign/index.js ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/controlor/hooks/useAudio.tsx ***!
  \*************************************************/

/*!*************************************************!*\
  !*** ./components/label/cover/coverPicture.tsx ***!
  \*************************************************/

/*!**************************************************!*\
  !*** ../../node_modules/mux.js/lib/aac/utils.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ../../node_modules/mux.js/lib/mp4/probe.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ../../node_modules/mux.js/lib/utils/bin.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ../../node_modules/react-redux/es/index.js ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ./components/setting/background/bgPath.tsx ***!
  \**************************************************/

/*!**************************************************!*\
  !*** ./components/setting/filter/rangeParts.tsx ***!
  \**************************************************/

/*!***************************************************!*\
  !*** ../../node_modules/mux.js/lib/m2ts/probe.js ***!
  \***************************************************/

/*!***************************************************!*\
  !*** ../../node_modules/safe-json-parse/tuple.js ***!
  \***************************************************/

/*!***************************************************!*\
  !*** ../../node_modules/strtok3/lib/FsPromise.js ***!
  \***************************************************/

/*!***************************************************!*\
  !*** ../../node_modules/token-types/lib/index.js ***!
  \***************************************************/

/*!****************************************************!*\
  !*** ../../node_modules/mux.js/lib/utils/clock.js ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ../../node_modules/video.js/dist/video.es.js ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ../../node_modules/videojs-vtt.js/lib/vtt.js ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ./components/controlor/optionBar/options.tsx ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ./components/setting/colorList/colorList.tsx ***!
  \****************************************************/

/*!****************************************************!*\
  !*** ./components/setting/filter/filterSlider.tsx ***!
  \****************************************************/

/*!*****************************************************!*\
  !*** ../../node_modules/music-metadata/lib/core.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ../../node_modules/music-metadata/lib/type.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ../../node_modules/mux.js/lib/mp4/find-box.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ../../node_modules/mux.js/lib/utils/stream.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ../../node_modules/peek-readable/lib/index.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ../../node_modules/stylis-rule-sheet/index.js ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ./components/label/audioSpectrum/spectrum.tsx ***!
  \*****************************************************/

/*!*****************************************************!*\
  !*** ./components/musicList/musicListContainer.tsx ***!
  \*****************************************************/

/*!******************************************************!*\
  !*** ../../node_modules/music-metadata/lib/index.js ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/index.js ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ../../node_modules/react-icons/fi/index.esm.js ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ../../node_modules/react-icons/go/index.esm.js ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ./components/setPlayList/playListContainer.tsx ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ./components/setPlayList/playlist/playList.tsx ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ./components/setting/background/background.tsx ***!
  \******************************************************/

/*!******************************************************!*\
  !*** ./components/setting/colorList/colorButton.tsx ***!
  \******************************************************/

/*!*******************************************************!*\
  !*** ../../node_modules/mux.js/lib/mp4/parse-type.js ***!
  \*******************************************************/

/*!*******************************************************!*\
  !*** ../../node_modules/prop-types/checkPropTypes.js ***!
  \*******************************************************/

/*!*******************************************************!*\
  !*** ../../node_modules/react-icons/lib/esm/index.js ***!
  \*******************************************************/

/*!*******************************************************!*\
  !*** ../../node_modules/strtok3/lib/FileTokenizer.js ***!
  \*******************************************************/

/*!*******************************************************!*\
  !*** ../../node_modules/videojs-vtt.js/lib/vttcue.js ***!
  \*******************************************************/

/*!*******************************************************!*\
  !*** ./components/setPlayList/footer/footerIcons.tsx ***!
  \*******************************************************/

/*!********************************************************!*\
  !*** ../../node_modules/polished/dist/polished.esm.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/batch.js ***!
  \********************************************************/

/*!********************************************************!*\
  !*** ../../node_modules/symbol-observable/es/index.js ***!
  \********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/contracts.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/factories.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/music-metadata/lib/asf/GUID.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/music-metadata/lib/mp4/Atom.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/mux.js/lib/tools/parse-sidx.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/mux.js/lib/tools/parse-tfdt.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/mux.js/lib/tools/parse-tfhd.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/mux.js/lib/tools/parse-trun.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/react/cjs/react.development.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/regenerator-runtime/runtime.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/strtok3/lib/BufferTokenizer.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ../../node_modules/url-toolkit/src/url-toolkit.js ***!
  \*********************************************************/

/*!*********************************************************!*\
  !*** ./components/label/audioSpectrum/audioContext.tsx ***!
  \*********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/interfaces.js ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/music-metadata/lib/iff/index.js ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/mux.js/lib/m2ts/stream-types.js ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/react-icons/lib/esm/iconBase.js ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/warning.js ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ../../node_modules/videojs-vtt.js/lib/vttregion.js ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ./components/musicList/playListMusics/playList.tsx ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ./components/setPlayList/footer/playListFooter.tsx ***!
  \**********************************************************/

/*!**********************************************************!*\
  !*** ./components/setPlayList/header/playListHeader.tsx ***!
  \**********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/typeof.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/mpd-parser/dist/mpd-parser.es.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/mux.js/lib/tools/ts-inspector.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useStore.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/strtok3/lib/AbstractTokenizer.js ***!
  \***********************************************************/

/*!***********************************************************!*\
  !*** ../../node_modules/symbol-observable/es/ponyfill.js ***!
  \***********************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/extends.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/codecs.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/stream.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/utils/coords.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/asf/AsfUtil.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/Util.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/index.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/utils/isRef.js ***!
  \************************************************************/

/*!************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/connect.js ***!
  \************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/inherits.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/m3u8-parser/dist/m3u8-parser.es.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/dsf/DsfChunk.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/mpeg/XingTag.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/index.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/react-icons/lib/esm/iconContext.js ***!
  \*************************************************************/

/*!*************************************************************!*\
  !*** ../../node_modules/strtok3/lib/ReadStreamTokenizer.js ***!
  \*************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/construct.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/@babel/runtime/regenerator/index.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/reducers/index.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/utils/equality.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/utils/js_utils.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/memoize-one/dist/memoize-one.esm.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ParserFactory.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/asf/AsfObject.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/asf/AsfParser.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/FourCC.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/dsf/DsfParser.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/mp4/AtomToken.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/mp4/MP4Parser.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/OggParser.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/opus/Opus.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/wav/WaveChunk.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/useDrag.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/useDrop.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useDispatch.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useSelector.js ***!
  \**************************************************************/

/*!**************************************************************!*\
  !*** ../../node_modules/videojs-vtt.js/lib/browser-index.js ***!
  \**************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/@emotion/memoize/dist/memoize.esm.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/utils/dirtiness.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/aiff/AiffToken.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/matroska/types.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/musepack/index.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/riff/RiffChunk.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/wav/WaveParser.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/peek-readable/lib/EndOfFileStream.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/utils/js_utils.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-icons/lib/esm/iconsManifest.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-is/cjs/react-is.development.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/components/Context.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/mergeProps.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/Subscription.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/shallowEqual.js ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ./components/setPlayList/header/buttons/playButtons.tsx ***!
  \***************************************************************/

/*!***************************************************************!*\
  !*** ./components/setPlayList/mainMusicList/playListMain.tsx ***!
  \***************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/createClass.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/containers.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/registry.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/reducers/stateId.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/aiff/AiffParser.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/flac/FlacParser.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/lyrics3/Lyrics3.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/mpeg/MpegParser.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/speex/Speex.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/react-redux/es/components/Provider.js ***!
  \****************************************************************/

/*!****************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/isPlainObject.js ***!
  \****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/media-types.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/resolve-url.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/reducers/refCount.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/utils/matchesType.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/apev2/APEv2Token.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/asf/AsfTagMapper.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v2/ID3v2Token.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/mp4/MP4TagMapper.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/mux.js/lib/tools/parse-sample-flags.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/index.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/utils.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/interfaces/index.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/react-dom/cjs/react-dom.development.js ***!
  \*****************************************************************/

/*!*****************************************************************!*\
  !*** ../../node_modules/scheduler/cjs/scheduler.development.js ***!
  \*****************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/construct.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/inheritsLoose.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/@react-dnd/asap/dist/esm/browser/raw.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/byte-helpers.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/apev2/APEv2Parser.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v1/ID3v1Parser.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v1/ID3v1TagMap.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v2/FrameParser.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v2/ID3v2Parser.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/theora/Theora.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/DndContext.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/utils/isValidType.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ../../node_modules/react-redux/es/hooks/useReduxContext.js ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ./components/setPlayList/header/buttons/playListButton.tsx ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ./components/setPlayList/mainMusicList/music/albumList.tsx ***!
  \******************************************************************/

/*!******************************************************************!*\
  !*** ./components/setPlayList/mainMusicList/music/musicList.tsx ***!
  \******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/@react-dnd/asap/dist/esm/browser/asap.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/DragDropManagerImpl.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/DragDropMonitorImpl.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/HandlerRegistryImpl.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/reducers/dragOffset.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/BasicParser.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/dsdiff/DsdiffToken.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/DndProvider.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/useDragLayer.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/interfaces/options.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/utils/cloneWithRef.js ***!
  \*******************************************************************/

/*!*******************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \*******************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/@react-dnd/asap/dist/esm/browser/index.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/dsdiff/DsdiffParser.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/opus/OpusParser.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/riff/RiffInfoTagMap.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/index.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/registration.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/internal/drag.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/internal/drop.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/interfaces/hooksApi.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/interfaces/monitors.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/selectorFactory.js ***!
  \********************************************************************/

/*!********************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/@react-dnd/invariant/dist/invariant.esm.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/@videojs/xhr/node_modules/global/window.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/utils/getNextUniqueId.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/apev2/APEv2TagMapper.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/matroska/MatroskaDtd.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/wavpack/WavPackToken.js ***!
  \*********************************************************************/

/*!*********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/DragLayer.js ***!
  \*********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/index.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/types.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/reducers/dragOperation.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v2/ID3v22TagMapper.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v2/ID3v24TagMapper.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/speex/SpeexParser.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/wavpack/WavPackParser.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/DragSource.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/DropTarget.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/interfaces.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/interfaces/connectors.js ***!
  \**********************************************************************/

/*!**********************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/reactBatchedUpdates.js ***!
  \**********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/GenericTagTypes.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/musepack/sv7/BitReader.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/mux.js/lib/m2ts/timestamp-rollover-stream.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/SourceConnector.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/TargetConnector.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/disposables.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-redux/es/components/connectAdvanced.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \***********************************************************************/

/*!***********************************************************************!*\
  !*** ../../node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \***********************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/GenericTagMapper.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/RandomFileReader.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/id3v2/AbstractID3Parser.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/matroska/MatroskaParser.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/theora/TheoraParser.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/node_modules/file-type/core.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/music-metadata/node_modules/file-type/util.js ***!
  \************************************************************************/

/*!************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/DragPreviewImage.js ***!
  \************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/@emotion/unitless/dist/unitless.browser.esm.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/CombinedTagMapper.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/MetadataCollector.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js ***!
  \*************************************************************************/

/*!*************************************************************************!*\
  !*** ../../node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/RandomBufferReader.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/Windows1292Decoder.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/musepack/sv7/MpcSv7Parser.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/musepack/sv8/MpcSv8Parser.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/OffsetUtils.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js ***!
  \**************************************************************************/

/*!**************************************************************************!*\
  !*** ./components/setPlayList/mainMusicList/playList/playListMusics.tsx ***!
  \**************************************************************************/

/*!***************************************************************************!*\
  !*** ../../node_modules/@emotion/is-prop-valid/dist/is-prop-valid.esm.js ***!
  \***************************************************************************/

/*!***************************************************************************!*\
  !*** ../../node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js ***!
  \***************************************************************************/

/*!***************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/matroska/MatroskaTagMapper.js ***!
  \***************************************************************************/

/*!***************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/ogg/vorbis/VorbisTagMapper.js ***!
  \***************************************************************************/

/*!***************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/decorateHandler.js ***!
  \***************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/musepack/sv7/StreamVersion7.js ***!
  \****************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/musepack/sv8/StreamVersion8.js ***!
  \****************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/OptionsReader.js ***!
  \****************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/getEmptyImage.js ***!
  \****************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/internal/useCollector.js ***!
  \****************************************************************************/

/*!****************************************************************************!*\
  !*** ../../node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js ***!
  \****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/music-metadata/lib/common/CaseInsensitiveTagMap.js ***!
  \*****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/music-metadata/node_modules/file-type/supported.js ***!
  \*****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/utils/js_utils.js ***!
  \*****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/DragSourceMonitorImpl.js ***!
  \*****************************************************************************/

/*!*****************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/common/DropTargetMonitorImpl.js ***!
  \*****************************************************************************/

/*!******************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \******************************************************************************/

/*!******************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \******************************************************************************/

/*!******************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/BrowserDetector.js ***!
  \******************************************************************************/

/*!*******************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \*******************************************************************************/

/*!*******************************************************************************!*\
  !*** ../../node_modules/@videojs/vhs-utils/dist/decode-b64-to-uint8-array.js ***!
  \*******************************************************************************/

/*!*******************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/HTML5BackendImpl.js ***!
  \*******************************************************************************/

/*!*******************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/createSourceFactory.js ***!
  \*******************************************************************************/

/*!*******************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/decorators/createTargetFactory.js ***!
  \*******************************************************************************/

/*!********************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/EnterLeaveCounter.js ***!
  \********************************************************************************/

/*!********************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js ***!
  \********************************************************************************/

/*!*********************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js ***!
  \*********************************************************************************/

/*!**********************************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js ***!
  \**********************************************************************************/

/*!**********************************************************************************!*\
  !*** ../../node_modules/styled-components/dist/styled-components.browser.esm.js ***!
  \**********************************************************************************/

/*!***********************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js ***!
  \***********************************************************************************/

/*!***********************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/MonotonicInterpolant.js ***!
  \***********************************************************************************/

/*!*************************************************************************************!*\
  !*** ../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*************************************************************************************/

/*!**************************************************************************************!*\
  !*** ../../node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js ***!
  \**************************************************************************************/

/*!**************************************************************************************!*\
  !*** ../../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**************************************************************************************/

/*!**************************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/index.js ***!
  \**************************************************************************************/

/*!*****************************************************************************************!*\
  !*** ../../node_modules/react-dnd/dist/esm/hooks/internal/useIsomorphicLayoutEffect.js ***!
  \*****************************************************************************************/

/*!*************************************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/NativeDragSource.js ***!
  \*************************************************************************************************/

/*!**************************************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/nativeTypesConfig.js ***!
  \**************************************************************************************************/

/*!********************************************************************************************************!*\
  !*** ../../node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/getDataFromDataTransfer.js ***!
  \********************************************************************************************************/

/*#__PURE__*/

/**
	 * @see org.xml.sax.ErrorHandler
	 * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
	 */

/**
	 * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.
	 * @standard level1
	 * @param index  unsigned long 
	 *   Index into the collection.
	 * @return Node
	 * 	The node at the indexth position in the NodeList, or null if that is not a valid index. 
	 */

/**
	 * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.
	 * @standard level1
	 */

/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/

/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/

/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/

/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/

/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/

/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/

/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/

/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/

/**
	* The currently active debug mode names, and names to skip.
	*/

/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/

/**
             * Parse chunk-offset atom ('stco')
             */

/**
             * Parse mdat atom.
             * Will scan for chapters
             */

/**
             * Parse media header (mdhd) atom
             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25615
             */

/**
             * Parse movie header (mvhd) atom
             * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-56313
             */

/**
             * Parse sample description atom
             */

/**
             * Parse sample-sizes atom ('stsz')
             */

/**
             * sample-to-Chunk Atoms
             */

/**
             * time to sample
             */

/**
           * @event Player#fullscreenchange
           * @type {EventTarget~Event}
           */

/**
           * An event that fires when mode changes on this track. This allows
           * the TextTrackList that holds this track to act accordingly.
           *
           * > Note: This is not part of the spec!
           *
           * @event TextTrack#modechange
           * @type {EventTarget~Event}
           */

/**
           * Triggered when a `Component` is tapped.
           *
           * @event Component#tap
           * @type {EventTarget~Event}
           */

/**
         * @event Player#durationchange
         * @type {EventTarget~Event}
         */

/**
         * Add a listener for a specified event type.
         * @param type {string} the event name
         * @param listener {function} the callback to be invoked when an event of
         * the specified type occurs
         */

/**
         * An event that fires when enabled changes on this track. This allows
         * the AudioTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event AudioTrack#enabledchange
         * @type {EventTarget~Event}
         */

/**
         * An event that fires when selected changes on this track. This allows
         * the VideoTrackList that holds this track to act accordingly.
         *
         * > Note: This is not part of the spec! Native tracks will do
         *         this internally without an event.
         *
         * @event VideoTrack#selectedchange
         * @type {EventTarget~Event}
         */

/**
         * Destroys the stream and cleans up.
         */

/**
         * Fired when vtt.js is loaded.
         *
         * @event Tech#vttjsloaded
         * @type {EventTarget~Event}
         */

/**
         * Fired when vtt.js was not loaded due to an error
         *
         * @event Tech#vttjsloaded
         * @type {EventTarget~Event}
         */

/**
         * Keeps track of origin priority for each mapped id
         */

/**
         * Maps a tag type to a priority
         */

/**
         * Remove a listener for a specified event type.
         * @param type {string} the event name
         * @param listener {function} a function previously registered for this
         * type of event through `on`
         */

/**
         * See {@link Player#progress}
         *
         * @event Tech#progress
         * @type {EventTarget~Event}
         */

/**
         * Store peeked data
         * @type {Array}
         */

/**
         * Tokenizer-stream position
         */

/**
         * Trigger an event of the specified type on this stream. Any additional
         * arguments to this function are passed as parameters to event listeners.
         * @param type {string} the event name
         */

/**
         * Triggered when a component is resized.
         *
         * @event Component#componentresize
         * @type {EventTarget~Event}
         */

/**
        * A method to indicate whether a CaptionParser has been initalized
        * @returns {Boolean}
       **/

/**
        * Constructs a ISO BMFF segment given H264 nalUnits
        * @param {Object} nalUnit A data event representing a nalUnit
        * @param {String} nalUnit.nalUnitType
        * @param {Object} nalUnit.config Properties for a mp4 track
        * @param {Uint8Array} nalUnit.data The nalUnit bytes
        * @see lib/codecs/h264.js
       **/

/**
        * Convenience method to clear all captions flushed from the
        * CaptionStream and still being parsed
        * @see m2ts/caption-stream.js
       **/

/**
        * Determines if a new video track will be selected
        * or if the timescale changed
        * @return {Boolean}
       **/

/**
        * Fired just after a `ModalDialog` is opened.
        *
        * @event ModalDialog#modalopen
        * @type {EventTarget~Event}
        */

/**
        * Fired just before a `ModalDialog` is opened.
        *
        * @event ModalDialog#beforemodalopen
        * @type {EventTarget~Event}
        */

/**
        * Flushes underlying CaptionStream to dispatch processed, displayable captions
        * @see m2ts/caption-stream.js
       **/

/**
        * Initializes the underlying CaptionStream, SEI NAL parsing
        * and management, and caption collection
       **/

/**
        * Parses out SEI captions and interacts with underlying
        * CaptionStream to return dispatched captions
        *
        * @param {Uint8Array} segment - The fmp4 segment containing embedded captions
        * @param {Number[]} videoTrackIds - A list of video tracks found in the init segment
        * @param {Object.<Number, Number>} timescales - The timescales found in the init segment
        * @see parseEmbeddedCaptions
        * @see m2ts/caption-stream.js
       **/

/**
        * Pass completely parsed PES packets to the next stream in the pipeline
       **/

/**
        * Pass constructed ISO BMFF track and boxes on to the
        * next stream in the pipeline
       **/

/**
        * Pushes SEI NALUs onto CaptionStream
        * @param {Object[]} nals - A list of SEI nals parsed using `parseCaptionNals`
        * Assumes that `parseCaptionNals` has been called first
        * @see m2ts/caption-stream.js
        **/

/**
        * Reset caption buckets for new data
       **/

/**
        * Reset caption parser
       **/

/**
        * Resets underlying CaptionStream
        * @see m2ts/caption-stream.js
       **/

/**
        * The expanded S-box and inverse S-box tables. These will be computed
        * on the client so that we don't have to send them down the wire.
        *
        * There are two tables, _tables[0] is for encryption and
        * _tables[1] is for decryption.
        *
        * The first 4 sub-tables are the expanded S-box with MixColumns. The
        * last (_tables[01][4]) is the S-box itself.
        *
        * @private
        */

/**
       * @event Player#controlsdisabled
       * @type {EventTarget~Event}
       */

/**
       * @event Player#controlsenabled
       * @type {EventTarget~Event}
       */

/**
       * @event Player#useractive
       * @type {EventTarget~Event}
       */

/**
       * @memberof HTMLTrackElement
       * @member {HTMLTrackElement~ReadyState} readyState
       *         The current ready state of the track element.
       * @instance
       */

/**
       * @memberof HTMLTrackElement
       * @member {TextTrack} track
       *         The underlying TextTrack object.
       * @instance
       *
       */

/**
       * @memberof TextTrack
       * @member {TextTrackCueList} activeCues
       *         The list text track cues that are currently active for this TextTrack.
       * @instance
       */

/**
       * @memberof TextTrack
       * @member {TextTrackCueList} cues
       *         The text track cue list for this TextTrack.
       * @instance
       */

/**
       * @memberof TextTrack
       * @member {boolean} default
       *         If this track was set to be on or off by default. Cannot be changed after
       *         creation.
       * @instance
       *
       * @readonly
       */

/**
       * @memberof TextTrack
       * @member {string} mode
       *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
       *         not be set if setting to an invalid mode.
       * @instance
       *
       * @fires TextTrack#modechange
       */

/**
       * @private
       */

/**
       * A manual `timeupdate` event.
       *
       * @event Tech#timeupdate
       * @type {EventTarget~Event}
       */

/**
       * Add a listener for a specified event type.
       *
       * @param {string} type the event name
       * @param {Function} listener the callback to be invoked when an event of
       * the specified type occurs
       */

/**
       * Adds data (a ts segment) to the start of the transmuxer pipeline for
       * processing.
       *
       * @param {ArrayBuffer} data data to push into the muxer
       */

/**
       * Advance the ExpGolomb decoder past a scaling list. The scaling
       * list is optionally transmitted as part of a sequence parameter
       * set and is not relevant to transmuxing.
       * @param count {number} the number of entries in this scaling list
       * @param expGolombDecoder {object} an ExpGolomb pointed to the
       * start of a scaling list
       * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1
       */

/**
       * An event triggered on an object that is both
       * {@link module:stateful|stateful} and {@link module:evented|evented}
       * indicating that its state has changed.
       *
       * @event    module:stateful~StatefulMixin#statechanged
       * @type     {Object}
       * @property {Object} changes
       *           A hash containing the properties that were changed and
       *           the values they were changed `from` and `to`.
       */

/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */

/**
       * Creates a disposable object that invokes the specified action when disposed.
       * @param {Function} dispose Action to run during the first call to dispose.
       * The action is guaranteed to be run at most once.
       * @return {Disposable} The disposable object that runs the given action upon disposal.
       */

/**
       * Decrypt 16 bytes, specified as four 32-bit words.
       *
       * @param {number} encrypted0 the first word to decrypt
       * @param {number} encrypted1 the second word to decrypt
       * @param {number} encrypted2 the third word to decrypt
       * @param {number} encrypted3 the fourth word to decrypt
       * @param {Int32Array} out the array to write the decrypted words
       * into
       * @param {number} offset the offset into the output array to start
       * writing results
       * @return {Array} The plaintext.
       */

/**
       * Deliver a new MP2T packet to the next stream in the pipeline.
       */

/**
       * Depending on the order "render" is called this can cause the styles to be lost
       * until the next render pass of the remaining instance, which may
       * not be immediate.
       */

/**
       * Destroys the stream and cleans up.
       */

/**
       * Expunge any "Emulation Prevention" bytes from a "Raw Byte
       * Sequence Payload"
       * @param data {Uint8Array} the bytes of a RBSP from a NAL
       * unit
       * @return {Uint8Array} the RBSP without any Emulation
       * Prevention Bytes
       */

/**
       * Fired when the user agent begins looking for media data
       *
       * @event Player#loadstart
       * @type {EventTarget~Event}
       */

/**
       * Flush any remaining input. Video PES packets may be of variable
       * length. Normally, the start of a new video packet can trigger the
       * finalization of the previous packet. That is not possible if no
       * more video is forthcoming, however. In that case, some other
       * mechanism (like the end of the file) has to be employed. When it is
       * clear that no additional data is forthcoming, calling this method
       * will flush the buffered packets.
       */

/**
       * Forces the pipeline to finish processing the last segment and emit it's
       * results.
       *
       * @param {Object} data event data, not really used
       */

/**
       * Forwards all `data` events on this stream to the destination stream. The
       * destination stream should provide a method `push` to receive the data
       * events as they arrive.
       *
       * @param {Stream} destination the stream that will receive all `data` events
       * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
       */

/**
       * Identifies M2TS packet types and parses PES packets using metadata
       * parsed from the PMT
       **/

/**
       * Parse out the relevant fields of a Program Map Table (PMT).
       * @param payload {Uint8Array} the PMT-specific portion of an MP2T
       * packet. The first byte in this array should be the table_id
       * field.
       * @param pmt {object} the object that should be decorated with
       * fields parsed from the PMT.
       */

/**
       * Passes identified M2TS packets to the TransportParseStream to be parsed
      **/

/**
       * Read a sequence parameter set and return some interesting video
       * properties. A sequence parameter set is the H264 metadata that
       * describes the properties of upcoming video frames.
       * @param data {Uint8Array} the bytes of a sequence parameter set
       * @return {object} an object with configuration parsed from the
       * sequence parameter set, including the dimensions of the
       * associated video frames.
       */

/**
       * Recreate the transmuxer so that the next segment added via `push`
       * start with a fresh transmuxer.
       */

/**
       * Remove a listener for a specified event type.
       *
       * @param {string} type the event name
       * @param {Function} listener  a function previously registered for this
       * type of event through `on`
       * @return {boolean} if we could turn it off or not
       */

/**
       * Set the value that will be used as the `baseMediaDecodeTime` time for the
       * next segment pushed in. Subsequent segments will have their `baseMediaDecodeTime`
       * set relative to the first based on the PTS values.
       *
       * @param {Object} data used to set the timestamp offset in the muxer
       */

/**
       * Split a stream of data into M2TS packets
      **/

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
       * This event fires when the player enters picture in picture mode
       *
       * @event Player#enterpictureinpicture
       * @type {EventTarget~Event}
       */

/**
       * This event fires when the player leaves picture in picture mode
       *
       * @event Player#leavepictureinpicture
       * @type {EventTarget~Event}
       */

/**
       * This fixes HMR compatiblility. Don't ask me why, but this combination of
       * caching the closure variables via statics and then persisting the statics in
       * state works across HMR where no other combination did. ¯\_(ツ)_/¯
       */

/**
       * Trigger an event of the specified type on this stream. Any additional
       * arguments to this function are passed as parameters to event listeners.
       *
       * @param {string} type the event name
       */

/**
       * Triggered at an interval of 250ms to indicated that time is passing in the video.
       *
       * @event Tech#timeupdate
       * @type {EventTarget~Event}
       */

/**
       * Triggered when a `Component` is ready.
       *
       * @event Component#ready
       * @type {EventTarget~Event}
       */

/**
       * Triggered when a track is added to a track list.
       *
       * @event TrackList#addtrack
       * @type {EventTarget~Event}
       * @property {Track} track
       *           A reference to track that was added.
       */

/**
       * `systemBandwidth` is a combination of two serial processes bit-rates. The first
       * is the network bitrate provided by `bandwidth` and the second is the bitrate of
       * the entire process after that - decryption, transmuxing, and appending - provided
       * by `throughput`.
       *
       * Since the two process are serial, the overall system bandwidth is given by:
       *   sysBandwidth = 1 / (1 / bandwidth + 1 / throughput)
       */

/**
       * a getter for step the maximum number of bytes to process at one time
       *
       * @return {number} the value of step 32000
       */

/**
       * initialize our web worker and wire all the events.
       */

/**
       * player is using the custom HTML controls
       *
       * @event Player#usingcustomcontrols
       * @type {EventTarget~Event}
       */

/**
       * player is using the native device controls
       *
       * @event Player#usingnativecontrols
       * @type {EventTarget~Event}
       */

/**
       * process an async job
       *
       * @private
       */

/**
       * push a job into the stream
       *
       * @param {Function} job the job to push into the stream
       */

/**
      * Fired just after a `ModalDialog` is closed.
      *
      * @event ModalDialog#modalclose
      * @type {EventTarget~Event}
      */

/**
      * Fired just before a `ModalDialog` is closed.
      *
      * @event ModalDialog#beforemodalclose
      * @type {EventTarget~Event}
      */

/**
      * Fired just before a `ModalDialog` is filled with content.
      *
      * @event ModalDialog#beforemodalfill
      * @type {EventTarget~Event}
      */

/**
      * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
      *
      * @event Tech#audiotrackchange
      * @type {EventTarget~Event}
      */

/**
      * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
      *
      * @event Tech#texttrackchange
      * @type {EventTarget~Event}
      */

/**
      * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
      *
      * @event Tech#videotrackchange
      * @type {EventTarget~Event}
      */

/**
     *
     * @param bits 1..30 bits
     */

/**
     *
     * @param buffer
     * @param start
     * @param end
     * @param encoding // ToDo: ts.enum
     * @return {number}
     */

/**
     *
     * @param buffer Decoder input data
     * @param encoding 'utf16le' | 'utf16' | 'utf8' | 'iso-8859-1'
     * @return {string}
     */

/**
     *
     * @param {number} len Length as specified in the size field
     * @param {number} expLen Total length of sum of specified fields in the standard
     */

/**
     *  Disposes all disposables in the group and removes them from the group but
     *  does not dispose the CompositeDisposable.
     */

/**
     *  Disposes all disposables in the group and removes them from the group.
     */

/**
     * @event Player#enterFullWindow
     * @type {EventTarget~Event}
     */

/**
     * @event Player#error
     * @type {EventTarget~Event}
     */

/**
     * @event Player#exitFullWindow
     * @type {EventTarget~Event}
     */

/**
     * @event Player#userinactive
     * @type {EventTarget~Event}
     */

/**
     * @file aes.js
     *
     * This file contains an adaptation of the AES decryption algorithm
     * from the Standford Javascript Cryptography Library. That work is
     * covered by the following copyright and permissions notice:
     *
     * Copyright 2009-2010 Emily Stark, Mike Hamburg, Dan Boneh.
     * All rights reserved.
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * 1. Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *
     * 2. Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *
     * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
     * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
     * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
     * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE
     * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
     * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
     * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
     * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
     * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     *
     * The views and conclusions contained in the software and documentation
     * are those of the authors and should not be interpreted as representing
     * official policies, either expressed or implied, of the authors.
     */

/**
     * @file stream.js
     */

/**
     * @listens AudioTrack#enabledchange
     * @fires TrackList#change
     */

/**
     * @listens TextTrack#loadeddata
     * @fires HTMLTrackElement#load
     */

/**
     * @listens TextTrack#modechange
     * @fires TrackList#change
     */

/**
     * @listens VideoTrack#selectedchange
     * @fires TrackList#change
     */

/**
     * @member {number} VideoTrackList#selectedIndex
     *         The current index of the selected {@link VideoTrack`}.
     */

/**
     * @memberof AudioTrack
     * @member {boolean} enabled
     *         If this `AudioTrack` is enabled or not. When setting this will
     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */

/**
     * @memberof HtmlTrackElementList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */

/**
     * @memberof TextTrackCueList
     * @member {number} length
     *         The current number of `TextTrackCue`s in the TextTrackCueList.
     * @instance
     */

/**
     * @memberof Track
     * @member {string} id
     *         The id of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

/**
     * @memberof Track
     * @member {string} kind
     *         The kind of track that this is. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

/**
     * @memberof Track
     * @member {string} label
     *         The label of this track. Cannot be changed after creation.
     * @instance
     *
     * @readonly
     */

/**
     * @memberof Track
     * @member {string} language
     *         The two letter language code for this track. Cannot be changed after
     *         creation.
     * @instance
     *
     * @readonly
     */

/**
     * @memberof TrackList
     * @member {number} length
     *         The current number of `Track`s in the this Trackist.
     * @instance
     */

/**
     * @memberof VideoTrack
     * @member {boolean} selected
     *         If this `VideoTrack` is selected or not. When setting this will
     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
     * @instance
     *
     * @fires VideoTrack#selectedchange
     */

/**
     * @param buf Buffer possibly holding the 128 bytes ID3v1.1 metadata header
     * @param off Offset in buffer in bytes
     * @returns ID3v1.1 header if first 3 bytes equals 'TAG', otherwise null is returned
     */

/**
     * @param filePath - Path, filename or extension to audio file
     * @return Parser sub-module name
     */

/**
     * @param httpContentType - HTTP Content-Type, extension, path or filename
     * @returns Parser sub-module name
     */

/**
     * @param len number of bytes to ignore
     */

/**
     * @param length - Number of bytes to ignore
     * @return resolves the number of bytes ignored, equals length if this available, otherwise the number of bytes available
     */

/**
     * @param sampleDescription
     * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-128916
     */

/**
     * @return actual number of bytes ignored
     */

/**
     * @return {Promise<boolean>} true if parser should quit
     */

/**
     * @returns {boolean} true if one or more tags have been found
     */

/**
     * @tag  Native header tag
     * @return common tag name (alias)
     */

/**
     * A Stream that can combine multiple streams (ie. audio & video)
     * into a single output segment for MSE. Also supports audio-only
     * and video-only streams.
     * @param options {object} transmuxer options object
     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
     *        in the source; false to adjust the first segment to start at media timeline start.
     */

/**
     * A Stream that expects MP2T binary data as input and produces
     * corresponding media segments, suitable for use with Media Source
     * Extension (MSE) implementations that support the ISO BMFF byte
     * stream format, like Chrome.
     */

/**
     * A lightweight readable stream implemention that handles event dispatching.
     *
     * @class Stream
     */

/**
     * A readyState change on the DOM element has caused playback to stop.
     *
     * @event Player#waiting
     * @type {EventTarget~Event}
     */

/**
     * Accepts a NAL unit byte stream and unpacks the embedded NAL units.
     */

/**
     * Accepts an MP2T TransportPacketStream and emits data events with parsed
     * forms of the individual transport stream packets.
     */

/**
     * Accepts input from a ElementaryStream and produces H.264 NAL unit data
     * events.
     */

/**
     * Add a listener for a specified event type.
     * @param type {string} the event name
     * @param listener {function} the callback to be invoked when an event of
     * the specified type occurs
     */

/**
     * Adjust ID3 tag or caption timing information by the timeline pts values
     * (if keepOriginalTimestamps is false) and convert to seconds
     */

/**
     * Audio Object Types
     */

/**
     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.
     */

/**
     * BYTE array. The type of data is implementation-specific.
     */

/**
     * Calculate the media file duration
     * @param ah ApeHeader
     * @return {number} duration in seconds
     */

/**
     * Calculates the APEv1 / APEv2 first field offset
     * @param reader
     * @param offset
     */

/**
     * Called after ID3 headers have been parsed
     */

/**
     * Called after file has been fully parsed, this allows, if present, to exclude the ID3v1.1 header length
     */

/**
     * Called when the player is being disposed of.
     *
     * @event Player#dispose
     * @type {EventTarget~Event}
     */

/**
     * Called when the player size has changed
     *
     * @event Player#playerresize
     * @type {EventTarget~Event}
     */

/**
     * Channel Configurations
     */

/**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */

/**
     * Combined ADTS & MPEG (MP2 & MP3) header handling
     * @return {Promise<boolean>} true if parser should quit
     */

/**
     * Configures roll-up
     *
     * @param  {Integer} pts         Current PTS
     * @param  {Integer} newBaseRow  Used by PACs to slide the current window to
     *                               a new position
     */

/**
     * Construct BufferTokenizer
     * @param buffer - Buffer to tokenize
     * @param fileInfo - Pass additional file information to the tokenizer
     */

/**
     * Constructs a single-track, ISO BMFF media segment from AAC data
     * events. The output of this stream can be fed to a SourceBuffer
     * configured with a suitable initialization segment.
     * @param track {object} track metadata configuration
     * @param options {object} transmuxer options object
     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
     *        in the source; false to adjust the first segment to start at 0.
     */

/**
     * Constructs a single-track, ISO BMFF media segment from H264 data
     * events. The output of this stream can be fed to a SourceBuffer
     * configured with a suitable initialization segment.
     * @param track {object} track metadata configuration
     * @param options {object} transmuxer options object
     * @param options.alignGopsAtEnd {boolean} If true, start from the end of the
     *        gopsToAlignWith list when attempting to align gop pts
     * @param options.keepOriginalTimestamps {boolean} If true, keep the timestamps
     *        in the source; false to adjust the first segment to start at 0.
     */

/**
     * Convert native tag key to common tag key
     * @tag  Native header tag
     * @return common tag name (alias)
     */

/**
     * Convert native tag to common tags
     */

/**
     * Convert native tags to common tags
     * @returns {IAudioMetadata} Native + common tags
     */

/**
     * Convert native to generic (common) tags
     * @param tagType Originating tag format
     * @param tag     Native tag to map to a generic tag id
     * @param warnings
     * @return Generic tag result (output of this function)
     */

/**
     * Converts TMCL (Musician credits list) or TIPL (Involved people list)
     * @param entries
     */

/**
     * Create a combined tag key, of tag & description
     * @param {string} tag e.g.: COM
     * @param {string} description e.g. iTunPGAP
     * @returns {string} e.g. COM:iTunPGAP
     */

/**
     * Create id3v2 frame parser
     * @param major - Major version, e.g. (4) for  id3v2.4
     * @param warningCollector - Used to collect decode issue
     */

/**
     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.
     */

/**
     * Decode GUID in format like "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
     * @param objectId Binary GUID
     * @param offset Read offset in bytes, default 0
     * @returns {string} GUID as dashed hexadecimal representation
     */

/**
     * Decode stream type
     * @param {string} mediaType
     * @returns {string}
     */

/**
     * Destroys the stream and cleans up.
     */

/**
     * Detects if a packet's second byte is in the range of a PAC color code
     *
     * PAC color codes have the second byte be in the range 0x40 to 0x4f, or
     * 0x60 to 0x6f.
     *
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the byte is a color PAC
     */

/**
     * Detects if a single byte is in the range of a normal character
     *
     * Normal text bytes are in the range 0x20 to 0x7f.
     *
     * @param  {Integer} char  The byte
     * @return {Boolean}       Whether the byte is a normal character
     */

/**
     * Detects if the 2-byte packet data is a special character
     *
     * Special characters have a second byte in the range 0x30 to 0x3f,
     * with the first byte being 0x11 (for data channel 1) or 0x19 (for
     * data channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are an special character
     */

/**
     * Detects if the 2-byte packet data is an extended character
     *
     * Extended characters have a second byte in the range 0x20 to 0x3f,
     * with the first byte being 0x12 or 0x13 (for data channel 1) or
     * 0x1a or 0x1b (for data channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are an extended character
     */

/**
     * Detects if the 2-byte packet is a Preamble Address Code
     *
     * PACs have a first byte in the range 0x10 to 0x17 (for data channel 1)
     * or 0x18 to 0x1f (for data channel 2), with the second byte in the
     * range 0x40 to 0x7f.
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are a PAC
     */

/**
     * Detects if the 2-byte packet is a mid-row code
     *
     * Mid-row codes have a second byte in the range 0x20 to 0x2f, with
     * the first byte being 0x11 (for data channel 1) or 0x19 (for data
     * channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are a mid-row code
     */

/**
     * Detects if the 2-byte packet is an offset control code
     *
     * Offset control codes have a second byte in the range 0x21 to 0x23,
     * with the first byte being 0x17 (for data channel 1) or 0x1f (for
     * data channel 2).
     *
     * @param  {Integer} char0 The first byte
     * @param  {Integer} char1 The second byte
     * @return {Boolean}       Whether the 2 bytes are an offset control code
     */

/**
     * Encode GUID
     * @param guid GUID like: "B503BF5F-2EA9-CF11-8EE3-00C00C205365"
     * @returns {Buffer} Encoded Bnary GUID
     */

/**
     * Expand the S-box tables.
     *
     * @private
     */

/**
     * Fired just after a `ModalDialog` is filled with content.
     *
     * @event ModalDialog#modalfill
     * @type {EventTarget~Event}
     */

/**
     * Fired the first time a video is played. Not part of the HLS spec, and this is
     * probably not the best implementation yet, so use sparingly. If you don't have a
     * reason to prevent playback, use `myPlayer.one('play');` instead.
     *
     * @event Player#firstplay
     * @deprecated As of 6.0 firstplay event is deprecated.
     * @type {EventTarget~Event}
     */

/**
     * Fired when the end of the media resource is reached (currentTime == duration)
     *
     * @event Player#ended
     * @type {EventTarget~Event}
     */

/**
     * Fired when the player has finished jumping to a new time
     *
     * @event Player#seeked
     * @type {EventTarget~Event}
     */

/**
     * Fired when the source is set on the tech causing the media element
     * to reload.
     *
     * @see {@link Player#event:sourceset}
     * @event Tech#sourceset
     * @type {EventTarget~Event}
     */

/**
     * Fired whenever the media has been paused
     *
     * @event Player#pause
     * @type {EventTarget~Event}
     */

/**
     * Fired whenever the player is jumping to a new time
     *
     * @event Player#seeking
     * @type {EventTarget~Event}
     */

/**
     * Fires when the playing speed of the audio/video is changed
     *
     * @event Player#ratechange
     * @type {event}
     */

/**
     * Fires when we get a textdata event from tech
     *
     * @event Player#textdata
     * @type {EventTarget~Event}
     */

/**
     * Fix some common issues with picture object
     * @param pictureType
     */

/**
     * Forwards all `data` events on this stream to the destination stream. The
     * destination stream should provide a method `push` to receive the data
     * events as they arrive.
     * @param destination {stream} the stream that will receive all `data` events
     * @param autoFlush {boolean} if false, we will not call `flush` on the destination
     *                            when the current stream emits a 'done' event
     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
     */

/**
     * Generate a track box.
     * @param track {object} a track definition
     * @return {Uint8Array} the track box
     */

/**
     * Generate a track fragment (traf) box. A traf box collects metadata
     * about tracks in a movie fragment (moof) box.
     */

/**
     * Get file information, an HTTP-client may implement this doing a HEAD request
     * @return Promise with file information
     */

/**
     * Handle post mapping exceptions / correction
     * @param {string} tag Tag e.g. {"©alb", "Buena Vista Social Club")
     * @param {warnings} Used to register warnings
     */

/**
     * Handle post mapping exceptions / correction
     * @param {string} tag to post map
     * @param warnings USed to register warnings
     * @return Common value e.g. "Buena Vista Social Club"
     */

/**
     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
     * it here because every time we run `createMenu` we need to reset the value.
     *
     * @protected
     * @type {Number}
     */

/**
     * Initialize parser with output (metadata), input (tokenizer) & parsing options (options).
     * @param {INativeMetadataCollector} metadata Output
     * @param {ITokenizer} tokenizer Input
     * @param {IOptions} options Parsing options
     */

/**
     * Listen for the load event on window, and set _windowLoaded to true.
     *
     * We use a standard event listener here to avoid incrementing the GUID
     * before any players are created.
     *
     * @listens load
     */

/**
     * Original release year
     */

/**
     * Parse APEv1 / APEv2 header if header signature found
     */

/**
     * Parse STREAMINFO
     */

/**
     * Parse VORBIS_COMMENT
     * Ref: https://www.xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-640004.2.3
     */

/**
     * Parse data of Meta-item-list-atom (item of 'ilst' atom)
     * @param metaAtom
     * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8
     */

/**
     * Parse first Ogg/Vorbis page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */

/**
     * Parse first Opus Ogg page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */

/**
     * Parse first Speex Ogg page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */

/**
     * Parse first Theora Ogg page. the initial identification header packet
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */

/**
     * Parse metadata from tokenizer
     * @param tokenizer - Tokenizer
     * @param contentType - MIME-type
     * @param opts - Options
     * @returns Native metadata
     */

/**
     * Parse page
     * @returns {Promise<void>}
     */

/**
     * Peek (read ahead) buffer from tokenizer
     * @param buffer
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */

/**
     * Peek (read ahead) buffer from tokenizer
     * @param buffer - Target buffer to write the data read to
     * @param options - Read behaviour options
     * @returns Promise with number of bytes peeked
     */

/**
     * Peek a token from the tokenizer-stream.
     * @param token - Token to peek from the tokenizer-stream.
     * @param position - Offset where to begin reading within the file. If position is null, data will be read from the current file position.
     * @returns Promise with token data
     */

/**
     * Peek buffer from file
     * @param buffer
     * @param options - Read behaviour options
     * @returns Promise number of bytes read
     */

/**
     * Process and set common tags
     * write common tags to
     * @param tag Native tag
     * @param warnings Register warnings
     * @return common name
     */

/**
     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.
     */

/**
     * Read a numeric token from the stream
     * @param token - Numeric token
     * @returns Promise with number
     */

/**
     * Read a token from the tokenizer-stream
     * @param token - The token to read
     * @param position - If provided, the desired position in the tokenizer-stream
     * @returns Promise with token data
     */

/**
     * Read ahead (peek) from stream. Subsequent read or peeks will return the same data
     * @param buffer - Buffer to store data read from stream in
     * @param offset - Offset buffer
     * @param length - Number of bytes to read
     * @returns Number of bytes peeked
     */

/**
     * Read bit-aligned number start from buffer
     * Total offset in bits = byteOffset * 8 + bitOffset
     * @param buf Byte buffer
     * @param byteOffset Starting offset in bytes
     * @param bitOffset Starting offset in bits: 0 = lsb
     * @param len Length of number in bits
     * @return {number} decoded bit aligned number
     */

/**
     * Read bit-aligned number start from buffer
     * Total offset in bits = byteOffset * 8 + bitOffset
     * @param buf Byte buffer
     * @param byteOffset Starting offset in bytes
     * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is least significant bit
     * @return {number} decoded bit aligned number
     */

/**
     * Read buffer from file
     * @param buffer
     * @param options - Read behaviour options
     * @returns Promise number of bytes read
     */

/**
     * Read buffer from tokenizer
     * @param buffer
     * @param options - Read behaviour options
     * @returns {Promise<number>}
     */

/**
     * Read buffer from tokenizer
     * @param buffer - Target buffer to fill with data read from the tokenizer-stream
     * @param options - Read behaviour options
     * @returns Promise with number of bytes read
     */

/**
     * Read chunk from stream
     * @param buffer - Target buffer to store data read from stream in
     * @param offset - Offset of target buffer
     * @param length - Number of bytes to read
     * @returns Number of bytes read
     */

/**
     * Read chunk from stream
     * @param buffer Buffer to store data read from stream in
     * @param offset Offset buffer
     * @param length Number of bytes to read
     * @returns Number of bytes read
     */

/**
     * Read from a given position of an abstracted file or buffer.
     * @param buffer {Buffer} is the buffer that the data will be written to.
     * @param offset {number} is the offset in the buffer to start writing at.
     * @param length {number}is an integer specifying the number of bytes to read.
     * @param position {number} is an argument specifying where to begin reading from in the file.
     * @return {Promise<number>} bytes read
     */

/**
     * Reconsistutes program elementary stream (PES) packets from parsed
     * transport stream packets. That is, if you pipe an
     * mp2t.TransportParseStream into a mp2t.ElementaryStream, the output
     * events will be events which capture the bytes for individual PES
     * packets plus relevant metadata that has been extracted from the
     * container.
     */

/**
     * Ref: http://gabriel.mp3-tech.org/mp3infotag.html
     * @returns {Promise<string>}
     */

/**
     * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf, 3.0 Metadata Sub-blocks
     * @param remainingLength
     */

/**
     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2
     */

/**
     * Release country as documented: https://picard.musicbrainz.org/docs/mappings/#cite_note-0
     */

/**
     * Release country as implemented // ToDo: report
     */

/**
     * Remove a listener for a specified event type.
     * @param type {string} the event name
     * @param listener {function} a function previously registered for this
     * type of event through `on`
     */

/**
     * Removes and disposes the first occurrence of a disposable from the CompositeDisposable.
     * @param {Any} item Disposable to remove.
     * @returns {Boolean} true if found; false otherwise.
     */

/**
     * Returns a movie box.
     * @param tracks {array} the tracks associated with this movie
     * @see ISO/IEC 14496-12:2012(E), section 8.2.1
     */

/**
     * Returns the subarray of a Uint8Array without PKCS#7 padding.
     *
     * @param padded {Uint8Array} unencrypted bytes that have been padded
     * @return {Uint8Array} the unpadded bytes
     * @see http://tools.ietf.org/html/rfc5652
     */

/**
     * Sampling Frequencies
     * https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Sampling_Frequencies
     */

/**
     * Set generic tag
     */

/**
     * Sets up control code and related constants for this instance
     */

/**
     * Signals that a advanced plugin is about to be disposed.
     *
     * @event Plugin#dispose
     * @type  {EventTarget~Event}
     */

/**
     * Splits an incoming stream of binary data into ADTS and ID3 Frames.
     */

/**
     * Splits an incoming stream of binary data into MPEG-2 Transport
     * Stream packets.
     */

/**
     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
     * entire media file can be played without buffering.
     *
     * @event Player#canplaythrough
     * @type {EventTarget~Event}
     */

/**
     * The media has a readyState of HAVE_FUTURE_DATA or greater.
     *
     * @event Player#canplay
     * @type {EventTarget~Event}
     */

/**
     * The media is no longer blocked from playback, and has started playing.
     *
     * @event Player#playing
     * @type {EventTarget~Event}
     */

/**
     * This event fires when the poster image is changed on the player.
     *
     * @event Player#posterchange
     * @type {EventTarget~Event}
     */

/**
     * ToDo: Album artist seems to be stored here while Picard documentation says: aART
     */

/**
     * Track the state of the menu button
     *
     * @type {Boolean}
     * @private
     */

/**
     * Trigger an event of the specified type on this stream. Any additional
     * arguments to this function are passed as parameters to event listeners.
     * @param type {string} the event name
     */

/**
     * Trigger timeupdate because we're done seeking and the time has changed.
     * This is particularly useful for if the player is paused to time the time displays.
     *
     * @event Tech#timeupdate
     * @type {EventTarget~Event}
     */

/**
     * Triggered when a `Component` is disposed.
     *
     * @event Component#dispose
     * @type {EventTarget~Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the dispose event does not
     *           bubble up
     */

/**
     * Triggered when a track is removed from track list.
     *
     * @event TrackList#removetrack
     * @type {EventTarget~Event}
     * @property {Track} track
     *           A reference to track that was removed.
     */

/**
     * Triggered when the a `CloseButton` is clicked.
     *
     * @event CloseButton#close
     * @type {EventTarget~Event}
     *
     * @property {boolean} [bubbles=false]
     *           set to false so that the close event does not
     *           bubble up to parents if there is no listener
     */

/**
     * Triggered when the slider is in an active state
     *
     * @event Slider#slideractive
     * @type {EventTarget~Event}
     */

/**
     * Triggered when the slider is no longer in an active state.
     *
     * @event Slider#sliderinactive
     * @type {EventTarget~Event}
     */

/**
     * Triggered whenever an {@link Tech#play} event happens. Indicates that
     * playback has started or resumed.
     *
     * @event Player#play
     * @type {EventTarget~Event}
     */

/**
     * Unicode string. The data consists of a sequence of Unicode characters.
     */

/**
     * Validates whether the given object is a disposable
     * @param {Object} Object to test whether it has a dispose method
     * @returns {Boolean} true if a disposable object, else false.
     */

/**
     * Vorbis 1 parser
     * @param header Ogg Page Header
     * @param pageData Page data
     */

/**
     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.
     */

/**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */

/**
     * Zero out the data, used for startup and on seek
     */

/**
     * id3v2.4 defines that multiple T* values are separated by 0x00
     * id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /
     * @param tag - Tag name
     * @param text - Concatenated tag value
     * @returns Split tag value
     */

/**
     * mux.js
     *
     * Copyright (c) Brightcove
     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
     *
     * A lightweight readable stream implemention that handles event dispatching.
     * Objects that inherit from streams should call init in their constructors.
     */

/**
     * mux.js
     *
     * Copyright (c) Brightcove
     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
     *
     * Functions that generate fragmented MP4s suitable for use with Media
     * Source Extensions.
     */

/**
     * mux.js
     *
     * Copyright (c) Brightcove
     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
     *
     * Utilities to detect basic properties and metadata about Aac data.
     */

/**
     * mux.js
     *
     * Copyright (c) Brightcove
     * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
     */

/**
    * Abort any outstanding work and clean up.
    */

/**
    * Fired just after a `ModalDialog` is emptied.
    *
    * @event ModalDialog#modalempty
    * @type {EventTarget~Event}
    */

/**
    * Fired just before a `ModalDialog` is emptied.
    *
    * @event ModalDialog#beforemodalempty
    * @type {EventTarget~Event}
    */

/**
    * When called without any arguments, returns the currently
    * active media playlist. When called with a single argument,
    * triggers the playlist loader to asynchronously switch to the
    * specified media playlist. Calling this method while the
    * loader is in the HAVE_NOTHING causes an error to be emitted
    * but otherwise has no effect.
    *
    * @param {Object=} playlist the parsed media playlist
    * object to switch to
    * @param {boolean=} is this the last available playlist
    *
    * @return {Playlist} the current loaded media
    */

/**
   * (re-)schedule monitorBufferTick_ to run as soon as possible
   *
   * @private
   */

/**
   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
   * causing the media element to reload.
   *
   * It will fire for the initial source and each subsequent source.
   * This event is a custom event from Video.js and is triggered by the {@link Tech}.
   *
   * The event object for this event contains a `src` property that will contain the source
   * that was available when the event was triggered. This is generally only necessary if Video.js
   * is switching techs while the source was being changed.
   *
   * It is also fired when `load` is called on the player (or media element)
   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
   * says that the resource selection algorithm needs to be aborted and restarted.
   * In this case, it is very likely that the `src` property will be set to the
   * empty string `""` to indicate we do not know what the source will be but
   * that it is changing.
   *
   * *This event is currently still experimental and may change in minor releases.*
   * __To use this, pass `enableSourceset` option to the player.__
   *
   * @event Player#sourceset
   * @type {EventTarget~Event}
   * @prop {string} src
   *                The source url available when the `sourceset` was triggered.
   *                It will be an empty string if we cannot know what the source is
   *                but know that the source will change.
   */

/**
   * @internal
   * @type {ReactComponent}
   */

/**
   * @private
   */

/**
   * A callback that has no parameters and is bound into `Component`s context.
   *
   * @callback Component~GenericCallback
   * @this Component
   */

/**
   * A callback that is called when a component is ready. Does not have any
   * paramters and any callback value will be ignored.
   *
   * @callback Component~ReadyCallback
   * @this Component
   */

/**
   * A function to setup `requestAnimationFrame`, `setTimeout`,
   * and `setInterval`, clearing on dispose.
   *
   * > Previously each timer added and removed dispose listeners on it's own.
   * For better performance it was decided to batch them all, and use `Set`s
   * to track outstanding timer ids.
   *
   * @private
   */

/**
   * A getter/setter for the `Html5` Tech's source object.
   * > Note: Please use {@link Html5#setSource}
   *
   * @param {Tech~SourceObject} [src]
   *        The source object you want to set on the `HTML5` techs element.
   *
   * @return {Tech~SourceObject|undefined}
   *         - The current source object when a source is not passed in.
   *         - undefined when setting
   *
   * @deprecated Since version 5.
   */

/**
   * A getter/setter for the `Player`'s aspect ratio.
   *
   * @param {string} [ratio]
   *        The value to set the `Player`'s aspect ratio to.
   *
   * @return {string|undefined}
   *         - The current aspect ratio of the `Player` when getting.
   *         - undefined when setting
   */

/**
   * A getter/setter for the `Player`'s height. Returns the player's configured value.
   * To get the current height use `currentheight()`.
   *
   * @param {number} [value]
   *        The value to set the `Player`'s heigth to.
   *
   * @return {number}
   *         The current height of the `Player` when getting.
   */

/**
   * A getter/setter for the `Player`'s width & height.
   *
   * @param {string} dimension
   *        This string can be:
   *        - 'width'
   *        - 'height'
   *
   * @param {number} [value]
   *        Value for dimension specified in the first argument.
   *
   * @return {number}
   *         The dimension arguments value when getting (width/height).
   */

/**
   * A getter/setter for the `Player`'s width. Returns the player's configured value.
   * To get the current width use `currentWidth()`.
   *
   * @param {number} [value]
   *        The value to set the `Player`'s width to.
   *
   * @return {number}
   *         The current width of the `Player` when getting.
   */

/**
   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
   *
   * Turning this on will turn off fluid mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */

/**
   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
   *
   * Turning this on will turn off fill mode.
   *
   * @param {boolean} [bool]
   *        - A value of true adds the class.
   *        - A value of false removes the class.
   *        - No value will be a getter.
   *
   * @return {boolean|undefined}
   *         - The value of fluid when getting.
   *         - `undefined` when setting.
   */

/**
   * A hash containing arbitrary keys and values representing the state of
   * the object.
   *
   * @type {Object}
   */

/**
   * A helper function for triggerring presence usage events once per source
   *
   * @private
   */

/**
   * A helper method for adding a {@link TextTrack} to our
   * {@link TextTrackList}.
   *
   * In addition to the W3C settings we allow adding additional info through options.
   *
   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
   *
   * @param {string} [kind]
   *        the kind of TextTrack you are adding
   *
   * @param {string} [label]
   *        the label to give the TextTrack label
   *
   * @param {string} [language]
   *        the language to set on the TextTrack
   *
   * @return {TextTrack|undefined}
   *         the TextTrack that was added or undefined
   *         if there is no tech
   */

/**
   * A helper to get the player seekable end
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The furthest seekable end or Infinity.
   */

/**
   * A helper to get the player seekable start
   * so that we don't have to null check everywhere
   *
   * @return {number}
   *         The earliest seekable start or 0.
   */

/**
   * A method to check for the presence of the 'playsinline' <video> attribute.
   *
   * @abstract
   */

/**
   * A method to check for the value of the 'disablePictureInPicture' <video> property.
   * Defaults to true, as it should be considered disabled if the tech does not support pip
   *
   * @abstract
   */

/**
   * A method to set a poster from a `Tech`.
   *
   * @abstract
   */

/**
   * A method to set or unset the 'disablePictureInPicture' <video> property.
   *
   * @abstract
   */

/**
   * A method to set or unset the 'playsinline' <video> attribute.
   *
   * @abstract
   */

/**
   * A remaining time function that is intented to be used when
   * the time is to be displayed directly to the user.
   *
   * @return {number}
   *         The rounded time remaining in seconds
   */

/**
   * A setter for cues in this list. Creates getters
   * an an index for the cues.
   *
   * @param {Array} cues
   *        An array of cues to set
   *
   * @private
   */

/**
   * A special function to trigger source set in a way that will allow player
   * to re-trigger if the player or tech are not ready yet.
   *
   * @fires Tech#sourceset
   * @param {string} src The source string at the time of the source changing.
   */

/**
   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
   *
   * @method ProgressControl#throttledHandleMouseSeek
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   * @listen touchmove
   */

/**
   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
   * function if it exists, otherwise it will fallback to the techs duration function.
   *
   * @method _Tech.duration
   */

/**
   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
   * function if it exists, with a fallback to the Techs seekable function.
   *
   * @method _Tech.seekable
   */

/**
   * Abort all outstanding work and cleanup.
   */

/**
   * Add a CSS class name to the `Component`s element.
   *
   * @param {string} classToAdd
   *        CSS class name to add
   */

/**
   * Add a callback to the queue that will set duration on the mediaSource.
   *
   * @param {number} duration
   *        The duration to set
   *
   * @param {Function} [doneFn]
   *        function to run after duration has been set.
   */

/**
   * Add a child `Component` inside of this `Button`.
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   *
   * @deprecated since version 5
   */

/**
   * Add a child `Component` inside the current `Component`.
   *
   *
   * @param {string|Component} child
   *        The name or instance of a child to add.
   *
   * @param {Object} [options={}]
   *        The key/value store of options that will get passed to children of
   *        the child.
   *
   * @param {number} [index=this.children_.length]
   *        The index to attempt to add a child into.
   *
   * @return {Component}
   *         The `Component` that gets added as a child. When using a string the
   *         `Component` will get created by this process.
   */

/**
   * Add a cue to the internal list of cues.
   *
   * @param {TextTrack~Cue} cue
   *        The cue to add to our internal list
   */

/**
   * Add a custom header mapper
   *
   * @param {Object}   options
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {Function} options.map          function to translate tag into a different tag
   */

/**
   * Add a function to the queue that will be called
   * when it is its turn to run in the audio queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */

/**
   * Add a function to the queue that will be called
   * when it is its turn to run in the video queue.
   *
   * @param {Function} callback
   *        The callback to queue.
   */

/**
   * Add a listener for a specified event type.
   *
   * @param {string} type the event name
   * @param {Function} listener the callback to be invoked when an event of
   * the specified type occurs
   */

/**
   * Add a listener to an event (or events) on this object or another evented
   * object.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */

/**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will be called once per event and then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */

/**
   * Add a listener to an event (or events) on this object or another evented
   * object. The listener will only be called once for the first event that is triggered
   * then removed.
   *
   * @param  {string|Array|Element|Object} targetOrType
   *         If this is a string or array, it represents the event type(s)
   *         that will trigger the listener.
   *
   *         Another evented object can be passed here instead, which will
   *         cause the listener to listen for events on _that_ object.
   *
   *         In either case, the listener's `this` value will be bound to
   *         this object.
   *
   * @param  {string|Array|Function} typeOrListener
   *         If the first argument was a string or array, this should be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function.
   */

/**
   * Add a mediaSource endOfStream call to the queue
   *
   * @param {Error} [error]
   *        Call endOfStream with an error
   *
   * @param {Function} [doneFn]
   *        A function that should be called when the
   *        endOfStream call has finished.
   */

/**
   * Add a parser for custom headers
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.customType   the custom type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */

/**
   * Add a type of source buffer to the media source.
   *
   * @param {string} type
   *        The type of source buffer to add.
   *
   * @param {string} codec
   *        The codec to add the source buffer with.
   */

/**
   * Add a {@link MenuItem} to the menu.
   *
   * @param {Object|string} component
   *        The name or instance of the `MenuItem` to add.
   *
   */

/**
   * Add a {@link TextTrack} to the `TextTrackList`
   *
   * @param {TextTrack} track
   *        The text track to add to the list.
   *
   * @fires TrackList#addtrack
   */

/**
   * Add a {@link Track} to the `TrackList`
   *
   * @param {Track} track
   *        The audio, video, or text track to add to the list.
   *
   * @fires TrackList#addtrack
   */

/**
   * Add a {@link VideoTrack} to the `VideoTrackList`.
   *
   * @param {VideoTrack} track
   *        The VideoTrack to add to the list
   *
   * @fires TrackList#addtrack
   */

/**
   * Add an additional parser for non-standard tags
   *
   * @param {Object}   options              a map of options for the added parser
   * @param {RegExp}   options.expression   a regular expression to match the custom header
   * @param {string}   options.type         the type to register to the output
   * @param {Function} [options.dataParser] function to parse the line into an object
   * @param {boolean}  [options.segment]    should tag data be attached to the segment object
   */

/**
   * Add an {@link AudioTrack} to the `AudioTrackList`.
   *
   * @param {AudioTrack} track
   *        The AudioTrack to add to the list
   *
   * @fires TrackList#addtrack
   */

/**
   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to add to the list.
   *
   * @private
   */

/**
   * Add an {@link TextTrack} to to the {@link Tech}s {@link TextTrackList}.
   *
   * @param {TextTrack|TextTrack[]} tracks
   *        Text track object or text track array to be added to the list.
   */

/**
   * Add and initialize default child `Component`s based upon options.
   */

/**
   * Add event listeners to the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to add listeners to.
   *
   */

/**
   * Add new data to be parsed.
   *
   * @param {string} data the text to process
   */

/**
   * Add or remove a CSS class name from the component's element.
   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
   *
   * @param  {string} classToToggle
   *         The class to add or remove based on (@link Component#hasClass}
   *
   * @param  {boolean|Dom~predicate} [predicate]
   *         An {@link Dom~predicate} function or a boolean
   */

/**
   * Add source buffers with a codec or, if they are already created,
   * call changeType on source buffers using changeType.
   *
   * @param {Object} codecs
   *        Codecs to switch to
   */

/**
   * Add the vjs-ended class to the element so it can change appearance
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ended
   */

/**
   * Add the vjs-paused class to the element so it can change appearance.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#pause
   */

/**
   * Add the vjs-playing class to the element so it can change appearance.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#play
   */

/**
   * Add vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#slideractive
   * @private
   */

/**
   * Add/remove the vjs-has-started class
   *
   * @fires Player#firstplay
   *
   * @param {boolean} request
   *        - true: adds the class
   *        - false: remove the class
   *
   * @return {boolean}
   *         the boolean value of hasStarted_
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Adds a cue to the segment-metadata track with some metadata information about the
   * segment
   *
   * @private
   * @param {Object} segmentInfo
   *        the object returned by loadSegment
   * @method addSegmentMetadataCue_
   */

/**
   * Adds a disposable to the CompositeDisposable or disposes the disposable if the CompositeDisposable is disposed.
   * @param {Any} item Disposable to add.
   */

/**
   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
   * depending on MuteToggle and VolumeControl state
   *
   * @listens Player#loadstart
   * @private
   */

/**
   * Allow sub components to stack CSS class names for the wrapper element
   *
   * @return {string}
   *         The constructed wrapper DOM `className`
   */

/**
   * Allows you to filter the history by the given logger name
   *
   * @param {string} fname
   *        The name to filter by
   *
   * @return {Array}
   *         The filtered list to return
   */

/**
   * An object that contains width and height values of the `Component`s
   * computed style. Uses `window.getComputedStyle`.
   *
   * @typedef {Object} Component~DimensionObject
   *
   * @property {number} width
   *           The width of the `Component`s computed style.
   *
   * @property {number} height
   *           The height of the `Component`s computed style.
   */

/**
   * An object that describes a single piece of media.
   *
   * Properties that are not part of this type description will be retained; so,
   * this can be viewed as a generic metadata storage mechanism as well.
   *
   * @see      {@link https://wicg.github.io/mediasession/#the-mediametadata-interface}
   * @typedef  {Object} Player~MediaObject
   *
   * @property {string} [album]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {string} [artist]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [artwork]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API. If not specified, will be populated via the `poster`, if
   *           available.
   *
   * @property {string} [poster]
   *           URL to an image that will display before playback.
   *
   * @property {Tech~SourceObject|Tech~SourceObject[]|string} [src]
   *           A single source object, an array of source objects, or a string
   *           referencing a URL to a media source. It is _highly recommended_
   *           that an object or array of objects is used here, so that source
   *           selection algorithms can take the `type` into account.
   *
   * @property {string} [title]
   *           Unused, except if this object is passed to the `MediaSession`
   *           API.
   *
   * @property {Object[]} [textTracks]
   *           An array of objects to be used to create text tracks, following
   *           the {@link https://www.w3.org/TR/html50/embedded-content-0.html#the-track-element|native track element format}.
   *           For ease of removal, these will be created as "remote" text
   *           tracks and set to automatically clean up on source changes.
   *
   *           These objects may have properties like `src`, `kind`, `label`,
   *           and `language`, see {@link Tech#createRemoteTextTrack}.
   */

/**
   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
   *
   * @listens tap
   * @listens click
   * @listens keydown
   *
   * @param {EventTarget~Event} event
   +        The `click`, `tap` or `keydown` event that caused this function to be called.
   */

/**
   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
   *
   * @listens Player#posterchange
   *
   * @param {EventTarget~Event} [event]
   *        The `Player#posterchange` event that triggered this function.
   */

/**
   * Any click on a `MenuItem` puts it into the selected state.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * Apply the value of initTime stored in cache as currentTime.
   *
   * @private
   */

/**
   * Are controls are currently enabled for this progress control.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */

/**
   * Are controls are currently enabled for this slider or not.
   *
   * @return {boolean}
   *         true if controls are enabled, false otherwise
   */

/**
   * As long as the SegmentLoader is in the READY state, periodically
   * invoke fillBuffer_().
   *
   * @private
   */

/**
   * Attempt to begin playback at the first opportunity.
   *
   * @return {Promise|undefined}
   *         Returns a promise if the browser supports Promises (or one
   *         was passed in as an option). This promise will be resolved on
   *         the return value of play. If this is undefined it will fulfill the
   *         promise chain otherwise the promise chain will be fulfilled when
   *         the promise from play is fulfilled.
   */

/**
   * Attempt to create a floating video window always on top of other windows
   * so that users may continue consuming media while they interact with other
   * content sites, or applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise|undefined}
   *         A promise with a Picture-in-Picture window if the browser supports
   *         Promises (or one was passed in as an option). It returns undefined
   *         otherwise.
   *
   * @abstract
   */

/**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   *
   * @abstract
   */

/**
   * Attempt to force override of native audio tracks.
   *
   * @param {boolean} override - If set to true native audio will be overridden,
   * otherwise native audio will potentially be used.
   */

/**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   *
   * @abstract
   */

/**
   * Attempt to force override of native video tracks.
   *
   * @param {boolean} override - If set to true native video will be overridden,
   * otherwise native video will potentially be used.
   */

/**
   * Attempt to force override of tracks for the given type
   *
   * @param {string} type - Track type to override, possible values include 'Audio',
   * 'Video', and 'Text'.
   * @param {boolean} override - If set to true native audio/video will be overridden,
   * otherwise native audio/video will potentially be used.
   * @private
   */

/**
   * Begin loading the src data.
   */

/**
   * Begin playback.
   */

/**
   * Begin playing the video.
   */

/**
   * Bind a listener to the component's ready state.
   * Different from event listeners in that if the ready event has already happened
   * it will trigger the function immediately.
   *
   * @return {Component}
   *         Returns itself; method can be chained.
   */

/**
   * Blacklist playlists that are known to be codec or
   * stream-incompatible with the SourceBuffer configuration. For
   * instance, Media Source Extensions would cause the video element to
   * stall waiting for video data if you switched from a variant with
   * video and audio to an audio-only one.
   *
   * @param {Object} media a media playlist compatible with the current
   * set of SourceBuffers. Variants in the current master playlist that
   * do not appear to have compatible codec or stream configurations
   * will be excluded from the default playlist selection algorithm
   * indefinitely.
   * @private
   */

/**
   * Blacklists a playlist when an error occurs for a set amount of time
   * making it unavailable for selection by the rendition selection algorithm
   * and then forces a new playlist (rendition) selection.
   *
   * @param {Object=} error an optional error that may include the playlist
   * to blacklist
   * @param {number=} blacklistDuration an optional number of seconds to blacklist the
   * playlist
   */

/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   *
   * @deprecated Since version 5.
   */

/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object.
   */

/**
   * Builds the default DOM `className`.
   *
   * @return {string}
   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
   */

/**
   * Builds the default DOM class name. Should be overriden by sub-components.
   *
   * @return {string}
   *         The DOM class name for this object.
   *
   * @abstract
   */

/**
   * Calculate distance for slider
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run.
   *
   * @return {number}
   *         The current position of the Slider.
   *         - position.x for vertical `Slider`s
   *         - position.y for horizontal `Slider`s
   */

/**
   * Calculate the amount of time that has expired off the playlist during playback
   *
   * @param {Playlist} playlist
   *        Playlist object to calculate expired from
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playling a live source)
   * @return {number|null}
   *          The amount of time that has expired off the playlist during playback. Null
   *          if no sync-points for the playlist can be found.
   */

/**
   * Calculates and saves timeline mappings, playlist sync info, and segment timing values
   * based on the latest timing information.
   *
   * @param {Object} options
   *        Options object
   * @param {SegmentInfo} options.segmentInfo
   *        The current active request information
   * @param {boolean} options.shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved in timelines.
   */

/**
   * Calculates how much time is left in the video. Not part
   * of the native video API.
   *
   * @return {number}
   *         The time remaining in seconds
   */

/**
   * Calculates the desired buffer low water line based on current time
   *
   * @return {number} Desired buffer low water line in seconds
   */

/**
   * Calculates the desired forward buffer length based on current time
   *
   * @return {number} Desired forward buffer length in seconds
   */

/**
   * Call a set of functions in order on playlist loaders, segment loaders,
   * or both types of loaders.
   *
   * @param {string} filter
   *        Filter loaders that should call fnNames using a string. Can be:
   *        * all - run on all loaders
   *        * audio - run on all audio loaders
   *        * subtitle - run on all subtitle loaders
   *        * main - run on the main/master loaders
   *
   * @param {Array|string} fnNames
   *        A string or array of function names to call.
   */

/**
   * Call load on our SegmentLoaders
   */

/**
   * Call removeSourceBuffer and remove a specific type
   * of source buffer on the mediaSource.
   *
   * @param {string} type
   *        The type of source buffer to remove.
   */

/**
   * Call the changeType function on a source buffer, given the code and type.
   *
   * @param {string} type
   *        The type of source buffer to call changeType on.
   *
   * @param {string} codec
   *        The codec string to change type with on the source buffer.
   */

/**
   * Called when a `MenuItem` gets clicked or tapped.
   *
   * @param {EventTarget~Event} event
   *        The `click` or `tap` event that caused this function to be called.
   *
   * @listens click,tap
   */

/**
   * Called when a `MenuItem` loses focus.
   *
   * @param {EventTarget~Event} event
   *        The `blur` event that caused this function to be called.
   *
   * @listens blur
   */

/**
   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
   *
   * @fires Player#playerresize
   */

/**
   * Called when this Player has focus and a key gets pressed down, or when
   * any Component of this player receives a key press that it doesn't handle.
   * This allows player-wide hotkeys (either as defined below, or optionally
   * by an external function).
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */

/**
   * Called when this Player receives a hotkey keydown event.
   * Supported player-wide hotkeys are:
   *
   *   f          - toggle fullscreen
   *   m          - toggle mute
   *   k or Space - toggle play/pause
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   */

/**
   * Called when this SeekBar has focus and a key gets pressed down.
   * Supports the following keys:
   *
   *   Space or Enter key fire a click event
   *   Home key moves to start of the timeline
   *   End key moves to end of the timeline
   *   Digit "0" through "9" keys move to 0%, 10% ... 80%, 90% of the timeline
   *   PageDown key moves back a larger step than ArrowDown
   *   PageUp key moves forward a large step
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */

/**
   * Calls endOfStream on the media source when all active stream types have called
   * endOfStream
   *
   * @param {string} streamType
   *        Stream type of the segment loader that called endOfStream
   * @private
   */

/**
   * Cancels a current named animation frame if it exists.
   *
   * @param {string} name
   *        The name of the requestAnimationFrame to cancel.
   */

/**
   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
   * (rAF).
   *
   * If you queue an rAF callback via {@link Component#requestAnimationFrame},
   * use this function instead of `window.cancelAnimationFrame`. If you don't,
   * your dispose listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} id
   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
   *
   * @return {number}
   *         Returns the rAF ID that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
   */

/**
   * Cancels any pending timers and resets the 'timeupdate' mechanism
   * designed to detect that we are stalled
   *
   * @private
   */

/**
   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
   * previously called.
   *
   * @fires Tech#timeupdate
   */

/**
   * Change breakpoint classes when the player resizes.
   *
   * @private
   */

/**
   * Check for call to either exit full window or
   * full screen on ESC key
   *
   * @param {string} event
   *        Event to check for key press
   */

/**
   * Check if a component's element has a CSS class name.
   *
   * @param {string} classToCheck
   *        CSS class name to check.
   *
   * @return {boolean}
   *         - True if the `Component` has the class.
   *         - False if the `Component` does not have the class`
   */

/**
   * Check if a playlist has stopped being updated
   *
   * @param {Object} playlist the media playlist object
   * @return {boolean} whether the playlist has stopped being updated or not
   */

/**
   * Check if current tech can support native fullscreen
   * (e.g. with built in controls like iOS, so not our flash swf)
   *
   * @return {boolean}
   *         if native fullscreen is supported
   */

/**
   * Check if fullscreen is supported on the current playback device.
   *
   * @return {boolean}
   *         - True if fullscreen is supported.
   *         - False if fullscreen is not supported.
   */

/**
   * Check if the player is in Picture-in-Picture mode or tell the player that it
   * is or is not in Picture-in-Picture mode.
   *
   * @param  {boolean} [isPiP]
   *         Set the players current Picture-in-Picture state
   *
   * @return {boolean}
   *         - true if Picture-in-Picture is on and getting
   *         - false if Picture-in-Picture is off and getting
   */

/**
   * Check if the player is in fullscreen mode or tell the player that it
   * is or is not in fullscreen mode.
   *
   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
   * property and instead document.fullscreenElement is used. But isFullscreen is
   * still a valuable property for internal player workings.
   *
   * @param  {boolean} [isFS]
   *         Set the players current fullscreen state
   *
   * @return {boolean}
   *         - true if fullscreen is on and getting
   *         - false if fullscreen is off and getting
   */

/**
   * Check if the player is paused or has yet to play
   *
   * @return {boolean}
   *         - false: if the media is currently playing
   *         - true: if media is not currently playing
   */

/**
   * Check if the tech can support the given source
   *
   * @param {Object} srcObj
   *        The source object
   * @param {Object} options
   *        The options passed to the tech
   * @return {string} 'probably', 'maybe', or '' (empty string)
   */

/**
   * Check if the tech can support the given source.
   *
   * @param {Tech~SourceObject} srcObj
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */

/**
   * Check if the tech can support the given type. Also checks the
   * Techs sourceHandlers.
   *
   * @param {string} type
   *         The mimetype to check.
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */

/**
   * Check if the type is supported by this tech.
   *
   * The base tech does not support any type, but source handlers might
   * overwrite this.
   *
   * @param {string} type
   *        The media type to check
   * @return {string} Returns the native video element's response
   */

/**
   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
   * it accordingly
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#durationchange} event that caused this function to run.
   *
   * @listens Player#durationchange
   */

/**
   * Check to see if the `ModalDialog` is closeable via the UI.
   *
   * @param  {boolean} [value]
   *         If given as a boolean, it will set the `closeable` option.
   *
   * @return {boolean}
   *         Returns the final value of the closable option.
   */

/**
   * Check whether the player can play a given mimetype
   *
   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
   *
   * @param {string} type
   *        The mimetype to check
   *
   * @return {string}
   *         'probably', 'maybe', or '' (empty string)
   */

/**
   * Checks on every segment `appendsdone` to see
   * if segment appends are making progress. If they are not
   * and we are still downloading bytes. We blacklist the playlist.
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#appendsdone
   */

/**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */

/**
   * Clean up and dispose of the `PosterImage`.
   */

/**
   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
   *
   * @listens Tech#dispose
   */

/**
   * Clear all displayed {@link TextTrack}s.
   */

/**
   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
   *
   * > Note: Techs without source handlers should call this between sources for `video`
   *         & `audio` tracks. You don't want to use them between tracks!
   *
   * @param {string[]|string} types
   *        TrackList names to clear, valid names are `video`, `audio`, and
   *        `text`.
   */

/**
   * Clears a timeout that gets created via `window.setTimeout` or
   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
   * use this function instead of `window.clearTimout`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} timeoutId
   *        The id of the timeout to clear. The return value of
   *        {@link Component#setTimeout} or `window.setTimeout`.
   *
   * @return {number}
   *         Returns the timeout id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
   */

/**
   * Clears an interval that gets created via `window.setInterval` or
   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
   * use this function instead of `window.clearInterval`. If you don't your dispose
   * listener will not get cleaned up until {@link Component#dispose}!
   *
   * @param {number} intervalId
   *        The id of the interval to clear. The return value of
   *        {@link Component#setInterval} or `window.setInterval`.
   *
   * @return {number}
   *         Returns the interval id that was cleared.
   *
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
   */

/**
   * Clears the internal history tracking, but does not prevent further history
   * tracking.
   */

/**
   * Closes the modal, does nothing if the `ModalDialog` is
   * not open.
   *
   * @fires ModalDialog#beforemodalclose
   * @fires ModalDialog#modalclose
   */

/**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

/**
   * Create a <select> element with configured options.
   *
   * @param {string} key
   *        Configuration key to use during creation.
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */

/**
   * Create a control text element on this `ClickableComponent`
   *
   * @param {Element} [el]
   *        Parent element for the control text.
   *
   * @return {Element}
   *         The control text element that gets created.
   */

/**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @fires Player#enterpictureinpicture
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */

/**
   * Create a floating video window always on top of other windows so that users may
   * continue consuming media while they interact with other content sites, or
   * applications on their device.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @return {Promise}
   *         A promise with a Picture-in-Picture window.
   */

/**
   * Create a function for setting the source using a source object
   * and source handlers.
   * Should never be called unless a source handler was found.
   *
   * @param {Tech~SourceObject} source
   *        A source object with src and type keys
   */

/**
   * Create a menu item for each audio track
   *
   * @param {AudioTrackMenuItem[]} [items=[]]
   *        An array of existing menu items to use.
   *
   * @return {AudioTrackMenuItem[]}
   *         An array of menu items
   */

/**
   * Create a menu item for each text track
   *
   * @param {TextTrackMenuItem[]} [items=[]]
   *        Existing array of items to use during creation
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items that were created
   */

/**
   * Create a menu item for each text track
   *
   * @return {TextTrackMenuItem[]}
   *         Array of menu items
   */

/**
   * Create a new sublogger which chains the old name to the new name.
   *
   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:
   * ```js
   *  mylogger('foo');
   *  // > VIDEOJS: player: foo
   * ```
   *
   * @param {string} name
   *        The name to add call the new logger
   * @return {Object}
   */

/**
   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}.
   * When manualCleanup is set to false, the track will be automatically removed
   * on source changes.
   *
   * @param {Object} options
   *        Options to pass to {@link HTMLTrackElement} during creation. See
   *        {@link HTMLTrackElement} for object properties that you should use.
   *
   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
   *                                       removed on a source change
   *
   * @return {HtmlTrackElement}
   *         the HTMLTrackElement that was created and added
   *         to the HtmlTrackElementList and the remote
   *         TextTrackList
   *
   * @deprecated The default value of the "manualCleanup" parameter will default
   *             to "false" in upcoming versions of Video.js
   */

/**
   * Create an emulated TextTrack for use by addRemoteTextTrack
   *
   * This is intended to be overridden by classes that inherit from
   * Tech in order to create native or custom TextTracks.
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label].
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */

/**
   * Create an instance of this class
   *
   * @param {Track[]} tracks
   *        A list of tracks to initialize the list with.
   *
   * @abstract
   */

/**
   * Create an instance of this class.
   *
   * @param {AudioTrack[]} [tracks=[]]
   *        A list of `AudioTrack` to instantiate the list with.
   */

/**
   * Create an instance of this class.
   *
   * @param {Element} tag
   *        The original video DOM element used for configuring options.
   *
   * @param {Object} [options]
   *        Object of option names and values.
   *
   * @param {Component~ReadyCallback} [ready]
   *        Ready callback function.
   */

/**
   * Create an instance of this class.
   *
   * @param {HtmlTrackElement[]} [tracks=[]]
   *        A list of `HtmlTrackElement` to instantiate the list with.
   */

/**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {AudioTrack~Kind} [options.kind='']
   *        A valid audio track kind
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.enabled]
   *        If this track is the one that is currently playing. If this track is part of
   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
   */

/**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid kind for the track type you are creating.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @abstract
   */

/**
   * Create an instance of this class.
   *
   * @param {Object} [options={}]
   *        Object of option names and values
   *
   * @param {string} [options.kind='']
   *        A valid {@link VideoTrack~Kind}
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this AudioTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {boolean} [options.selected]
   *        If this track is the one that is currently playing.
   */

/**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param {Tech} options.tech
   *        A reference to the tech that owns this HTMLTrackElement.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        vesion of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */

/**
   * Create an instance of this class.
   *
   * @param {Object} options={}
   *        Object of option names and values
   *
   * @param {Tech} options.tech
   *        A reference to the tech that owns this TextTrack.
   *
   * @param {TextTrack~Kind} [options.kind='subtitles']
   *        A valid text track kind.
   *
   * @param {TextTrack~Mode} [options.mode='disabled']
   *        A valid text track mode.
   *
   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
   *        A unique id for this TextTrack.
   *
   * @param {string} [options.label='']
   *        The menu label for this track.
   *
   * @param {string} [options.language='']
   *        A valid two character language code.
   *
   * @param {string} [options.srclang='']
   *        A valid two character language code. An alternative, but deprioritized
   *        version of `options.language`
   *
   * @param {string} [options.src]
   *        A url to TextTrack cues.
   *
   * @param {boolean} [options.default]
   *        If this track should default to on or off.
   */

/**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function that is run when this component is ready.
   */

/**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should attach to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */

/**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Mixed} [options.content=undefined]
   *        Provide customized content for this modal.
   *
   * @param {string} [options.description]
   *        A text description for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.fillAlways=false]
   *        Normally, modals are automatically filled only the first time
   *        they open. This tells the modal to refresh its content
   *        every time it opens.
   *
   * @param {string} [options.label]
   *        A text label for the modal, primarily for accessibility.
   *
   * @param {boolean} [options.pauseOnOpen=true]
   *        If `true`, playback will will be paused if playing when
   *        the modal opens, and resumed when it closes.
   *
   * @param {boolean} [options.temporary=true]
   *        If `true`, the modal can only be opened once; it will be
   *        disposed as soon as it's closed.
   *
   * @param {boolean} [options.uncloseable=false]
   *        If `true`, the user will not be able to close the modal
   *        through the UI in the normal ways. Programmatic closing is
   *        still possible.
   */

/**
   * Create an instance of this class.
   *
   * @param {Player} player
   *        the player that this component should attach to
   *
   * @param {Object} [options]
   *        Object of option names and values
   *
   */

/**
   * Create an instance of this class.
   *
   * @param {VideoTrack[]} [tracks=[]]
   *        A list of `VideoTrack` to instantiate the list with.
   */

/**
   * Create an instance of this class..
   *
   * @param {Array} cues
   *        A list of cues to be initialized with
   */

/**
   * Create and returns a remote {@link TextTrack} object.
   *
   * @param {string} kind
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
   *
   * @param {string} [label]
   *        Label to identify the text track
   *
   * @param {string} [language]
   *        Two letter language abbreviation
   *
   * @return {TextTrack}
   *         The TextTrack that gets created.
   */

/**
   * Create background color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */

/**
   * Create caption menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */

/**
   * Create caption/subtitles menu items
   *
   * @return {CaptionSettingsMenuItem[]}
   *         The array of current menu items.
   */

/**
   * Create color elements for the component
   *
   * @return {Element}
   *         The element that was created
   *
   * @private
   */

/**
   * Create controls for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */

/**
   * Create font elements for the component
   *
   * @return {Element}
   *         The element that was created.
   *
   * @private
   */

/**
   * Create foreground color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */

/**
   * Create menu from chapter track
   *
   * @return {Menu}
   *         New menu for the chapter buttons
   */

/**
   * Create source buffers and exlude any incompatible renditions.
   *
   * @private
   */

/**
   * Create the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create the ResizeManager.
   *
   * @param {Object} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of ResizeManager options.
   *
   * @param {Object} [options.ResizeObserver]
   *        A polyfill for ResizeObserver can be passed in here.
   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
   */

/**
   * Create the `Button`s DOM element.
   *
   * @param {string} [tag="button"]
   *        The element's node type. This argument is IGNORED: no matter what
   *        is passed, it will always create a `button` element.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `ClickableComponent`s DOM element.
   *
   * @param {string} [tag=div]
   *        The element's node type.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element.
   *
   * @param {Object} [attributes={}]
   *        An object of attributes that should be set on the element.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `Component`'s DOM element
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create the `Component`'s DOM element with the "minus" characted prepend to the time
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create the `Component`s DOM element.
   *
   * @param {string} [tagName]
   *        Element's DOM node type. e.g. 'div'
   *
   * @param {Object} [properties]
   *        An object of properties that should be set.
   *
   * @param {Object} [attributes]
   *        An object of attributes that should be set.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `Html5` Tech's DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `LoadingSpinner`s DOM element.
   *
   * @return {Element}
   *         The dom element that gets created.
   */

/**
   * Create the `MenuButtons`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `MenuItem's DOM element
   *
   * @param {string} [type=li]
   *        Element's node type, not actually used, always set to `li`.
   *
   * @param {Object} [props={}]
   *        An object of properties that should be set on the element
   *
   * @param {Object} [attrs={}]
   *        An object of attributes that should be set on the element
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `Menu`s DOM element.
   *
   * @return {Element}
   *         the element that was created
   */

/**
   * Create the `ModalDialog`'s DOM element
   *
   * @return {Element}
   *         The DOM element that gets created.
   */

/**
   * Create the `Player`'s DOM element.
   *
   * @return {Element}
   *         The DOM element that gets created.
   */

/**
   * Create the `PosterImage`s DOM element.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the `Slider`s DOM element.
   *
   * @param {string} type
   *        Type of element to create.
   *
   * @param {Object} [props={}]
   *        List of properties in Object form.
   *
   * @param {Object} [attributes={}]
   *        list of attributes in Object form.
   *
   * @return {Element}
   *         The element that gets created.
   */

/**
   * Create the component's DOM element
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create the list of menu items. Specific to each subclass.
   *
   * @abstract
   */

/**
   * Create the menu and add all items to it.
   *
   * @return {Menu}
   *         The constructed menu
   */

/**
   * Create the playback rate menu
   *
   * @return {Menu}
   *         Menu object populated with {@link PlaybackRateMenuItem}s
   */

/**
   * Create the the DOM element for this class.
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create the time tooltip DOM element
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create the {@link Component}'s DOM element.
   *
   * @return {Element}
   *         The element that was created.
   */

/**
   * Create window color element for the component
   *
   * @return {string}
   *         An HTML string.
   *
   * @private
   */

/**
   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
   * around `window.setInterval`. There are a few reasons to use this one instead though.
   * 1. It gets cleared via  {@link Component#clearInterval} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will be a {@link Component~GenericCallback}
   *
   * @param {Component~GenericCallback} fn
   *        The function to run every `x` seconds.
   *
   * @param {number} interval
   *        Execute the specified function every `x` milliseconds.
   *
   * @return {number}
   *         Returns an id that can be used to identify the interval. It can also be be used in
   *         {@link Component#clearInterval} to clear the interval.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
   */

/**
   * Creates a function that runs after an `x` millisecond timeout. This function is a
   * wrapper around `window.setTimeout`. There are a few reasons to use this one
   * instead though:
   * 1. It gets cleared via  {@link Component#clearTimeout} when
   *    {@link Component#dispose} gets called.
   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
   *
   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
   *         will cause its dispose listener not to get cleaned up! Please use
   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
   *
   * @param {Component~GenericCallback} fn
   *        The function that will be run after `timeout`.
   *
   * @param {number} timeout
   *        Timeout in milliseconds to delay before executing the specified function.
   *
   * @return {number}
   *         Returns a timeout ID that gets used to identify the timeout. It can also
   *         get used in {@link Component#clearTimeout} to clear the timeout that
   *         was set.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
   */

/**
   * Creates a remote text track object and returns an html track element.
   *
   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
   *
   * @param {Object} options
   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
   *
   * @param {boolean} [manualCleanup=true]
   *        - When false: the TextTrack will be automatically removed from the video
   *          element whenever the source changes
   *        - When True: The TextTrack will have to be cleaned up manually
   *
   * @return {HTMLTrackElement}
   *         An Html Track Element.
   *
   * @deprecated The default functionality for this function will be equivalent
   *             to "manualCleanup=false" in the future. The manualCleanup parameter will
   *             also be removed.
   */

/**
   * Creates a remote text track object and returns an html track element.
   *
   * @param {Object} options The object should contain values for
   * kind, language, label, and src (location of the WebVTT file)
   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
   * automatically removed from the video element whenever the source changes
   * @return {HTMLTrackElement} An Html Track Element.
   * This can be an emulated {@link HTMLTrackElement} or a native one.
   * @deprecated The default value of the "manualCleanup" parameter will default
   * to "false" in upcoming versions of Video.js
   */

/**
   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
   * component) that immediately overlays the player with arbitrary
   * content and removes itself when closed.
   *
   * @param {string|Function|Element|Array|null} content
   *        Same as {@link ModalDialog#content}'s param of the same name.
   *        The most straight-forward usage is to provide a string or DOM
   *        element.
   *
   * @param {Object} [options]
   *        Extra options which will be passed on to the {@link ModalDialog}.
   *
   * @return {ModalDialog}
   *         the {@link ModalDialog} that was created
   */

/**
   * Creates an instance of the this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   *
   */

/**
   * Creates an instance of this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   *
   * @param  {function} [options.clickHandler]
   *         The function to call when the button is clicked / activated
   */

/**
   * Creates an instance of this class.
   *
   * @param  {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param  {Object} [options]
   *         The key/value store of player options.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *         The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *         The key/value store of player options.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options={}]
   *        The key/value store of player options.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when `TextTrackDisplay` is ready.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this component is ready.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Component~ReadyCallback} [ready]
   *        The function to call when this function is ready.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {Object[]} [options.children]
   *        An array of children objects to intialize this component with. Children objects have
   *        a name property that will be used if more than one component of the same type needs to be
   *        added.
   *
   * @param {Component~ReadyCallback} [ready]
   *        Function that gets called when the `Component` is ready.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   *
   * @param {number} [options.trackingThreshold=30]
   *        Number of seconds of live window (seekableEnd - seekableStart) that
   *        media needs to have before the liveui will be shown.
   *
   * @param {number} [options.liveTolerance=15]
   *        Number of seconds behind live that we have to be
   *        before we will be considered non-live. Note that this will only
   *        be used when playing at the live edge. This allows large seekable end
   *        changes to not effect wether we are live or not.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The `Player` that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */

/**
   * Creates an instance of this class.
   *
   * @param {Player} player
   *        The {@link Player} that this class should be attached to.
   *
   * @param {Object} [options]
   *        The key/value store of player options.
   */

/**
   * Creates an instance of this class.
   *
   * Sub-classes should call `super` to ensure plugins are properly initialized.
   *
   * @param {Player} player
   *        A Video.js player instance.
   */

/**
   * Creates either native TextTrack or an emulated TextTrack depending
   * on the value of `featuresNativeTextTracks`
   *
   * @param {Object} options
   *        The object should contain the options to initialize the TextTrack with.
   *
   * @param {string} [options.kind]
   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
   *
   * @param {string} [options.label]
   *        Label to identify the text track
   *
   * @param {string} [options.language]
   *        Two letter language abbreviation.
   *
   * @param {boolean} [options.default]
   *        Default this track to on.
   *
   * @param {string} [options.id]
   *        The internal id to assign this track.
   *
   * @param {string} [options.src]
   *        A source url for the track.
   *
   * @return {HTMLTrackElement}
   *         The track element that gets created.
   */

/**
   * De-register a Video.js plugin.
   *
   * @param  {string} name
   *         The name of the plugin to be de-registered. Must be a string that
   *         matches an existing plugin.
   *
   * @throws {Error}
   *         If an attempt is made to de-register the base plugin.
   */

/**
   * Decrease volume level for keyboard users
   */

/**
   * Deep merge of options objects with new options.
   * > Note: When both `obj` and `options` contain properties whose values are objects.
   *         The two properties get merged using {@link module:mergeOptions}
   *
   * @param {Object} obj
   *        The object that contains new options.
   *
   * @return {Object}
   *         A new object of `this.options_` and `obj` merged together.
   */

/**
   * Default parser for all other attributes. Acts as a no-op and just returns the value
   * as a string
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {string}
   *         Unparsed value
   */

/**
   * Delete all the buffered data and reset the SegmentLoader
   *
   * @param {Function} [done] an optional callback to be executed when the remove
   * operation is complete
   */

/**
   * Destroys the stream and cleans up.
   */

/**
   * Destroys the video player and does any necessary cleanup.
   *
   * This is especially helpful if you are dynamically adding and removing videos
   * to/from the DOM.
   *
   * @fires Player#dispose
   */

/**
   * Determine whether or not flexbox is supported
   *
   * @return {boolean}
   *         - true if flexbox is supported
   *         - false if flexbox is not supported
   */

/**
   * Determine whether or not this component has been disposed.
   *
   * @return {boolean}
   *         If the component has been disposed, will be `true`. Otherwise, `false`.
   */

/**
   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
   *
   * @param   {string|Function} plugin
   *          If a string, matches the name of a plugin. If a function, will be
   *          tested directly.
   *
   * @return {boolean}
   *          Whether or not a plugin is a basic plugin.
   */

/**
   * Determines if currentTime is at the live edge and won't fall behind
   * on each seekableendchange
   *
   * @return {boolean}
   *         Wether playback is at the live edge
   */

/**
   * Determines if the network has enough bandwidth to complete the current segment
   * request in a timely manner. If not, the request will be aborted early and bandwidth
   * updated to trigger a playlist switch.
   *
   * @param {Object} stats
   *        Object containing stats about the request timing and size
   * @return {boolean} True if the request was aborted, false otherwise
   * @private
   */

/**
   * Determines if the player is live, only checks if this component
   * is tracking live playback or not
   *
   * @return {boolean}
   *         Wether liveTracker is tracking
   */

/**
   * Determines if we should call endOfStream on the media source based
   * on the state of the buffer or if appened segment was the final
   * segment in the playlist.
   *
   * @param {number} [mediaIndex] the media index of segment we last appended
   * @param {Object} [playlist] a media playlist object
   * @return {boolean} do we need to call endOfStream on the MediaSource
   */

/**
   * Determines what segment request should be made, given current playback
   * state.
   *
   * @param {TimeRanges} buffered - the state of the buffer
   * @param {Object} playlist - the playlist object to fetch segments from
   * @param {number} mediaIndex - the previous mediaIndex fetched or null
   * @param {boolean} hasPlayed - a flag indicating whether we have played or not
   * @param {number} currentTime - the playback position in seconds
   * @param {Object} syncPoint - a segment info object that describes the
   * @return {Object} a segment request object that describes the segment to load
   */

/**
   * Determines whether the loader has enough info to load the next segment.
   *
   * @return {boolean}
   *         Whether or not the loader has enough info to load the next segment
   */

/**
   * Disable Picture-in-Picture mode.
   *
   * @param {boolean} value
   *                  - true will disable Picture-in-Picture mode
   *                  - false will enable Picture-in-Picture mode
   */

/**
   * Disable all controls on the progress control and its children
   */

/**
   * Disable controls for this slider if they are enabled
   */

/**
   * Disable history tracking if it is currently enabled.
   */

/**
   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
   * {@link Button#enable}.
   */

/**
   * Disable the `MenuButton`. Don't allow it to be clicked.
   */

/**
   * Disable this `ClickableComponent`
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Dispose of `HTML5` media element and remove all tracks.
   */

/**
   * Dispose of liveTracker
   */

/**
   * Dispose of the `Component` and all child components.
   *
   * @fires Component#dispose
   */

/**
   * Dispose of the `menu-button` and all child components.
   */

/**
   * Dispose of the `volume-panel` and all child components.
   */

/**
   * Dispose of the element and stop tracking
   */

/**
   * Disposes a plugin.
   *
   * Subclasses can override this if they want, but for the sake of safety,
   * it's probably best to subscribe the "dispose" event.
   *
   * @fires Plugin#dispose
   */

/**
   * Each event triggered by plugins includes a hash of additional data with
   * conventional properties.
   *
   * This returns that object or mutates an existing hash.
   *
   * @param   {Object} [hash={}]
   *          An object to be used as event an event hash.
   *
   * @return {Plugin~PluginEventHash}
   *          An event hash object with provided properties mixed-in.
   */

/**
   * Each time we have discontinuity in the playlist, attempt to calculate the location
   * in display of the start of the discontinuity and save that. We also save an accuracy
   * value so that we save values with the most accuracy (closest to 0.)
   *
   * @private
   * @param {SegmentInfo} segmentInfo - The current active request information
   */

/**
   * Emit a 'tap' events when touch event support gets detected. This gets used to
   * support toggling the controls through a tap on the video. They get enabled
   * because every sub-component would have extra overhead otherwise.
   *
   * @private
   * @fires Component#tap
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchleave
   * @listens Component#touchcancel
   * @listens Component#touchend
    */

/**
   * Empties the content element. This happens anytime the modal is filled.
   *
   * @fires ModalDialog#beforemodalempty
   * @fires ModalDialog#modalempty
   */

/**
   * Emulate TextTracks using vtt.js if necessary
   *
   * @fires Tech#vttjsloaded
   * @fires Tech#vttjserror
   */

/**
   * Emulate texttracks
   *
   */

/**
   * Enable all controls on the progress control and its children
   */

/**
   * Enable controls for this slider if they are disabled
   */

/**
   * Enable history tracking if it is currently disabled.
   */

/**
   * Enable the `Button` element so that it can be activated or clicked. Use this with
   * {@link Button#disable}.
   */

/**
   * Enable the `MenuButton`. Allow it to be clicked.
   */

/**
   * Enable this `ClickableComponent`
   */

/**
   * Enables or disables button based on document.pictureInPictureEnabled property value
   * or on value returned by player.disablePictureInPicture() method.
   */

/**
   * Enqueues updates to its own DOM as well as the DOM of its
   * {@link TimeTooltip} child.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */

/**
   * Enumeration of available logging levels, where the keys are the level names
   * and the values are `|`-separated strings containing logging methods allowed
   * in that logging level. These strings are used to create a regular expression
   * matching the function name being called.
   *
   * Levels provided by Video.js are:
   *
   * - `off`: Matches no calls. Any value that can be cast to `false` will have
   *   this effect. The most restrictive.
   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
   *   `log.warn`, and `log.error`).
   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
   * - `warn`: Matches `log.warn` and `log.error` calls.
   * - `error`: Matches only `log.error` calls.
   *
   * @type {Object}
   */

/**
   * Event handler that is called when a `ClickableComponent` receives a
   * `click` or `tap` event.
   *
   * @param {EventTarget~Event} event
   *        The `tap` or `click` event that caused this function to be called.
   *
   * @listens tap
   * @listens click
   * @abstract
   */

/**
   * Event handler that is called when a `ClickableComponent` receives a
   * `keydown` event.
   *
   * By default, if the key is Space or Enter, it will trigger a `click` event.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */

/**
   * Event handler that is called when a `CloseButton` receives a
   * `keydown` event.
   *
   * By default, if the key is Esc, it will trigger a `click` event.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */

/**
   * Excludes playlists with codecs that are unsupported by the muxer and browser.
   */

/**
   * Exit Picture-in-Picture mode.
   *
   * @see [Spec]{@link https://wicg.github.io/picture-in-picture}
   *
   * @fires Player#leavepictureinpicture
   *
   * @return {Promise}
   *         A promise.
   */

/**
   * Exit full window
   *
   * @fires Player#exitFullWindow
   */

/**
   * Fill the modal's content element with arbitrary content.
   * The content element will be emptied before this change takes place.
   *
   * @fires ModalDialog#beforemodalfill
   * @fires ModalDialog#modalfill
   *
   * @param {Mixed} [content]
   *        The same rules apply to this as apply to the `content` option.
   */

/**
   * Fill the modal's content element with the modal's "content" option.
   * The content element will be emptied before this change takes place.
   */

/**
   * Find a single DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelector`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {Element|null}
   *         the dom element that was found, or null
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */

/**
   * Find a sync-point for the playlist specified
   *
   * A sync-point is defined as a known mapping from display-time to
   * a segment-index in the current playlist.
   *
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinite if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @return {Object}
   *          A sync-point object
   */

/**
   * Find the track object that is currently in use by this ChaptersButton
   *
   * @return {TextTrack|undefined}
   *         The current track or undefined if none was found.
   */

/**
   * Finds all DOM element matching a `selector`. This can be within the `Component`s
   * `contentEl()` or another custom context.
   *
   * @param {string} selector
   *        A valid CSS selector, which will be passed to `querySelectorAll`.
   *
   * @param {Element|string} [context=this.contentEl()]
   *        A DOM element within which to query. Can also be a selector string in
   *        which case the first matching element will get used as context. If
   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
   *        nothing it falls back to `document`.
   *
   * @return {NodeList}
   *         a list of dom elements that were found
   *
   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
   */

/**
   * Fire an event on this evented object, causing its listeners to be called.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash]
   *          An additional object to pass along to listeners.
   *
   * @return {boolean}
   *          Whether or not the default behavior was prevented.
   */

/**
   * Fired when the duration of the media resource is first known or changed
   *
   * @listens Tech#durationchange
   * @private
   */

/**
   * Fired whenever the media begins or resumes playback
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
   * @fires Player#play
   * @listens Tech#play
   * @private
   */

/**
   * Fires when an error occurred during the loading of an audio/video.
   *
   * @private
   * @listens Tech#error
   */

/**
   * Fixes situations where there's a bad seek
   *
   * @return {boolean} whether an action was taken to fix the seek
   * @private
   */

/**
   * Flush any remaining input. This can be handy if the last line of an M3U8
   * manifest did not contain a trailing newline but the file has been
   * completely received.
   */

/**
   * Force the SegmentLoader to restart synchronization and make a conservative guess
   * before returning to the simple walk-forward method
   */

/**
   * Force the SegmentLoader to resync and start loading around the currentTime instead
   * of starting at the end of the buffer
   *
   * Useful for fast quality changes
   */

/**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Forwards all `data` events on this stream to the destination stream. The
   * destination stream should provide a method `push` to receive the data
   * events as they arrive.
   *
   * @param {Stream} destination the stream that will receive all `data` events
   * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
   */

/**
   * Generate profiling statistics for the HTML5Backend.
   */

/**
   * Get a TimeRange object representing the current ranges of time that the user
   * has played.
   *
   * @return {TimeRange}
   *         A time range object that represents all the increments of time that have
   *         been played.
   */

/**
   * Get a TimeRange object with an array of the times of the video
   * that have been downloaded. If you just want the percent of the
   * video that's been downloaded, use bufferedPercent.
   *
   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
   *
   * @return {TimeRange}
   *         A mock TimeRange object (following HTML spec)
   */

/**
   * Get a Track from the TrackList by a tracks id
   *
   * @param {string} id - the id of the track to get
   * @method getTrackById
   * @return {Track}
   * @private
   */

/**
   * Get a `Component` based on the name it was registered with.
   *
   * @param {string} name
   *        The Name of the component to get.
   *
   * @return {Component}
   *         The `Component` that got registered under the given name.
   *
   * @deprecated In `videojs` 6 this will not return `Component`s that were not
   *             registered using {@link Component.registerComponent}. Currently we
   *             check the global `videojs` object for a `Component` name and
   *             return that if it exists.
   */

/**
   * Get a `Tech` from the shared list by name.
   *
   * @param {string} name
   *        `camelCase` or `TitleCase` name of the Tech to get
   *
   * @return {Tech|undefined}
   *         The `Tech` or undefined if there was no tech with the name requested.
   */

/**
   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
   *
   * @param {string} id
   *        The id of the cue that should be searched for.
   *
   * @return {TextTrackCueList~TextTrackCue|null}
   *         A single cue or null if none was found.
   */

/**
   * Get a clone of the current {@link Player~MediaObject} for this player.
   *
   * If the `loadMedia` method has not been used, will attempt to return a
   * {@link Player~MediaObject} based on the current state of the player.
   *
   * @return {Player~MediaObject}
   */

/**
   * Get a combined video/audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         the combined time range
   */

/**
   * Get an array of all child components
   *
   * @return {Array}
   *         The children
   */

/**
   * Get an object that contains computed width and height values of the
   * component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {Component~DimensionObject}
   *         The computed dimensions of the component's element.
   */

/**
   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
   * {@link TextTrack}.
   *
   * @param {TextTrack} track
   *        The track associated with a track element.
   *
   * @return {HtmlTrackElement|undefined}
   *         The track element that was found or undefined.
   *
   * @private
   */

/**
   * Get and create a `TimeRange` object for buffering.
   *
   * @return {TimeRange}
   *         The time range object that was created.
   */

/**
   * Get calls can't wait for the tech, and sometimes don't need to.
   *
   * @param {string} method
   *        Tech method
   *
   * @return {Function|undefined}
   *         the method or undefined
   *
   * @private
   */

/**
   * Get current breakpoint name, if any.
   *
   * @return {string}
   *         If there is currently a breakpoint set, returns a the key from the
   *         breakpoints object matching it. Otherwise, returns an empty string.
   */

/**
   * Get object for cached values.
   *
   * @return {Object}
   *         get the current object cache
   */

/**
   * Get or set a flag indicating whether or not this player should adjust
   * its UI based on its dimensions.
   *
   * @param  {boolean} value
   *         Should be `true` if the player should adjust its UI based on its
   *         dimensions; otherwise, should be `false`.
   *
   * @return {boolean}
   *         Will be `true` if this player should adjust its UI based on its
   *         dimensions; otherwise, will be `false`.
   */

/**
   * Get or set an error on the Tech.
   *
   * @param {MediaError} [err]
   *        Error to set on the Tech
   *
   * @return {MediaError|null}
   *         The current error object on the tech, or null if there isn't one.
   */

/**
   * Get or set breakpoints on the player.
   *
   * Calling this method with an object or `true` will remove any previous
   * custom breakpoints and start from the defaults again.
   *
   * @param  {Object|boolean} [breakpoints]
   *         If an object is given, it can be used to provide custom
   *         breakpoints. If `true` is given, will set default breakpoints.
   *         If this argument is not given, will simply return the current
   *         breakpoints.
   *
   * @param  {number} [breakpoints.tiny]
   *         The maximum width for the "vjs-layout-tiny" class.
   *
   * @param  {number} [breakpoints.xsmall]
   *         The maximum width for the "vjs-layout-x-small" class.
   *
   * @param  {number} [breakpoints.small]
   *         The maximum width for the "vjs-layout-small" class.
   *
   * @param  {number} [breakpoints.medium]
   *         The maximum width for the "vjs-layout-medium" class.
   *
   * @param  {number} [breakpoints.large]
   *         The maximum width for the "vjs-layout-large" class.
   *
   * @param  {number} [breakpoints.xlarge]
   *         The maximum width for the "vjs-layout-x-large" class.
   *
   * @param  {number} [breakpoints.huge]
   *         The maximum width for the "vjs-layout-huge" class.
   *
   * @return {Object}
   *         An object mapping breakpoint names to maximum width values.
   */

/**
   * Get or set the `Player`'s crossOrigin option. For the HTML5 player, this
   * sets the `crossOrigin` property on the `<video>` tag to control the CORS
   * behavior.
   *
   * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
   *
   * @param {string} [value]
   *        The value to set the `Player`'s crossOrigin to. If an argument is
   *        given, must be one of `anonymous` or `use-credentials`.
   *
   * @return {string|undefined}
   *         - The current crossOrigin value of the `Player` when getting.
   *         - undefined when setting
   */

/**
   * Get or set the autoplay option. When this is a boolean it will
   * modify the attribute on the tech. When this is a string the attribute on
   * the tech will be removed and `Player` will handle autoplay on loadstarts.
   *
   * @param {boolean|string} [value]
   *        - true: autoplay using the browser behavior
   *        - false: do not autoplay
   *        - 'play': call play() on every loadstart
   *        - 'muted': call muted() then play() on every loadstart
   *        - 'any': call play() on every loadstart. if that fails call muted() then play().
   *        - *: values other than those listed here will be set `autoplay` to true
   *
   * @return {boolean|string}
   *         The current value of autoplay when getting
   */

/**
   * Get or set the current logging level.
   *
   * If a string matching a key from {@link module:log.levels} is provided, acts
   * as a setter.
   *
   * @param  {string} [lvl]
   *         Pass a valid level to set a new logging level.
   *
   * @return {string}
   *         The current logging level.
   */

/**
   * Get or set the current time (in seconds)
   *
   * @param {number|string} [seconds]
   *        The time to seek to in seconds
   *
   * @return {number}
   *         - the current time in seconds when getting
   */

/**
   * Get or set the current volume of the media
   *
   * @param  {number} [percentAsDecimal]
   *         The new volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number}
   *         The current volume as a percent when getting
   */

/**
   * Get or set the height of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The height that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|string}
   *         The width when getting, zero if there is no width. Can be a string
   *         postpixed with '%' or 'px'.
   */

/**
   * Get or set the localize text to use for the controls on the `ClickableComponent`.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */

/**
   * Get or set the localized control text that will be used for accessibility.
   *
   * > NOTE: This will come from the internal `menuButton_` element.
   *
   * @param {string} [text]
   *        Control text for element.
   *
   * @param {Element} [el=this.menuButton_.el()]
   *        Element to set the title on.
   *
   * @return {string}
   *         - The control text when getting
   */

/**
   * Get or set the loop attribute on the video element.
   *
   * @param {boolean} [value]
   *        - true means that we should loop the video
   *        - false means that we should not loop the video
   *
   * @return {boolean}
   *         The current value of loop when getting
   */

/**
   * Get or set the poster image source url
   *
   * @fires Player#posterchange
   *
   * @param {string} [src]
   *        Poster image source URL
   *
   * @return {string}
   *         The current value of poster when getting
   */

/**
   * Get or set the preload attribute
   *
   * @param {boolean} [value]
   *        - true means that we should preload
   *        - false means that we should not preload
   *
   * @return {string}
   *         The preload attribute value when getting
   */

/**
   * Get or set the video source.
   *
   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
   *        A SourceObject, an array of SourceObjects, or a string referencing
   *        a URL to a media source. It is _highly recommended_ that an object
   *        or array of objects is used here, so that source selection
   *        algorithms can take the `type` into account.
   *
   *        If not provided, this method acts as a getter.
   *
   * @return {string|undefined}
   *         If the `source` argument is missing, returns the current source
   *         URL. Otherwise, returns nothing/undefined.
   */

/**
   * Get or set the width of the component based upon the CSS styles.
   * See {@link Component#dimension} for more detailed information.
   *
   * @param {number|string} [num]
   *        The width that you want to set postfixed with '%', 'px' or nothing.
   *
   * @param {boolean} [skipListeners]
   *        Skip the componentresize event trigger
   *
   * @return {number|string}
   *         The width when getting, zero if there is no width. Can be a string
   *           postpixed with '%' or 'px'.
   */

/**
   * Get or set whether or not the controls are showing.
   *
   * @fires Player#controlsenabled
   *
   * @param {boolean} [bool]
   *        - true to turn controls on
   *        - false to turn controls off
   *
   * @return {boolean}
   *         The current value of controls when getting
   */

/**
   * Get or set width or height of the `Component` element. This is the shared code
   * for the {@link Component#width} and {@link Component#height}.
   *
   * Things to know:
   * - If the width or height in an number this will return the number postfixed with 'px'.
   * - If the width/height is a percent this will return the percent postfixed with '%'
   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
   *   for more information
   * - If you want the computed style of the component, use {@link Component#currentWidth}
   *   and {@link {Component#currentHeight}
   *
   * @fires Component#componentresize
   *
   * @param {string} widthOrHeight
   8        'width' or 'height'
   *
   * @param  {number|string} [num]
   8         New dimension
   *
   * @param  {boolean} [skipListeners]
   *         Skip componentresize event trigger
   *
   * @return {number}
   *         The dimension when getting or 0 if unset
   */

/**
   * Get percent of volume level
   *
   * @return {number}
   *         Volume level percent as a decimal number.
   */

/**
   * Get possible playback rates
   *
   * @return {Array}
   *         All possible playback rates
   */

/**
   * Get the `Component`s DOM element
   *
   * @return {Element}
   *         The DOM element for this `Component`.
   */

/**
   * Get the `Component`s name. The name gets used to reference the `Component`
   * and is set during registration.
   *
   * @return {string}
   *         The name of this `Component`.
   */

/**
   * Get the audio buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The audio buffer's buffered time range
   */

/**
   * Get the caption for the ChaptersButton based on the track label. This will also
   * use the current tracks localized kind as a fallback if a label does not exist.
   *
   * @return {string}
   *         The tracks current label or the localized track kind.
   */

/**
   * Get the computed height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed height of the component's element.
   */

/**
   * Get the computed width of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @return {number}
   *         The computed width of the component's element.
   */

/**
   * Get the computed width or the height of the component's element.
   *
   * Uses `window.getComputedStyle`.
   *
   * @param {string} widthOrHeight
   *        A string containing 'width' or 'height'. Whichever one you want to get.
   *
   * @return {number}
   *         The dimension that gets asked for or 0 if nothing was set
   *         for that dimension.
   */

/**
   * Get the current breakpoint class name.
   *
   * @return {string}
   *         The matching class name (e.g. `"vjs-layout-tiny"` or
   *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
   *         there is no current breakpoint.
   */

/**
   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
   * indicates the state of muted on initial playback.
   *
   * ```js
   *   var myPlayer = videojs('some-player-id');
   *
   *   myPlayer.src("http://www.example.com/path/to/video.mp4");
   *
   *   // get, should be false
   *   console.log(myPlayer.defaultMuted());
   *   // set to true
   *   myPlayer.defaultMuted(true);
   *   // get should be true
   *   console.log(myPlayer.defaultMuted());
   * ```
   *
   * @param {boolean} [defaultMuted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean|Player}
   *         - true if defaultMuted is on and getting
   *         - false if defaultMuted is off and getting
   *         - A reference to the current player when setting
   */

/**
   * Get the current duration of the HTML5 media element.
   *
   * @return {number}
   *         The duration of the media or 0 if there is no duration.
   */

/**
   * Get the current height of the HTML5 media element.
   *
   * @return {number}
   *         The height of the HTML5 media element.
   */

/**
   * Get the current muted state, or turn mute on or off
   *
   * @param {boolean} [muted]
   *        - true to mute
   *        - false to unmute
   *
   * @return {boolean}
   *         - true if mute is on and getting
   *         - false if mute is off and getting
   */

/**
   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
   * the HTML5 media element.
   *
   * @return {Tech~SourceObject}
   *         The current source object from the HTML5 tech. With a fallback to the
   *         elements source.
   */

/**
   * Get the current source type e.g. video/mp4
   * This can allow you rebuild the current source object so that you could load the same
   * source and tech later
   *
   * @return {string}
   *         The source MIME type
   */

/**
   * Get the current width of the HTML5 media element.
   *
   * @return {number}
   *         The width of the HTML5 media element.
   */

/**
   * Get the ending time of the last buffered time range
   * This is used in the progress bar to encapsulate all time ranges.
   *
   * @return {number}
   *         The end of the last buffered time range
   */

/**
   * Get the last volume, or set it
   *
   * @param  {number} [percentAsDecimal]
   *         The new last volume as a decimal percent:
   *         - 0 is muted/0%/off
   *         - 1.0 is 100%/full
   *         - 0.5 is half volume or 50%
   *
   * @return {number}
   *         the current value of lastVolume as a percent when getting
   *
   * @private
   */

/**
   * Get the live time window aka
   * the amount of time between seekable start and
   * live current time.
   *
   * @return {number}
   *         The amount of seconds that are seekable in
   *         the live video.
   */

/**
   * Get the percent (as a decimal) of the video that's been downloaded.
   * This method is not a part of the native HTML video API.
   *
   * @return {number}
   *         A decimal between 0 and 1 representing the percent
   *         that is buffered 0 being 0% and 1 being 100%
   */

/**
   * Get the percentage of media played so far.
   *
   * @return {number}
   *         The percentage of media played so far (0 to 1).
   */

/**
   * Get the percentage of the bar that should be filled
   * but clamped and rounded.
   *
   * @return {number}
   *         percentage filled that the slider is
   */

/**
   * Get the percentage of the current video that is currently buffered.
   *
   * @return {number}
   *         A number from 0 to 1 that represents the decimal percentage of the
   *         video that is buffered.
   *
   */

/**
   * Get the player's language dictionary
   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
   * Languages specified directly in the player options have precedence
   *
   * @return {Array}
   *         An array of of supported languages
   */

/**
   * Get the theme from the props, supporting both (outerTheme) => {}
   * as well as object notation
   */

/**
   * Get the value of `crossOrigin` from the tech.
   *
   * @abstract
   *
   * @see {Html5#crossOrigin}
   */

/**
   * Get the value of an attribute on the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to get the value from.
   *
   * @return {string|null}
   *         - The value of the attribute that was asked for.
   *         - Can be an empty string on some browsers if the attribute does not exist
   *           or has no value
   *         - Most browsers will return null if the attibute does not exist or has
   *           no value.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
   */

/**
   * Get the value of current time but allows for smooth scrubbing,
   * when player can't keep up.
   *
   * @return {number}
   *         The current time value to display
   *
   * @private
   */

/**
   * Get the version of the plugin that was set on <pluginName>.VERSION
   */

/**
   * Get the video buffer's buffered timerange.
   *
   * @return {TimeRange}
   *         The video buffer's buffered time range
   */

/**
   * Get this `Component`s ID
   *
   * @return {string}
   *         The id of this `Component`
   */

/**
   * Get video height
   *
   * @return {number}
   *         current video height
   */

/**
   * Get video width
   *
   * @return {number}
   *         current video width
   */

/**
   * Get whether playback rates is supported by the tech
   * and an array of playback rates exists
   *
   * @return {boolean}
   *         Whether changing playback rate is supported
   */

/**
   * Get/Set the aspect ratio
   *
   * @param {string} [ratio]
   *        Aspect ratio for player
   *
   * @return {string|undefined}
   *         returns the current aspect ratio when getting
   */

/**
   * Get/set if slider is horizontal for vertical
   *
   * @param {boolean} [bool]
   *        - true if slider is vertical,
   *        - false is horizontal
   *
   * @return {boolean}
   *         - true if slider is vertical, and getting
   *         - false if the slider is horizontal, and getting
   */

/**
   * Get/set if user is active
   *
   * @fires Player#useractive
   * @fires Player#userinactive
   *
   * @param {boolean} [bool]
   *        - true if the user is active
   *        - false if the user is inactive
   *
   * @return {boolean}
   *         The current value of userActive when getting
   */

/**
   * Gets a plugin's version, if available
   *
   * @param   {string} name
   *          The name of a plugin.
   *
   * @return {string}
   *          The plugin's version or an empty string.
   */

/**
   * Gets an object containing multiple Video.js plugins.
   *
   * @param   {Array} [names]
   *          If provided, should be an array of plugin names. Defaults to _all_
   *          plugin names.
   *
   * @return {Object|undefined}
   *          An object containing plugin(s) associated with their name(s) or
   *          `undefined` if no matching plugins exist).
   */

/**
   * Gets an object of text track settings (or null).
   *
   * @return {Object}
   *         An object with config values parsed from the DOM or localStorage.
   */

/**
   * Gets and sets init segment for the provided map
   *
   * @param {Object} map
   *        The map object representing the init segment to get or set
   * @param {boolean=} set
   *        If true, the init segment for the provided map should be saved
   * @return {Object}
   *         map object for desired init segment
   */

/**
   * Gets and sets key for the provided key
   *
   * @param {Object} key
   *        The key object representing the key to get or set
   * @param {boolean=} set
   *        If true, the key for the provided key should be saved
   * @return {Object}
   *         Key object for desired key
   */

/**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object|undefined}
   *         An object with supported media playback quality metrics or undefined if there
   *         is no tech or the tech does not support it.
   */

/**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   *
   * @abstract
   */

/**
   * Gets available media playback quality metrics as specified by the W3C's Media
   * Playback Quality API.
   *
   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
   *
   * @return {Object}
   *         An object with supported media playback quality metrics
   */

/**
   * Gets or sets the audio flag
   *
   * @param {boolean} bool
   *        - true signals that this is an audio player
   *        - false signals that this is not an audio player
   *
   * @return {boolean}
   *         The current value of isAudio when getting
   */

/**
   * Gets or sets the current default playback rate. A default playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
   * defaultPlaybackRate will only represent what the initial playbackRate of a video was, not
   * not the current playbackRate.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
   *
   * @param {number} [rate]
   *       New default playback rate to set.
   *
   * @return {number|Player}
   *         - The default playback rate when getting or 1.0
   *         - the player when setting
   */

/**
   * Gets or sets the current playback rate. A playback rate of
   * 1.0 represents normal speed and 0.5 would indicate half-speed
   * playback, for instance.
   *
   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
   *
   * @param {number} [rate]
   *       New playback rate to set.
   *
   * @return {number}
   *         The current playback rate when getting or 1.0
   */

/**
   * Gets or sets the modal content, which gets normalized before being
   * rendered into the DOM.
   *
   * This does not update the DOM or fill the modal, but it is called during
   * that process.
   *
   * @param  {Mixed} [value]
   *         If defined, sets the internal content value to be used on the
   *         next call(s) to `fill`. This value is normalized before being
   *         inserted. To "clear" the internal content value, pass `null`.
   *
   * @return {Mixed}
   *         The current content of the modal dialog
   */

/**
   * Gets tag settings
   *
   * @param {Element} tag
   *        The player tag
   *
   * @return {Object}
   *         An object containing all of the settings
   *         for a player tag
   */

/**
   * Gets the disposable that does nothing when disposed.
   */

/**
   * Gets the localized error message based on the `Player`s error.
   *
   * @return {string}
   *         The `Player`s error message localized or an empty string.
   */

/**
   * Gets the underlying disposable.
   * @returns {Any} the underlying disposable.
   */

/**
   * Given a manifest object that's either a master or media playlist, trigger the proper
   * events and set the state of the playlist loader.
   *
   * If the manifest object represents a master playlist, `loadedplaylist` will be
   * triggered to allow listeners to select a playlist. If none is selected, the loader
   * will default to the first one in the playlists array.
   *
   * If the manifest object represents a media playlist, `loadedplaylist` will be
   * triggered followed by `loadedmetadata`, as the only available playlist is loaded.
   *
   * In the case of a media playlist, a master playlist object wrapper with one playlist
   * will be created so that all logic can handle playlists in the same fashion (as an
   * assumed manifest object schema).
   *
   * @param {Object} manifest
   *        The parsed manifest object
   */

/**
   * Given a new manifest, update our pointer to it and update the srcUrl based on the location elements of the manifest, if they exist.
   *
   * @param {Object} updatedManifest the manifest to update to
   */

/**
   * Given an updated media playlist (whether it was loaded for the first time, or
   * refreshed for live playlists), update any relevant properties and state to reflect
   * changes in the media that should be accounted for (e.g., cues and duration).
   *
   * @param {Object} updatedPlaylist the updated media playlist object
   *
   * @private
   */

/**
   * Handle Tech Enter Picture-in-Picture.
   *
   * @param {EventTarget~Event} event
   *        the enterpictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#enterpictureinpicture
   */

/**
   * Handle Tech Fullscreen Change
   *
   * @param {EventTarget~Event} event
   *        the fullscreenchange event that triggered this function
   *
   * @param {Object} data
   *        the data that was sent with the event
   *
   * @private
   * @listens Tech#fullscreenchange
   * @fires Player#fullscreenchange
   */

/**
   * Handle Tech Leave Picture-in-Picture.
   *
   * @param {EventTarget~Event} event
   *        the leavepictureinpicture event that triggered this function
   *
   * @private
   * @listens Tech#leavepictureinpicture
   */

/**
   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */

/**
   * Handle `mousedown` or `touchstart` events on the `Slider`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   * @fires Slider#slideractive
   */

/**
   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousedown
   * @listens touchstart
   */

/**
   * Handle `mouseleave` for `MenuButton`.
   *
   * @param {EventTarget~Event} event
   *        The `mouseleave` event that caused this function to be called.
   *
   * @listens mouseleave
   */

/**
   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
   *
   * @param {EventTarget~Event} event
   *        `mousedown` or `touchstart` event that triggered this function
   *
   * @listens mousemove
   * @listens touchmove
   */

/**
   * Handle `mouseup` or `touchend` events on the `ProgressControl`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */

/**
   * Handle `mouseup` or `touchend` events on the `Slider`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   * @fires Slider#sliderinactive
   */

/**
   * Handle `mouseup` or `touchend` events on the `VolumeControl`.
   *
   * @param {EventTarget~Event} event
   *        `mouseup` or `touchend` event that triggered this function.
   *
   * @listens touchend
   * @listens mouseup
   */

/**
   * Handle a `keydown` event on a sub-menu. The listener for this is added in
   * the constructor.
   *
   * @param {EventTarget~Event} event
   *        Key press event
   *
   * @listens keydown
   */

/**
   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
   * arrow keys. This function will only be called when the slider has focus. See
   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
   *
   * @param {EventTarget~Event} event
   *        the `keydown` event that caused this function to run.
   *
   * @listens keydown
   */

/**
   * Handle a `keydown` event on this menu. This listener is added in the constructor.
   *
   * @param {EventTarget~Event} event
   *        A `keydown` event that happened on the menu.
   *
   * @listens keydown
   */

/**
   * Handle a `keyup` event on a `MenuButton`. The listener for this is added in
   * the constructor.
   *
   * @param {EventTarget~Event} event
   *        Key press event
   *
   * @listens keyup
   */

/**
   * Handle a click on a `MenuButton`.
   * See {@link ClickableComponent#handleClick} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * Handle a click on the media element to play/pause
   *
   * @param {EventTarget~Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#mouseup
   * @private
   */

/**
   * Handle a double-click on the media element to enter/exit fullscreen
   *
   * @param {EventTarget~Event} event
   *        the event that caused this function to trigger
   *
   * @listens Tech#dblclick
   * @private
   */

/**
   * Handle a tap on the media element. It will toggle the user
   * activity state, which hides and shows the controls.
   *
   * @listens Tech#tap
   * @private
   */

/**
   * Handle any {@link AudioTrack} change.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link AudioTrackList#change} event that caused this to run.
   *
   * @listens AudioTrackList#change
   */

/**
   * Handle autoplay string values, rather than the typical boolean
   * values that should be handled by the tech. Note that this is not
   * part of any specification. Valid values and what they do can be
   * found on the autoplay getter at Player#autoplay()
   */

/**
   * Handle mouse down on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */

/**
   * Handle mouse down on volume bar
   *
   * @param {EventTarget~Event} event
   *        The `mousedown` event that caused this to run.
   *
   * @listens mousedown
   */

/**
   * Handle mouse move on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this to run.
   *
   * @listens mousemove
   */

/**
   * Handle mouse up on seek bar
   *
   * @param {EventTarget~Event} event
   *        The `mouseup` event that caused this to run.
   *
   * @listens mouseup
   */

/**
   * Handle movement events on the {@link VolumeMenuButton}.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run.
   *
   * @listens mousemove
   */

/**
   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */

/**
   * Handle text track change
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run
   *
   * @listens TextTrackList#change
   */

/**
   * Handle text track change
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to run
   */

/**
   * Handle text track list change
   *
   * @param {EventTarget~Event} event
   *        The `change` event that caused this function to be called.
   *
   * @listens TextTrackList#change
   */

/**
   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
   * The `mousemove` and `touchmove` events will only only trigger this function during
   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
   * {@link Slider#handleMouseUp}.
   *
   * @param {EventTarget~Event} event
   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
   *        this function
   *
   * @listens mousemove
   * @listens touchmove
   */

/**
   * Handle the callback from the segmentRequest function and set the
   * associated SegmentLoader state and errors if necessary
   *
   * @private
   */

/**
   * Handle touch to end
   *
   * @param {EventTarget~Event} event
   *        the touchend event that triggered
   *        this function
   *
   * @listens Tech#touchend
   * @private
   */

/**
   * Handle touch to move
   *
   * @listens Tech#touchmove
   * @private
   */

/**
   * Handle touch to start
   *
   * @listens Tech#touchstart
   * @private
   */

/**
   * Handler for after client/server clock synchronization has happened. Sets up
   * xml refresh timer if specificed by the manifest.
   */

/**
   * Handler for situations when the tech fires a `waiting` event
   *
   * @return {boolean}
   *         True if an action (or none) was needed to correct the waiting. False if no
   *         checks passed
   * @private
   */

/**
   * Handler for situations when we determine the player is waiting.
   *
   * @private
   */

/**
   * Handles "statechanged" events on the plugin. No-op by default, override by
   * subclassing.
   *
   * @abstract
   * @param    {Event} e
   *           An event object provided by a "statechanged" event.
   *
   * @param    {Object} e.changes
   *           An object describing changes that occurred with the "statechanged"
   *           event.
   */

/**
   * Handles `keyup` event on the document or `keydown` event on the `VolumePanel`,
   * looking for ESC, which hides the `VolumeControl`.
   *
   * @param {EventTarget~Event} event
   *        The keypress that triggered this event.
   *
   * @listens keydown | keyup
   */

/**
   * Handles `keyup` events on the `VolumeControl`, looking for ESC, which closes
   * the volume panel and sets focus on `MuteToggle`.
   *
   * @param {EventTarget~Event} event
   *        The `keyup` event that caused this function to be called.
   *
   * @listens keyup
   */

/**
   * Handles enterpictureinpicture and leavepictureinpicture on the player and change control text accordingly.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#enterpictureinpicture} or {@link Player#leavepictureinpicture} event that caused this function to be
   *        called.
   *
   * @listens Player#enterpictureinpicture
   * @listens Player#leavepictureinpicture
   */

/**
   * Handles fullscreenchange on the player and change control text accordingly.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#fullscreenchange} event that caused this function to be
   *        called.
   *
   * @listens Player#fullscreenchange
   */

/**
   * Hide playback rate controls when they're no playback rate options to select
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#loadstart
   */

/**
   * Hide the `Component`s element if it is currently showing by adding the
   * 'vjs-hidden` class name to it.
   */

/**
   * If `muted` has changed on the player, update the control text
   * (`title` attribute on `vjs-mute-control` element and content of
   * `vjs-control-text` element).
   *
   * @private
   */

/**
   * If the `ModalDialog` is currently open or closed.
   *
   * @param  {boolean} [value]
   *         If given, it will open (`true`) or close (`false`) the modal.
   *
   * @return {boolean}
   *         the current open state of the modaldialog
   */

/**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */

/**
   * If the player is muted unmute it.
   */

/**
   * If we are currently behind the live edge, aka currentTime will be
   * behind on a seekableendchange
   *
   * @return {boolean}
   *         If we are behind the live edge
   */

/**
   * Ignore keys which are used by the menu, but pass any other ones up. See
   * {@link ClickableComponent#handleKeyDown} for instances where this is called.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   *
   * @listens keydown
   */

/**
   * Increase the size of the video to full screen
   * In some browsers, full screen is not supported natively, so it enters
   * "full window mode", where the video fills the browser window.
   * In browsers and devices that support native full screen, sometimes the
   * browser's default controls will be shown, and not the Video.js custom skin.
   * This includes most mobile devices (iOS, Android) and older versions of
   * Safari.
   *
   * @param  {Object} [fullscreenOptions]
   *         Override the player fullscreen options
   *
   * @fires Player#fullscreenchange
   */

/**
   * Increase volume level for keyboard users
   */

/**
   * Indicates which time ranges are buffered
   *
   * @return {TimeRange}
   *         TimeRange object representing the current buffered ranges
   */

/**
   * Initializes the quality levels and sets listeners to update them.
   *
   * @method setupQualityLevels_
   * @private
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Keep track of what time a seek starts, and listen for seeked
   * to find where a seek ends.
   */

/**
   * Keydown handler. Attached when modal is focused.
   *
   * @listens keydown
   */

/**
   * Listen for user activity based on timeout value
   *
   * @private
   */

/**
   * Listener for click events on slider, used to prevent clicks
   *   from bubbling up to parent elements like button menus.
   *
   * @param {Object} event
   *        Event that caused this object to run
   */

/**
   * Load/Create an instance of playback {@link Tech} including element
   * and API methods. Then append the `Tech` element in `Player` as a child.
   *
   * @param {string} techName
   *        name of the playback technology
   *
   * @param {string} source
   *        video source
   *
   * @private
   */

/**
   * Localize a string given the string in english.
   *
   * If tokens are provided, it'll try and run a simple token replacement on the provided string.
   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
   *
   * If a `defaultValue` is provided, it'll use that over `string`,
   * if a value isn't found in provided language files.
   * This is useful if you want to have a descriptive key for token replacement
   * but have a succinct localized string and not require `en.json` to be included.
   *
   * Currently, it is used for the progress bar timing.
   * ```js
   * {
   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
   * }
   * ```
   * It is then used like so:
   * ```js
   * this.localize('progress bar timing: currentTime={1} duration{2}',
   *               [this.player_.currentTime(), this.player_.duration()],
   *               '{1} of {2}');
   * ```
   *
   * Which outputs something like: `01:23 of 24:56`.
   *
   *
   * @param {string} string
   *        The string to localize and the key to lookup in the language files.
   * @param {string[]} [tokens]
   *        If the current item has token replacements, provide the tokens here.
   * @param {string} [defaultValue]
   *        Defaults to `string`. Can be a default value to use for token replacement
   *        if the lookup key is needed to be separate.
   *
   * @return {string}
   *         The localized string or if no localization exists the english string.
   */

/**
   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
   * class name to it. Used during fadeIn/fadeOut.
   *
   * @private
   */

/**
   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
   * log if `console.debug` is not available
   *
   * @param {Mixed[]} args
   *        One or more messages or objects that should be logged as debug.
   */

/**
   * Logs error messages. Similar to `console.error`.
   *
   * @param {Mixed[]} args
   *        One or more messages or objects that should be logged as an error
   */

/**
   * Logs warning messages. Similar to `console.warn`.
   *
   * @param {Mixed[]} args
   *        One or more messages or objects that should be logged as a warning.
   */

/**
   * Many components used to have a `handleKeyPress` method, which was poorly
   * named because it listened to a `keydown` event. This method name now
   * delegates to `handleKeyDown`. This means anyone calling `handleKeyPress`
   * will not see their method calls stop working.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to be called.
   */

/**
   * Mark the ServerStyleSheet as being fully emitted and manually GC it from the
   * StyleSheet singleton.
   */

/**
   * Modify the media element so that we can detect when
   * the source is changed. Fires `sourceset` just after the source has changed
   */

/**
   * Move more quickly fast forward for keyboard-only users
   */

/**
   * Move more quickly rewind for keyboard-only users
   */

/**
   * Move to next (lower) menu item for keyboard users.
   */

/**
   * Move to previous (higher) menu item for keyboard users.
   */

/**
   * Normally gets the length in time of the video in seconds;
   * in all but the rarest use cases an argument will NOT be passed to the method
   *
   * > **NOTE**: The video must have started loading before the duration can be
   * known, and in the case of Flash, may not be known until the video starts
   * playing.
   *
   * @fires Player#durationchange
   *
   * @param {number} [seconds]
   *        The duration of the video to set in seconds
   *
   * @return {number}
   *         - The duration of the video in seconds when getting
   */

/**
   * On click bring us as near to the live point as possible.
   * This requires that we wait for the next `live-seekable-change`
   * event which will happen every segment length seconds.
   */

/**
   * Once all the starting parameters have been specified, begin
   * operation. This method should only be invoked from the INIT
   * state.
   *
   * @private
   */

/**
   * Opens the modal.
   *
   * @fires ModalDialog#beforemodalopen
   * @fires ModalDialog#modalopen
   */

/**
   * Other <track> spec defined properties
   */

/**
   * Parse the input string and update the manifest object.
   *
   * @param {string} chunk a potentially incomplete portion of the manifest
   */

/**
   * Parses an additional line of input.
   *
   * @param {string} line a single line of an M3U8 file to parse
   */

/**
   * Parses the master xml for UTCTiming node to sync the client clock to the server
   * clock. If the UTCTiming node requires a HEAD or GET request, that request is made.
   *
   * @param {Function} done
   *        Function to call when clock sync has completed
   */

/**
   * Pass values to the playback tech
   *
   * @param {string} [method]
   *        the method to call
   *
   * @param {Object} arg
   *        the argument to pass
   *
   * @private
   */

/**
   * Pause all segment/playlist loaders
   */

/**
   * Pause the video playback
   *
   * @return {Player}
   *         A reference to the player object this function was called on
   */

/**
   * Periodically check current time to see if playback stopped
   *
   * @private
   */

/**
   * Player modifications to perform that must wait until `loadedmetadata`
   * has been triggered
   *
   * @private
   */

/**
   * Player waits for the tech to be ready
   *
   * @private
   */

/**
   * Polyfill the `progress` event for browsers that don't support it natively.
   *
   * @see {@link Tech#trackProgress}
   */

/**
   * Polyfill the `timeupdate` event for browsers that don't support it.
   *
   * @see {@link Tech#trackCurrentTime}
   */

/**
   * Populate the player using a {@link Player~MediaObject|MediaObject}.
   *
   * @param  {Player~MediaObject} media
   *         A media object.
   *
   * @param  {Function} ready
   *         A callback to be called when the player is ready.
   */

/**
   * Prevent the loader from fetching additional segments. If there
   * is a segment request outstanding, it will finish processing
   * before the loader halts. A segment loader can be unpaused by
   * calling load().
   */

/**
   * Prevents the segment loader from requesting segments we know contain no subtitles
   * by walking forward until we find the next segment that we don't know whether it is
   * empty or not.
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @return {Object}
   *         a segment info object that describes the current segment
   */

/**
   * Proxy all native track list events to our track lists if the browser we are playing
   * in supports that type of track list.
   *
   * @private
   */

/**
   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
   * `fullscreenchange` event.
   *
   * @private
   * @fires fullscreenchange
   * @listens webkitendfullscreen
   * @listens webkitbeginfullscreen
   * @listens webkitbeginfullscreen
   */

/**
   * Proxy native track list events for the given type to our track
   * lists if the browser we are playing in supports that type of track list.
   *
   * @param {string} name - Track type; values include 'audio', 'video', and 'text'
   * @private
   */

/**
   * Put the current `MenuButton` into a pressed state.
   */

/**
   * Queue an update to append an ArrayBuffer.
   *
   * @param {MediaObject} object containing audioBytes and/or videoBytes
   * @param {Function} done the function to call when done
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-appendBuffer-void-ArrayBuffer-data
   */

/**
   * Queue an update to remove a time range from the buffer.
   *
   * @param {number} start where to start the removal
   * @param {number} end where to end the removal
   * @param {Function} [done=noop] optional callback to be executed when the remove
   * operation is complete
   * @see http://www.w3.org/TR/media-source/#widl-SourceBuffer-remove-void-double-start-unrestricted-double-end
   */

/**
   * Queues up a callback to be passed to requestAnimationFrame (rAF), but
   * with a few extra bonuses:
   *
   * - Supports browsers that do not support rAF by falling back to
   *   {@link Component#setTimeout}.
   *
   * - The callback is turned into a {@link Component~GenericCallback} (i.e.
   *   bound to the component).
   *
   * - Automatic cancellation of the rAF callback is handled if the component
   *   is disposed before it is called.
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   *
   * @return {number}
   *         Returns an rAF ID that gets used to identify the timeout. It can
   *         also be used in {@link Component#cancelAnimationFrame} to cancel
   *         the animation frame callback.
   *
   * @listens Component#dispose
   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
   */

/**
   * Re-tune playback quality level for the current player
   * conditions without performing destructive actions, like
   * removing already buffered content
   *
   * @private
   */

/**
   * Re-tune playback quality level for the current player
   * conditions. This method will perform destructive actions like removing
   * already buffered content in order to readjust the currently active
   * playlist quickly. This is good for manual quality changes
   *
   * @private
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Records the current throughput of the decrypt, transmux, and append
   * portion of the semgment pipeline. `throughput.rate` is a the cumulative
   * moving average of the throughput. `throughput.count` is the number of
   * data points in the average.
   *
   * @private
   * @param {Object} segmentInfo the object returned by loadSegment
   */

/**
   * Refreshes the media playlist by re-parsing the master xml and updating playlist
   * references. If this is an alternate loader, the updated parsed manifest is retrieved
   * from the master loader.
   */

/**
   * Register a Video.js plugin.
   *
   * @param   {string} name
   *          The name of the plugin to be registered. Must be a string and
   *          must not match an existing plugin or a method on the `Player`
   *          prototype.
   *
   * @param   {Function} plugin
   *          A sub-class of `Plugin` or a function for basic plugins.
   *
   * @return {Function}
   *          For advanced plugins, a factory function for that plugin. For
   *          basic plugins, a wrapper function that initializes the plugin.
   */

/**
   * Register a `Component` with `videojs` given the name and the component.
   *
   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
   *         should be registered using {@link Tech.registerTech} or
   *         {@link videojs:videojs.registerTech}.
   *
   * > NOTE: This function can also be seen on videojs as
   *         {@link videojs:videojs.registerComponent}.
   *
   * @param {string} name
   *        The name of the `Component` to register.
   *
   * @param {Component} ComponentToRegister
   *        The `Component` class to register.
   *
   * @return {Component}
   *         The `Component` that was registered.
   */

/**
   * Register a source handler
   *
   * @param {Function} handler
   *        The source handler class
   *
   * @param {number} [index]
   *        Register it at the following index
   */

/**
   * Register event handlers on the master playlist loader. A helper
   * function for construction time.
   *
   * @private
   */

/**
   * Register event handlers on the segment loaders. A helper function
   * for construction time.
   *
   * @private
   */

/**
   * Registers a `Tech` into a shared list for videojs.
   *
   * @param {string} name
   *        Name of the `Tech` to register.
   *
   * @param {Object} tech
   *        The `Tech` class to register.
   */

/**
   * Remove a CSS class name from the `Component`s element.
   *
   * @param {string} classToRemove
   *        CSS class name to remove
   */

/**
   * Remove a child `Component` from this `Component`s list of children. Also removes
   * the child `Component`s element from this `Component`s element.
   *
   * @param {Component} component
   *        The child `Component` to remove.
   */

/**
   * Remove a cue from our internal list
   *
   * @param {TextTrack~Cue} removeCue
   *        The cue to remove from our internal list
   */

/**
   * Remove a listener for a specified event type.
   *
   * @param {string} type the event name
   * @param {Function} listener  a function previously registered for this
   * type of event through `on`
   * @return {boolean} if we could turn it off or not
   */

/**
   * Remove a remote text track from the remote `TextTrackList`.
   *
   * @param {TextTrack} track
   *        `TextTrack` to remove from the `TextTrackList`
   */

/**
   * Remove a remote {@link TextTrack} from the respective
   * {@link TextTrackList} and {@link HtmlTrackElementList}.
   *
   * @param {Object} track
   *        Remote {@link TextTrack} to remove
   *
   * @return {undefined}
   *         does not return anything
   */

/**
   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
   *
   * @param {HtmlTrackElement} trackElement
   *        The track element to remove from the list.
   *
   * @private
   */

/**
   * Remove a {@link Track} from the `TrackList`
   *
   * @param {Track} rtrack
   *        The audio, video, or text track to remove from the list.
   *
   * @fires TrackList#removetrack
   */

/**
   * Remove an attribute from the `Component`s element.
   *
   * @param {string} attribute
   *        Name of the attribute to remove.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
   */

/**
   * Remove any TextTracks added via addRemoteTextTrack that are
   * flagged for automatic garbage collection
   */

/**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   * @param {Function} [done] - an optional callback to be executed when the remove
   * operation is complete
   */

/**
   * Remove any data in the source buffer between start and end times
   *
   * @param {number} start - the start time of the region to remove from the buffer
   * @param {number} end - the end time of the region to remove from the buffer
   */

/**
   * Remove event listeners from the {@link MenuItem}.
   *
   * @param {Object} component
   *        The instance of the `MenuItem` to remove listeners.
   *
   */

/**
   * Remove remote `TextTrack` from `TextTrackList` object
   *
   * @param {TextTrack} track
   *        `TextTrack` object to remove
   */

/**
   * Remove the focus from the actual button, not this element
   */

/**
   * Remove the focus from this component
   */

/**
   * Remove the listeners used for click and tap controls. This is needed for
   * toggling to controls disabled, where a tap/touch should do nothing.
   *
   * @private
   */

/**
   * Removes listener(s) from event(s) on an evented object.
   *
   * @param  {string|Array|Element|Object} [targetOrType]
   *         If this is a string or array, it represents the event type(s).
   *
   *         Another evented object can be passed here instead, in which case
   *         ALL 3 arguments are _required_.
   *
   * @param  {string|Array|Function} [typeOrListener]
   *         If the first argument was a string or array, this may be the
   *         listener function. Otherwise, this is a string or array of event
   *         type(s).
   *
   * @param  {Function} [listener]
   *         If the first argument was another evented object, this will be
   *         the listener function; otherwise, _all_ listeners bound to the
   *         event type(s) will be removed.
   */

/**
   * Removes the current breakpoint.
   *
   * @private
   */

/**
   * Removes vjs-slider-active class to the VolumePanel
   *
   * @listens VolumeControl#sliderinactive
   * @private
   */

/**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * Report user activity
   *
   * @param {Object} event
   *        Event object
   */

/**
   * Represents an PlaybackWatcher object.
   *
   * @class
   * @param {Object} options an object that includes the tech and settings
   */

/**
   * Request an animation frame, but only one named animation
   * frame will be queued. Another will never be added until
   * the previous one finishes.
   *
   * @param {string} name
   *        The name to give this requestAnimationFrame
   *
   * @param  {Component~GenericCallback} fn
   *         A function that will be bound to this component and executed just
   *         before the browser's next repaint.
   */

/**
   * Request that the `HTML5` Tech enter fullscreen.
   */

/**
   * Request that the `HTML5` Tech exit fullscreen.
   */

/**
   * Reset Control Bar's UI by calling sub-methods that reset
   * all of Control Bar's components
   */

/**
   * Reset Playback ratio
   */

/**
   * Reset Volume bar
   */

/**
   * Reset stalled download stats for a specific type of loader
   *
   * @param {string} type
   *        The segment loader type to check.
   *
   * @listens SegmentLoader#playlistupdate
   * @listens Tech#seeking
   * @listens Tech#seeked
   */

/**
   * Reset tech's progress so progress bar is reset in the UI
   */

/**
   * Reset the player. Loads the first tech in the techOrder,
   * removes all the text tracks in the existing `tech`,
   * and calls `reset` on the `tech`.
   */

/**
   * Reset the tech by removing all sources and then calling
   * {@link Html5.resetMediaElement}.
   */

/**
   * Reset the tech, which will removes all sources and reset the internal readyState.
   *
   * @abstract
   */

/**
   * Resets the internal cache object.
   *
   * Using this function outside the player constructor or reset method may
   * have unintended side-effects.
   *
   * @private
   */

/**
   * Restore texttrack settings from localStorage
   */

/**
   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
   * > Note: This is not consistent between browsers. See #1351
   *
   * @fires Player#canplay
   * @listens Tech#canplay
   * @private
   */

/**
   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
   *
   * @fires Player#canplaythrough
   * @listens Tech#canplaythrough
   * @private
   */

/**
   * Retrigger the `ended` event that was triggered by the {@link Tech}.
   *
   * @fires Player#ended
   * @listens Tech#ended
   * @private
   */

/**
   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
   *
   * @fires Player#firstplay
   * @listens Tech#firstplay
   * @deprecated As of 6.0 firstplay event is deprecated.
   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
   * @private
   */

/**
   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
   * function will also trigger {@link Player#firstplay} if it is the first loadstart
   * for a video.
   *
   * @fires Player#loadstart
   * @fires Player#firstplay
   * @listens Tech#loadstart
   * @private
   */

/**
   * Retrigger the `pause` event that was triggered by the {@link Tech}.
   *
   * @fires Player#pause
   * @listens Tech#pause
   * @private
   */

/**
   * Retrigger the `playing` event that was triggered by the {@link Tech}.
   *
   * @fires Player#playing
   * @listens Tech#playing
   * @private
   */

/**
   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
   *
   * If there were any events queued while the playback rate was zero, fire
   * those events now.
   *
   * @private
   * @method Player#handleTechRateChange_
   * @fires Player#ratechange
   * @listens Tech#ratechange
   */

/**
   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeked
   * @listens Tech#seeked
   * @private
   */

/**
   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
   *
   * @fires Player#seeking
   * @listens Tech#seeking
   * @private
   */

/**
   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
   *
   * @fires Player#sourceset
   * @listens Tech#sourceset
   * @private
   */

/**
   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
   *
   * @fires Player#textdata
   * @listens Tech#textdata
   * @private
   */

/**
   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
   *
   * @fires Player#waiting
   * @listens Tech#waiting
   * @private
   */

/**
   * Return a reference to the current {@link Tech}.
   * It will print a warning by default about the danger of using the tech directly
   * but any argument that is passed in will silence the warning.
   *
   * @param {*} [safety]
   *        Anything passed in to silence the warning
   *
   * @return {Tech}
   *         The Tech
   */

/**
   * Return the `Component`s DOM element. This is where children get inserted.
   * This will usually be the the same as the element returned in {@link Component#el}.
   *
   * @return {Element}
   *         The content element for this `Component`.
   */

/**
   * Return the video to its normal size after having been in full screen mode
   *
   * @fires Player#fullscreenchange
   */

/**
   * Return the {@link Player} that the `Component` has attached to.
   *
   * @return {Player}
   *         The player that this `Component` has attached to.
   */

/**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning (or error if the playlist is blacklisted) to
   *         console and switches back to default audio track.
   * @function onError.AUDIO
   */

/**
   * Returns a function to be called when a SegmentLoader or PlaylistLoader encounters
   * an error.
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Error handler. Logs warning to console and disables the active subtitle track
   * @function onError.SUBTITLES
   */

/**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.AUDIO
   */

/**
   * Returns a function used to get the active track of type provided
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @return {Function}
   *         Function that returns the active media track for the provided type. Returns
   *         null if no track is active
   * @function activeTrack.SUBTITLES
   */

/**
   * Returns all of the current source objects.
   *
   * @return {Tech~SourceObject[]}
   *         The current source objects
   */

/**
   * Returns an array containing everything that has been logged to the history.
   *
   * This array is a shallow clone of the internal history record. However, its
   * contents are _not_ cloned; so, mutating objects inside this array will
   * mutate them in history.
   *
   * @return {Array}
   */

/**
   * Returns the `TimeRange`s that have been played through for the current source.
   *
   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
   *         It only checks whether the source has played at all or not.
   *
   * @return {TimeRange}
   *         - A single time range if this video has played
   *         - An empty set of ranges if not.
   */

/**
   * Returns the child `Component` with the given `id`.
   *
   * @param {string} id
   *        The id of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `id` or undefined.
   */

/**
   * Returns the child `Component` with the given `name`.
   *
   * @param {string} name
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The child `Component` with the given `name` or undefined.
   */

/**
   * Returns the current live window range of available segments for a dynamic MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */

/**
   * Returns the current source object.
   *
   * @return {Tech~SourceObject}
   *         The current source object
   */

/**
   * Returns the current value of the player volume as a percentage
   *
   * @private
   */

/**
   * Returns the descendant `Component` following the givent
   * descendant `names`. For instance ['foo', 'bar', 'baz'] would
   * try to get 'foo' on the current component, 'bar' on the 'foo'
   * component and 'baz' on the 'bar' component and return undefined
   * if any of those don't exist.
   *
   * @param {...string[]|...string} names
   *        The name of the child `Component` to get.
   *
   * @return {Component|undefined}
   *         The descendant `Component` following the given descendant
   *         `names` or undefined.
   */

/**
   * Returns the description string for this modal. Primarily used for
   * accessibility.
   *
   * @return {string}
   *         The localized or raw description of this modal.
   */

/**
   * Returns the entire range of available segments for a static MPD
   *
   * @param {Object} attributes
   *        Inheritied MPD attributes
   * @return {{ start: number, end: number }}
   *         The start and end numbers for available segments
   */

/**
   * Returns the first source handler that supports the source.
   *
   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
   *
   * @param {Tech~SourceObject} source
   *        The source object
   *
   * @param {Object} options
   *        The options passed to the tech
   *
   * @return {SourceHandler|null}
   *          The first source handler that supports the source or null if
   *          no SourceHandler supports the source
   */

/**
   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
   * Can be used in conjunction with `currentType` to assist in rebuilding the current source object.
   *
   * @return {string}
   *         The current source
   */

/**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

/**
   * Returns the label string for this modal. Primarily used for accessibility.
   *
   * @return {string}
   *         the localized or raw label of this modal.
   */

/**
   * Returns true if all configuration required for loading is present, otherwise false.
   *
   * @return {boolean} True if the all configuration is ready for loading
   * @private
   */

/**
   * Returns whether
   */

/**
   * Returns whether or not the user is "scrubbing". Scrubbing is
   * when the user has clicked the progress bar handle and is
   * dragging it along the progress bar.
   *
   * @param {boolean} [isScrubbing]
   *        whether the user is or is not scrubbing
   *
   * @return {boolean}
   *         The value of scrubbing when getting
   */

/**
   * Returns whether the segment loader is fetching additional
   * segments when given the opportunity. This property can be
   * modified through calls to pause() and load().
   */

/**
   * Runs each sync-point strategy and returns a list of sync-points returned by the
   * strategies
   *
   * @private
   * @param {Playlist} playlist
   *        The playlist that needs a sync-point
   * @param {number} duration
   *        Duration of the MediaSource (Infinity if playing a live source)
   * @param {number} currentTimeline
   *        The last timeline from which a segment was loaded
   * @return {Array}
   *          A list of sync-point objects
   */

/**
   * Save any meta-data present on the segments when segments leave
   * the live window to the playlist to allow for synchronization at the
   * playlist level later.
   *
   * @param {Playlist} oldPlaylist - The previous active playlist
   * @param {Playlist} newPlaylist - The updated and most current playlist
   */

/**
   * Save text track settings to localStorage
   */

/**
   * Save the mapping from playlist's ProgramDateTime to display. This should
   * only ever happen once at the start of playback.
   *
   * @param {Playlist} playlist - The currently active playlist
   */

/**
   * Seek to the latest media position if this is a live video and the
   * player and video are loaded and initialized.
   */

/**
   * Seek to the live edge if we are behind the live edge
   */

/**
   * Select source based on tech-order or source-order
   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
   * defaults to tech-order selection
   *
   * @param {Array} sources
   *        The sources for a media asset
   *
   * @return {Object|boolean}
   *         Object of source and tech order or false
   */

/**
   * Selects the sync-point nearest the specified target
   *
   * @private
   * @param {Array} syncPoints
   *        List of sync-points to select from
   * @param {Object} target
   *        Object specifying the property and value we are targeting
   * @param {string} target.key
   *        Specifies the property to target. Must be either 'time' or 'segmentIndex'
   * @param {number} target.value
   *        The value to target for the specified key.
   * @return {Object}
   *          The sync-point nearest the target
   */

/**
   * Sends request to refresh the master xml and updates the parsed master manifest
   * TODO: Does the client offset need to be recalculated when the xml is refreshed?
   */

/**
   * Set a subtitle track on the segment loader to add subtitles to
   *
   * @param {TextTrack=} track
   *        The text track to add loaded subtitles to
   * @return {TextTrack}
   *        Returns the subtitles track
   */

/**
   * Set both the width and height of the `Component` element at the same time.
   *
   * @param  {number|string} width
   *         Width to set the `Component`s element to.
   *
   * @param  {number|string} height
   *         Height to set the `Component`s element to.
   */

/**
   * Set controls attribute for the HTML5 media Element.
   *
   * @param {string} val
   *        Value to set the controls attribute to
   */

/**
   * Set current time for the `HTML5` tech.
   *
   * @param {number} seconds
   *        Set the current time of the media to this.
   */

/**
   * Set debug mode to enable/disable logs at info level.
   *
   * @param {boolean} enabled
   * @fires Player#debugon
   * @fires Player#debugoff
   */

/**
   * Set focus on a {@link MenuItem} in the `Menu`.
   *
   * @param {Object|string} [item=0]
   *        Index of child item set focus on.
   */

/**
   * Set or get the current MediaError
   *
   * @fires Player#error
   *
   * @param  {MediaError|string|number} [err]
   *         A MediaError or a string/number to be turned
   *         into a MediaError
   *
   * @return {MediaError|null}
   *         The current MediaError when getting (or null)
   */

/**
   * Set or unset the playsinline attribute.
   * Playsinline tells the browser that non-fullscreen playback is preferred.
   *
   * @param {boolean} [value]
   *        - true means that we should try to play inline by default
   *        - false means that we should use the browser's default playback mode,
   *          which in most cases is inline. iOS Safari is a notable exception
   *          and plays fullscreen by default.
   *
   * @return {string|Player}
   *         - the current value of playsinline
   *         - the player when setting
   *
   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
   */

/**
   * Set the currently selected track for the chapters button.
   *
   * @param {TextTrack} track
   *        The new track to select. Nothing will change if this is the currently selected
   *        track.
   */

/**
   * Set the focus to the actual button, not to this element
   */

/**
   * Set the focus to this component
   */

/**
   * Set the source object on the tech, returns a boolean that indicates whether
   * there is a tech that can play the source or not
   *
   * @param {Tech~SourceObject} source
   *        The source object to set on the Tech
   *
   * @return {boolean}
   *         - True if there is no Tech to playback this source
   *         - False otherwise
   *
   * @private
   */

/**
   * Set the source of the `PosterImage` depending on the display method.
   *
   * @param {string} url
   *        The URL to the source for the `PosterImage`.
   */

/**
   * Set the source on the player element, play, and seek if necessary
   *
   * @param {Object} sourceObj An object specifying the source url and mime-type to play
   * @private
   */

/**
   * Set the state for this menu item as selected or not.
   *
   * @param {boolean} selected
   *        if the menu item is selected or not
   */

/**
   * Set the state of an object by mutating its
   * {@link module:stateful~StatefulMixin.state|state} object in place.
   *
   * @fires   module:stateful~StatefulMixin#statechanged
   * @param   {Object|Function} stateUpdates
   *          A new set of properties to shallow-merge into the plugin state.
   *          Can be a plain object or a function returning a plain object.
   *
   * @return {Object|undefined}
   *          An object containing changes that occurred. If no changes
   *          occurred, returns `undefined`.
   */

/**
   * Set the value of `crossOrigin` on the tech.
   *
   * @abstract
   *
   * @param {string} crossOrigin the crossOrigin value
   * @see {Html5#setCrossOrigin}
   */

/**
   * Set the value of an attribute on the `Component`'s element
   *
   * @param {string} attribute
   *        Name of the attribute to set.
   *
   * @param {string} value
   *        Value to set the attribute to.
   *
   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
   */

/**
   * Set up click and touch listeners for the playback element
   *
   * - On desktops: a click on the video itself will toggle playback
   * - On mobile devices: a click on the video toggles controls
   *   which is done by toggling the user state between active and
   *   inactive
   * - A tap can signal that a user has become active or has become inactive
   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
   *   quick tap should hide them again (signaling the user is in an inactive
   *   viewing state)
   * - In addition to this, we still want the user to be considered inactive after
   *   a few seconds of inactivity.
   *
   * > Note: the only part of iOS interaction we can't mimic with this setup
   * is a touch and hold on the video element counting as activity in order to
   * keep the controls showing, but that shouldn't be an issue. A touch and hold
   * on any controls will still keep the user active
   *
   * @private
   */

/**
   * Set whether we are scrubbing or not
   *
   * @abstract
   *
   * @see {Html5#setScrubbing}
   */

/**
   * Set whether we are scrubbing or not.
   * This is used to decide whether we should use `fastSeek` or not.
   * `fastSeek` is used to provide trick play on Safari browsers.
   *
   * @param {boolean} isScrubbing
   *                  - true for we are currently scrubbing
   *                  - false for we are no longer scrubbing
   */

/**
   * Set/get the timestampoffset on the audio SourceBuffer
   *
   * @return {number} the timestamp offset
   */

/**
   * Set/get the timestampoffset on the video SourceBuffer
   *
   * @return {number} the timestamp offset
   */

/**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */

/**
   * Sets all `<select>` elements to their default values.
   */

/**
   * Sets text track settings from an object of values.
   *
   * @param {Object} values
   *        An object with config values parsed from the DOM or localStorage.
   */

/**
   * Sets the event handlers
   *
   * @private
   */

/**
   * Sets up an interval function to track current time and trigger `timeupdate` every
   * 250 milliseconds.
   *
   * @listens Tech#play
   * @triggers Tech#timeupdate
   */

/**
   * Setup PlaylistLoaders and AudioTracks for the audio groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.AUDIO
   */

/**
   * Setup PlaylistLoaders and TextTracks for the subtitle groups
   *
   * @param {string} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize.SUBTITLES
   */

/**
   * Setup TextTracks for the closed-caption groups
   *
   * @param {String} type
   *        MediaGroup type
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function initialize['CLOSED-CAPTIONS']
   */

/**
   * Setup event listeners for audio playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.AUDIO
   */

/**
   * Setup event listeners for subtitle playlist loader
   *
   * @param {string} type
   *        MediaGroup type
   * @param {PlaylistLoader|null} playlistLoader
   *        PlaylistLoader to register listeners on
   * @param {Object} settings
   *        Object containing required information for media groups
   * @function setupListeners.SUBTITLES
   */

/**
   * Shim implementation specific properties. These properties are not in
   * the spec.
   */

/**
   * Show the `Component`s element if it is hidden by removing the
   * 'vjs-hidden' class name from it.
   */

/**
   * Since there isn't a src property on the media element, source elements will be used for
   * implementing the source selection algorithm. This happens asynchronously and
   * for most cases were there is more than one source we cannot tell what source will
   * be loaded, without re-implementing the source selection algorithm. At this time we are not
   * going to do that. There are three special cases that we do handle here though:
   *
   * 1. If there are no sources, do not fire `sourceset`.
   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
   * 3. If there is more than one `<source>` but all of them have the same `src` url.
   *    That will be our src.
   */

/**
   * Some techs (e.g. YouTube) can provide a poster source in an
   * asynchronous way. We want the poster component to use this
   * poster source so that it covers up the tech's controls.
   * (YouTube's play button). However we only want to use this
   * source if the player user hasn't set a poster through
   * the normal APIs.
   *
   * @fires Player#posterchange
   * @listens Tech#posterchange
   * @private
   */

/**
   * Specifies the MPD start time, in @timescale units, the first Segment in the series
   * starts relative to the beginning of the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed time
   */

/**
   * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.
   * Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */

/**
   * Specifies the Segment availability start time for all Segments referred to in this
   * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability
   * time. Format is a date string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The date as seconds from unix epoch
   */

/**
   * Specifies the Segment duration, in units of the value of the @timescale.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */

/**
   * Specifies the bitrate of the representation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed bandwidth
   */

/**
   * Specifies the constant approximate Segment duration
   * NOTE: The <Period> element also contains an @duration attribute. This duration
   *       specifies the duration of the Period. This attribute is currently not
   *       supported by the rest of the parser, however we still check for it to prevent
   *       errors.
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed duration
   */

/**
   * Specifies the duration of the entire Media Presentation. Format is a duration string
   * as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */

/**
   * Specifies the duration of the smallest time shifting buffer for any Representation
   * in the MPD. Format is a duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */

/**
   * Specifies the height of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed height
   */

/**
   * Specifies the number of the first Media Segment in this Representation in the Period
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */

/**
   * Specifies the repeat count of the number of following contiguous Segments with the
   * same duration expressed by the value of @d
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed number
   */

/**
   * Specifies the smallest period between potential changes to the MPD. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */

/**
   * Specifies the suggested presentation delay. Format is a
   * duration string as specified in ISO 8601
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The duration in seconds
   */

/**
   * Specifies the timescale in units per seconds
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The aprsed timescale
   */

/**
   * Specifies the width of the visual presentation
   *
   * @param {string} value
   *        value of attribute as a string
   * @return {number}
   *         The parsed width
   */

/**
   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
   * `timeupdate` event is no longer triggered.
   *
   * @listens {Tech#pause}
   */

/**
   * Stop tracking, and set all internal variables to
   * their initial value.
   */

/**
   * Style {@Link TextTrack} activeCues according to {@Link TextTrackSettings}.
   *
   * @param {TextTrack} track
   *        Text track object containing active cues to style.
   */

/**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */

/**
   * Take the current `MenuButton` out of a pressed state.
   */

/**
   * The actual logic for play, takes a callback that will be resolved on the
   * return value of play. This allows us to resolve to the play promise if there
   * is one on modern browsers.
   *
   * @private
   * @param {Function} [callback]
   *        The callback that should be called when the techs play is actually called
   */

/**
   * The number of seconds that have occured after seekable end
   * changed. This will be reset to 0 once seekable end changes.
   *
   * @return {number}
   *         Seconds past the current seekable end
   */

/**
   * The player's language code
   * NOTE: The language should be set in the player options if you want the
   * the controls to be built with a specific language. Changing the language
   * later will not update controls text.
   *
   * @param {string} [code]
   *        the language code to set the player to
   *
   * @return {string}
   *         The current language code when getting
   */

/**
   * The purpose of this function is to emulate the "waiting" event on
   * browsers that do not emit it when they are waiting for more
   * data to continue playback
   *
   * @private
   */

/**
   * The segment loader has no recourse except to fetch a segment in the
   * current playlist and use the internal timestamps in that segment to
   * generate a syncPoint. This function returns a good candidate index
   * for that process.
   *
   * @param {Object} playlist - the playlist object to look for a
   * @return {number} An index of a segment from the playlist to load
   */

/**
   * These functions will be run when if play is terminated. If play
   * runPlayCallbacks_ is run these function will not be run. This allows us
   * to differenciate between a terminated play and an actual call to play.
   */

/**
   * This ensures uniqueness if two components happen to share
   * the same displayName.
   */

/**
   * This function reports user activity whenever touch events happen. This can get
   * turned off by any sub-components that wants touch events to act another way.
   *
   * Report user touch activity when touch events occur. User activity gets used to
   * determine when controls should show/hide. It is simple when it comes to mouse
   * events, because any mouse event should show the controls. So we capture mouse
   * events that bubble up to the player and report activity when that happens.
   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
   * controls. So touch events can't help us at the player level either.
   *
   * User activity gets checked asynchronously. So what could happen is a tap event
   * on the video turns the controls off. Then the `touchend` event bubbles up to
   * the player. Which, if it reported user activity, would turn the controls right
   * back on. We also don't want to completely block touch events from bubbling up.
   * Furthermore a `touchmove` event and anything other than a tap, should not turn
   * controls back on.
   *
   * @listens Component#touchstart
   * @listens Component#touchmove
   * @listens Component#touchend
   * @listens Component#touchcancel
   */

/**
   * This function updates the play progress bar and accessibility
   * attributes to whatever is passed in.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `ended` event that caused this to run.
   *
   * @listens Player#timeupdate
   *
   * @return {number}
   *          The current percent at a number from 0-1
   */

/**
   * This gets called once after the video has ended and the user seeks so that
   * we can change the replay button back to a play button.
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#seeked
   */

/**
   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when a `Button` has focus and `keydown` is triggered via a key
   * press.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to get called.
   *
   * @listens keydown
   */

/**
   * This gets called when a `CloseButton` gets clicked. See
   * {@link ClickableComponent#handleClick} for more information on when
   * this will be triggered
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   * @fires CloseButton#close
   */

/**
   * This gets called when a `VolumePanel` gains hover via a `mouseout` event.
   * Turns on listening for `mouseout` event. When they happen it
   * calls `this.handleMouseOut`.
   *
   * @param {EventTarget~Event} event
   *        The `mouseout` event that caused this function to be called.
   *
   * @listens mouseout
   */

/**
   * This gets called when a `VolumePanel` gains hover via a `mouseover` event.
   * Turns on listening for `mouseover` event. When they happen it
   * calls `this.handleMouseOver`.
   *
   * @param {EventTarget~Event} event
   *        The `mouseover` event that caused this function to be called.
   *
   * @listens mouseover
   */

/**
   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
   * for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `FullscreenToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `MuteToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `PictureInPictureToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `PlayToggle` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `PlaybackRateMenuButton` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} [event]
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This gets called when an `TextTrackMenuItem` is "clicked". See
   * {@link ClickableComponent} for more detailed information on what a click can be.
   *
   * @param {EventTarget~Event} event
   *        The `keydown`, `tap`, or `click` event that caused this function to be
   *        called.
   *
   * @listens tap
   * @listens click
   */

/**
   * This is used to trigger a `progress` event when the buffered percent changes. It
   * sets an interval function that will be called every 500 milliseconds to check if the
   * buffer end percent has changed.
   *
   * > This function is called by {@link Tech#manualProgressOn}
   *
   * @param {EventTarget~Event} event
   *        The `ready` event that caused this to run.
   *
   * @listens Tech#ready
   * @fires Tech#progress
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * This method name now delegates to `handleSubmenuKeyDown`. This means
   * anyone calling `handleSubmenuKeyPress` will not see their method calls
   * stop working.
   *
   * @param {EventTarget~Event} event
   *        The event that caused this function to be called.
   */

/**
   * This method will be called indirectly when the component has been added
   * before the component adds to the new menu instance by `addItem`.
   * In this case, the original menu instance will remove the component
   * by calling `removeChild`.
   *
   * @param {Object} component
   *        The instance of the `MenuItem`
   */

/**
   * This will be triggered if the loadstart event has already fired, before videojs was
   * ready. Two known examples of when this can happen are:
   * 1. If we're loading the playback object after it has started loading
   * 2. The media is already playing the (often with autoplay on) then
   *
   * This function will fire another loadstart so that videojs can catchup.
   *
   * @fires Tech#loadstart
   *
   * @return {undefined}
   *         returns nothing.
   */

/**
   * Timer callback. If playback still has not proceeded, then we seek
   * to the start of the next buffered region.
   *
   * @private
   */

/**
   * To be filled out in the child class, should update the displayed time
   * in accordance with the fact that the current time has changed.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate`  event that caused this to run.
   *
   * @listens Player#timeupdate
   */

/**
   * Toggle native controls on/off. Native controls are the controls built into
   * devices (e.g. default iPhone controls), Flash, or other techs
   * (e.g. Vimeo Controls)
   * **This should only be set by the current tech, because only the tech knows
   * if it can support native controls**
   *
   * @fires Player#usingnativecontrols
   * @fires Player#usingcustomcontrols
   *
   * @param {boolean} [bool]
   *        - true to turn native controls on
   *        - false to turn native controls off
   *
   * @return {boolean}
   *         The current value of native controls when getting
   */

/**
   * Toggles the playback state of the player
   * This gets called when enter or space is used on the seekbar
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called
   *
   */

/**
   * Trigger all the ready listeners for this `Component`.
   *
   * @fires Component#ready
   */

/**
   * Trigger an event of the specified type on this stream. Any additional
   * arguments to this function are passed as parameters to event listeners.
   *
   * @param {string} type the event name
   */

/**
   * Triggers an event on the plugin object and overrides
   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
   *
   * @param   {string|Object} event
   *          An event type or an object with a type property.
   *
   * @param   {Object} [hash={}]
   *          Additional data hash to merge with a
   *          {@link Plugin~PluginEventHash|PluginEventHash}.
   *
   * @return {boolean}
   *          Whether or not default was prevented.
   */

/**
   * Turn display of {@link TextTrack}'s from the current state into the other state.
   * There are only two states:
   * - 'shown'
   * - 'hidden'
   *
   * @listens Player#loadstart
   */

/**
   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
   *
   * @fires Component#dispose
   */

/**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   * Stop manually tracking progress events by clearing the interval that was set in
   * {@link Tech#trackProgress}.
   */

/**
   * Turn off the polyfill for `progress` events that was created in
   * {@link Tech#manualProgressOn}
   */

/**
   * Turn off the polyfill for `timeupdate` events that was created in
   * {@link Tech#manualTimeUpdatesOn}
   */

/**
   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
   * {@link TextTrackList} events.
   *
   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
   *
   * @fires Tech#audiotrackchange
   * @fires Tech#videotrackchange
   * @fires Tech#texttrackchange
   */

/**
   * Unload and dispose of the current playback {@link Tech}.
   *
   * @private
   */

/**
   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
   * class name from it. Used during fadeIn/fadeOut.
   *
   * @private
   */

/**
   * Update ARIA accessibility attributes
   *
   * @param {EventTarget~Event} [event]
   *        The `volumechange` event that caused this function to run.
   *
   * @listens Player#volumechange
   */

/**
   * Update button label when rate changed
   *
   * @param {EventTarget~Event} [event]
   *        The event that caused this function to run.
   *
   * @listens Player#ratechange
   */

/**
   * Update chapter menu item
   *
   * @param {EventTarget~Event} [event]
   *        The `cuechange` event that caused this function to run.
   *
   * @listens TextTrack#cuechange
   */

/**
   * Update current time display
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` event that caused this function to run.
   *
   * @listens Player#timeupdate
   */

/**
   * Update display of text track settings
   */

/**
   * Update duration time display.
   *
   * @param {EventTarget~Event} [event]
   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
   *        this function to be called.
   *
   * @listens Player#durationchange
   * @listens Player#timeupdate
   * @listens Player#loadedmetadata
   */

/**
   * Update our internal duration on a `durationchange` event by calling
   * {@link Tech#duration}.
   *
   * @param {EventTarget~Event} event
   *        The `durationchange` event that caused this to run.
   *
   * @listens Tech#durationchange
   */

/**
   * Update progress bar
   *
   * @param {EventTarget~Event} [event]
   *        The `progress` event that caused this function to run.
   *
   * @listens Player#progress
   */

/**
   * Update remaining time display.
   *
   * @param {EventTarget~Event} [event]
   *        The `timeupdate` or `durationchange` event that caused this to run.
   *
   * @listens Player#timeupdate
   * @listens Player#durationchange
   */

/**
   * Update styles of the `Player` element (height, width and aspect ratio).
   *
   * @private
   * @listens Tech#loadedmetadata
   */

/**
   * Update the PlaybackRateMenuItem when the playbackrate changes.
   *
   * @param {EventTarget~Event} [event]
   *        The `ratechange` event that caused this function to run.
   *
   * @listens Player#ratechange
   */

/**
   * Update the `MuteToggle` button based on the state of `volume` and `muted`
   * on the player.
   *
   * @param {EventTarget~Event} [event]
   *        The {@link Player#loadstart} event if this function was called
   *        through an event.
   *
   * @listens Player#loadstart
   * @listens Player#volumechange
   */

/**
   * Update the appearance of the `MuteToggle` icon.
   *
   * Possible states (given `level` variable below):
   * - 0: crossed out
   * - 1: zero bars of volume
   * - 2: one bar of volume
   * - 3: two bars of volume
   *
   * @private
   */

/**
   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
   * a {@link Player#fullscreenchange} is fired.
   *
   * @listens Player#texttrackchange
   * @listens Player#fullscreenchange
   */

/**
   * Update the internal source caches so that we return the correct source from
   * `src()`, `currentSource()`, and `currentSources()`.
   *
   * > Note: `currentSources` will not be updated if the source that is passed in exists
   *         in the current `currentSources` cache.
   *
   *
   * @param {Tech~SourceObject} srcObj
   *        A string or object source to update our caches to.
   */

/**
   * Update the menu based on the current state of its items.
   *
   * @param {EventTarget~Event} [event]
   *        An event that triggered this function to run.
   *
   * @listens TextTrackList#addtrack
   * @listens TextTrackList#removetrack
   * @listens TextTrackList#change
   */

/**
   * Update the menu based on the current state of its items.
   */

/**
   * Update the player duration
   */

/**
   * Update the playlist loader's state in response to a new or updated playlist.
   *
   * @param {string} [playlistString]
   *        Playlist string (if playlistObject is not provided)
   * @param {Object} [playlistObject]
   *        Playlist object (if playlistString is not provided)
   * @param {string} url
   *        URL of playlist
   * @param {string} id
   *        ID to use for playlist
   */

/**
   * Update the progress bar of the `Slider`.
   *
   * @return {number}
   *          The percentage of progress the progress bar represents as a
   *          number from 0 to 1.
   */

/**
   * Update the state of this button if we are at the live edge
   * or not
   */

/**
   * Updates ARIA accessibility attributes
   */

/**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   *
   * @param {number} time
   *        The time to update the tooltip to, not used during live playback
   *
   * @param {Function} cb
   *        A function that will be called during the request animation frame
   *        for tooltips that need to do additional animations from the default
   */

/**
   * Updates the position of the time tooltip relative to the `SeekBar`.
   *
   * @param {Object} seekBarRect
   *        The `ClientRect` for the {@link SeekBar} element.
   *
   * @param {number} seekBarPoint
   *        A number from 0 to 1, representing a horizontal reference point
   *        from the left edge of the {@link SeekBar}
   */

/**
   * Updates the start and end times of any cues parsed by the WebVTT parser using
   * the information parsed from the X-TIMESTAMP-MAP header and a TS to media time mapping
   * from the SyncController
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @param {Object} mappingObj
   *        object containing a mapping from TS to media time
   * @param {Object} playlist
   *        the playlist object containing the segment
   * @private
   */

/**
   * Updates the time display text node with a new time
   *
   * @param {number} [time=0] the time to update to
   *
   * @private
   */

/**
   * Use the "media time" for a segment to generate a mapping to "display time" and
   * save that display time to the segment.
   *
   * @private
   * @param {SegmentInfo} segmentInfo
   *        The current active request information
   * @param {Object} timingInfo
   *        The start and end time of the current segment in "media time"
   * @param {boolean} shouldSaveTimelineMapping
   *        If there's a timeline change, determines if the timeline mapping should be
   *        saved in timelines.
   * @return {boolean}
   *          Returns false if segment time mapping could not be calculated
   */

/**
   * Uses the WebVTT parser to parse the segment response
   *
   * @param {Object} segmentInfo
   *        a segment info object that describes the current segment
   * @private
   */

/**
   * VTTCue and TextTrackCue properties
   * http://dev.w3.org/html5/webvtt/#vttcue-interface
   */

/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

/**
   * Warns if there is a duplicate or missing key
   */

/**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */

/**
   * Wether live tracker is currently tracking or not.
   */

/**
   * When a callback to play is delayed we have to run these
   * callbacks when play is actually called on the tech. This function
   * runs the callbacks that were delayed and accepts the return value
   * from the tech.
   *
   * @param {undefined|Promise} val
   *        The return value from the tech.
   */

/**
   * When a captions track is enabled in the iOS Safari native player, all other
   * tracks are disabled (including metadata tracks), which nulls all of their
   * associated cue points. This will restore metadata tracks to their pre-fullscreen
   * state in those cases so that cue points are not needlessly lost.
   *
   * @private
   */

/**
   * When fullscreen isn't supported we can stretch the
   * video container to as wide as the browser will let us.
   *
   * @fires Player#enterFullWindow
   */

/**
   * When the mouse moves over the `ProgressControl`, the pointer position
   * gets passed down to the `MouseTimeDisplay` component.
   *
   * @param {EventTarget~Event} event
   *        The `mousemove` event that caused this function to run.
   *
   * @listen mousemove
   */

/**
   * When this Component receives a `keydown` event which it does not process,
   *  it passes the event to the Player for handling.
   *
   * @param {EventTarget~Event} event
   *        The `keydown` event that caused this function to be called.
   */

/**
   * When user starts dragging the VolumeBar, store the volume and listen for
   * the end of the drag. When the drag ends, if the volume was set to zero,
   * set lastVolume to the stored volume.
   *
   * @listens slideractive
   * @private
   */

/**
   * Whether or not the changeType function is supported
   * on our SourceBuffers.
   *
   * @return {boolean}
   *         if changeType can be called.
   */

/**
   * Whether or not the removeSourceBuffer function is supported
   * on the mediaSource.
   *
   * @return {boolean}
   *          if removeSourceBuffer can be called.
   */

/**
   * Whether the underlying sourceBuffer is updating or not
   *
   * @return {boolean} the updating status of the SourceBuffer
   */

/**
   * Write the time to the tooltip DOM element.
   *
   * @param {string} content
   *        The formatted time for the tooltip.
   */

/**
   * XHR `progress` event handler
   *
   * @param {Event}
   *        The XHR `progress` event
   * @param {Object} simpleSegment
   *        A simplified segment object copy
   * @private
   */

/**
   * a wrapper around the function in MasterPlaylistController
   */

/**
   * abort all pending xhr requests and null any pending segements
   *
   * @private
   */

/**
   * abort anything that is currently doing on with the SegmentLoader
   * and reset to a default state
   */

/**
   * all the functionality for tracking when seek end changes
   * and for tracking how far past seek end we should be
   */

/**
   * append a decrypted segement to the SourceBuffer through a SourceUpdater
   *
   * @private
   */

/**
   * call abort on a source buffer.
   *
   * @param {string} type
   *        The type of source buffer to call abort on.
   */

/**
   * callback to run when appendBuffer is finished. detects if we are
   * in a good state to do things with the data we got, or if we need
   * to wait for more
   *
   * @private
   */

/**
   * called when player.src gets called, handle a new source
   *
   * @param {Object} src the source object to handle
   */

/**
   * check the seekable range
   *
   * @return {TimeRange} the seekable range
   */

/**
   * conditionally blur the element and refocus the captions button
   *
   * @private
   */

/**
   * conditionally blur the element and refocus the last focused element
   *
   * @private
   */

/**
   * conditionally focus the modal dialog if focus was previously on the player.
   *
   * @private
   */

/**
   * created a simplified copy of the segment object with just the
   * information necessary to perform the XHR and decryption
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   * @return {Object} a simplified segment object copy
   */

/**
   * dispose of the MasterPlaylistController and everything
   * that it controls
   */

/**
   * dispose of the SegmentLoader and reset to the default state
   */

/**
   * dispose of the source updater and the underlying sourceBuffer
   */

/**
   * fill the buffer with segements unless the sourceBuffers are
   * currently updating
   *
   * Note: this function should only ever be called by monitorBuffer_
   * and never directly
   *
   * @private
   */

/**
   * get all focusable elements
   *
   * @private
   */

/**
   * get the current duration
   *
   * @return {TimeRange} the duration
   */

/**
   * get what we expect the live current time to be
   *
   * @return {number}
   *         The expected live current time
   */

/**
   * handle a durationchange event on the player
   * and start/stop tracking accordingly.
   */

/**
   * handle the durationchange event on the MediaSource
   *
   * @private
   */

/**
   * handle the first play on the player, and make sure that we seek
   * right to the live edge.
   */

/**
   * handle the first timeupdate on the player if it wasn't already playing
   * when live tracker started tracking.
   */

/**
   * handle the sourceended event on the MediaSource
   *
   * @private
   */

/**
   * handle the sourceopen event on the MediaSource
   *
   * @private
   */

/**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

/**
   * load a playlist and start to fill the buffer
   */

/**
   * load a specific segment from a request into the buffer
   *
   * @private
   */

/**
   * native click events on the SWF aren't triggered on IE11, Win8.1RT
   * use stageclick events triggered from inside the SWF instead
   *
   * @private
   * @listens stageclick
   */

/**
   * pause loading of the playlist
   */

/**
   * reset all of our media stats
   *
   * @private
   */

/**
   * return the currently selected playlist
   *
   * @return {Object} the currently selected playlist object that we parsed
   */

/**
   * return the master playlist object if we have one
   *
   * @return {Object} the master playlist object that we parsed
   */

/**
   * return the version
   */

/**
   * returns a JavaScript object reperesenting the current track
   * information. **DOES not return it as JSON**
   *
   * @return {Object}
   *         Object representing the current of track info
   */

/**
   * set a playlist on the segment loader
   *
   * @param {PlaylistLoader} media the playlist to set on the segment loader
   */

/**
   * set an error on the segment loader and null out any pending segements
   *
   * @param {Error} error the error to set on the SegmentLoader
   * @return {Error} the error that was set or that is currently set
   */

/**
   * set the current time on all segment loaders
   *
   * @param {TimeRange} currentTime the current time to set
   * @return {TimeRange} the current time
   */

/**
   * specifices the type of mpd. Can be either "static" or "dynamic"
   *
   * @param {string} value
   *        value of attribute as a string
   *
   * @return {string}
   *         The type as a string
   */

/**
   * start loading of the playlist
   */

/**
   * start tracking live playback
   */

/**
   * stop tracking live playback
   */

/**
   * toggle tracking based on document visiblility
   */

/**
   * trim the back buffer so that we don't have too much data
   * in the source buffer
   *
   * @private
   *
   * @param {Object} segmentInfo - the current segment
   */

/**
   * when the document fschange event triggers it calls this
   */

/**
  * All keys used for operation of a menu (`MenuButton`, `Menu`, and `MenuItem`)
  * Note that 'Enter' and 'Space' are not included here (otherwise they would
  * prevent the `MenuButton` and `MenuItem` from being keyboard-clickable)
  * @typedef MenuKeys
  * @array
  */

/**
  * Builds the default DOM `className`.
  *
  * @return {string}
  *         The DOM `className` for this object.
  */

/**
  * Create an instance of this Tech.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  *
  * @param {Component~ReadyCallback} ready
  *        Callback function to call when the `HTML5` Tech is ready.
  */

/**
  * Create an instance of this class
  *
  * @param {Player} player
  *        The `Player` that this class should be attached to.
  *
  * @param {Object} [options]
  *        The key/value store of player options.
  */

/**
  * Creates an instance of the this class.
  *
  * @param  {Player} player
  *         The `Player` that this class should be attached to.
  *
  * @param  {Object} [options]
  *         The key/value store of player options.
  */

/**
  * Find the trackIds of the video tracks in this source.
  * Found by parsing the Handler Reference and Track Header Boxes:
  *   moov > trak > mdia > hdlr
  *   moov > trak > tkhd
  *
  * @param {Uint8Array} init - The bytes of the init segment for this source
  * @return {Number[]} A list of trackIds
  *
  * @see ISO-BMFF-12/2015, Section 8.4.3
 **/

/**
  * Preselect a track following this precedence:
  * - matches the previously selected {@link TextTrack}'s language and kind
  * - matches the previously selected {@link TextTrack}'s language only
  * - is the first default captions track
  * - is the first default descriptions track
  *
  * @listens Player#loadstart
  */

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 * 
 * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.
 * NamedNodeMap objects in the DOM are live.
 * used for attributes or DocumentType entities 
 */

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */

/**
 * +ContentHandler+ErrorHandler
 * +LexicalHandler+EntityResolver2
 * -DeclHandler-DTDHandler 
 * 
 * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler
 * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2
 * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html
 */

/**
 * 16-bit signed integer, Big Endian byte order
 */

/**
 * 16-bit signed integer, Little Endian byte order
 */

/**
 * 16-bit unsigned integer, Big Endian byte order
 */

/**
 * 16-bit unsigned integer, Little Endian byte order
 */

/**
 * 24-bit signed integer, Big Endian byte order
 */

/**
 * 24-bit signed integer, Little Endian byte order
 */

/**
 * 24-bit unsigned integer, Big Endian byte order
 */

/**
 * 24-bit unsigned integer, Little Endian byte order
 */

/**
 * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.
 * 4 * %0xxxxxxx
 */

/**
 * 3.0 Metadata Sub-Blocks
 *  Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 4/6: 3.0 "Metadata Sub-Block")
 */

/**
 * 3.10 Content Description Object (optional, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10
 */

/**
 * 3.11 Extended Content Description Object (optional, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11
 */

/**
 * 3.4: Header Extension Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4
 */

/**
 * 3.5: Read the Codec-List-Object, which provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5
 */

/**
 * 3.5: The Codec List Object provides user-friendly information about the codecs and formats used to encode the content found in the ASF file.
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_5
 */

/**
 * 32-bit signed integer, Big Endian byte order
 */

/**
 * 32-bit unsigned integer, Big Endian byte order
 */

/**
 * 32-bit unsigned integer, Little Endian byte order
 */

/**
 * 4.1 Extended Stream Properties Object (optional, 1 per media stream)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1
 */

/**
 * 4.7  Metadata Object (optional, 0 or 1)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7
 */

/**
 * 6.2 Identification Header
 * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode
 */

/**
 * 64-bit signed integer, Big Endian byte order
 */

/**
 * 64-bit signed integer, Little Endian byte order
 */

/**
 * 64-bit unsigned integer, Big Endian byte order
 */

/**
 * 64-bit unsigned integer, Little Endian byte order
 */

/**
 * 8-bit signed integer
 */

/**
 * 8-bit unsigned integer
 */

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @file - codecs.js - Handles tasks regarding codec strings such as translating them to
 * codec strings, or translating codec strings into objects that can be examined.
 */

/**
 * @file browser.js
 * @module browser
 */

/**
 * @file buffer.js
 * @module buffer
 */

/**
 * @file computed-style.js
 * @module computed-style
 */

/**
 * @file dom-data.js
 * @module dom-data
 */

/**
 * @file dom.js
 * @module dom
 */

/**
 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
 * robust as jquery's, so there's probably some differences.
 *
 * @file events.js
 * @module events
 */

/**
 * @file extend.js
 * @module extend
 */

/**
 * @file fn.js
 * @module fn
 */

/**
 * @file format-time.js
 * @module format-time
 */

/**
 * @file fullscreen-api.js
 * @module fullscreen-api
 * @private
 */

/**
 * @file log.js
 * @module log
 */

/**
 * @file media-error.js
 */

/**
 * @file menu-keys.js
 */

/**
 * @file merge-options.js
 * @module merge-options
 */

/**
 * @file middleware.js
 * @module middleware
 */

/**
 * @file mixins/evented.js
 * @module evented
 */

/**
 * @file mixins/stateful.js
 * @module stateful
 */

/**
 * @file resolve-url.js - Handling how URLs are resolved and manipulated
 */

/**
 * @file stream.js
 */

/**
 * @file string-cases.js
 * @module to-lower-case
 */

/**
 * @file stylesheet.js
 * @module stylesheet
 */

/**
 * @file text-track-list-converter.js Utilities for capturing text track state and
 * re-creating tracks based on a capture.
 *
 * @module text-track-list-converter
 */

/**
 * @file time-ranges.js
 * @module time-ranges
 */

/**
 * @file video.js
 * @module videojs
 */

/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

/**
 * @param alias Common (generic) tag
 * @returns {boolean|*} true if given alias is a singleton or explicitly marked as unique
 */

/**
 * @param alias Name of common tag
 * @returns {boolean|*} true if given alias is mapped as a singleton', otherwise false
 */

/**
 * @param callback return true for continue,false for break
 * @return boolean true: break visit;
 */

/**
 * @param num {number}
 * @param bit 0 is least significant bit (LSB)
 * @return {boolean} true if bit is 1; otherwise false
 */

/**
 * @param source
 */

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

/**
 * @return true if has new namespace define
 */

/**
 * @return {?object} A SyntheticCompositionEvent.
 */

/**
 * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);
 * @return end of the elementStartPart(end of elementEndPart for selfClosed el)
 */

/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247
 */

/**
 * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177
 * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.
 * The items in the NodeList are accessible via an integral index, starting from 0.
 */

/**
 * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490
 */

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

/**
 * @see org.xml.sax.ContentHandler#startDocument
 * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
 */

/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

/**
 * @typedef  {Object} Plugin~PluginEventHash
 *
 * @property {string} instance
 *           For basic plugins, the return value of the plugin function. For
 *           advanced plugins, the plugin instance on which the event is fired.
 *
 * @property {string} name
 *           The name of the plugin.
 *
 * @property {string} plugin
 *           For basic plugins, the plugin function. For advanced plugins, the
 *           plugin class/constructor.
 */

/**
 * @typedef {Object} KeySystems
 *
 * keySystems configuration for https://github.com/videojs/videojs-contrib-eme
 * Note: not all options are listed here.
 *
 * @property {Uint8Array} [pssh]
 *           Protection System Specific Header
 */

/**
 * A Component to contain the MuteToggle and VolumeControl so that
 * they can work together.
 *
 * @extends Component
 */

/**
 * A Custom DOM event.
 *
 * @typedef {Object} EventTarget~Event
 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
 */

/**
 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
 *
 * @param {number|string|Object|MediaError} value
 *        This can be of multiple types:
 *        - number: should be a standard error code
 *        - string: an error message (the code will be 0)
 *        - Object: arbitrary properties
 *        - `MediaError` (native): used to populate a video.js `MediaError` object
 *        - `MediaError` (video.js): will return itself if it's already a
 *          video.js `MediaError` object.
 *
 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
 *
 * @class MediaError
 */

/**
 * A React component that provides the React-DnD context
 */

/**
 * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
 *
 * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
 *
 * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
 * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
 * @example <caption>How to disable the resize manager</caption>
 * const player = videojs('#vid', {
 *   resizeManager: false
 * });
 *
 * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
 *
 * @extends Component
 */

/**
 * A `ClickableComponent` that handles showing the poster image for the player.
 *
 * @extends ClickableComponent
 */

/**
 * A `MenuButton` class for any popup {@link Menu}.
 *
 * @extends Component
 */

/**
 * A button component for muting the audio.
 *
 * @extends Button
 */

/**
 * A class for checking live current time and determining when the player
 * is at or behind the live edge.
 */

/**
 * A cross-browser XMLHttpRequest wrapper.
 *
 * @function
 * @param    {Object} options
 *           Settings for the request.
 *
 * @return   {XMLHttpRequest|XDomainRequest}
 *           The request object.
 *
 * @see      https://github.com/Raynos/xhr
 */

/**
 * A display that indicates an error has occurred. This means that the video
 * is unplayable.
 *
 * @extends ModalDialog
 */

/**
 * A function used by {@link Tech} to create a new {@link TextTrack}.
 *
 * @private
 *
 * @param {Tech} self
 *        An instance of the Tech class.
 *
 * @param {string} kind
 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
 *
 * @param {string} [label]
 *        Label to identify the text track
 *
 * @param {string} [language]
 *        Two letter language abbreviation
 *
 * @param {Object} [options={}]
 *        An object with additional text track options
 *
 * @return {TextTrack}
 *          The text track that was created.
 */

/**
 * A functional mixin for techs that want to use the Source Handler pattern.
 * Source handlers are scripts for handling specific formats.
 * The source handler pattern is used for adaptive formats (HLS, DASH) that
 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
 * Example: `Tech.withSourceHandlers.call(MyTech);`
 *
 * @param {Tech} _Tech
 *        The tech to add source handler functions to.
 *
 * @mixes Tech~SourceHandlerAdditions
 */

/**
 * A helper to generate a retina background image and non-retina
 * background image. The retina background image will output to a HiDPI media query. The mixin uses
 * a _2x.png filename suffix by default.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *  ...retinaImage('my-img')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${retinaImage('my-img')}
 * `
 *
 * // CSS as JS Output
 * div {
 *   backgroundImage: 'url(my-img.png)',
 *   '@media only screen and (-webkit-min-device-pixel-ratio: 1.3),
 *    only screen and (min--moz-device-pixel-ratio: 1.3),
 *    only screen and (-o-min-device-pixel-ratio: 1.3/1),
 *    only screen and (min-resolution: 144dpi),
 *    only screen and (min-resolution: 1.5dppx)': {
 *     backgroundImage: 'url(my-img_2x.png)',
 *   }
 * }
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * A lightweight readable stream implemention that handles event dispatching.
 *
 * @class Stream
 */

/**
 * A list of event names to a configurable list of vendor prefixes.
 */

/**
 * A list of techs that should be added to techOrder on Players
 *
 * @private
 */

/**
 * A loading spinner for use during waiting/loading events.
 *
 * @extends Component
 */

/**
 * A middleware factory function that should return a
 * {@link module:middleware~MiddlewareObject|MiddlewareObject}.
 *
 * This factory will be called for each player when needed, with the player
 * passed in as an argument.
 *
 * @callback MiddlewareFactory
 * @param {Player} player
 *        A Video.js player.
 */

/**
 * A middleware object is a plain JavaScript object that has methods that
 * match the {@link Tech} methods found in the lists of allowed
 * {@link module:middleware.allowedGetters|getters},
 * {@link module:middleware.allowedSetters|setters}, and
 * {@link module:middleware.allowedMediators|mediators}.
 *
 * @typedef {Object} MiddlewareObject
 */

/**
 * A noop for the native dispose function, as cleanup is not needed.
 */

/**
 * A reference to the {@link module:browser|browser utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:browser|browser}
 */

/**
 * A reference to the {@link module:dom|DOM utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:dom|dom}
 */

/**
 * A reference to the {@link module:log|log utility module} as an object.
 *
 * @type {Function}
 * @see  {@link module:log|log}
 */

/**
 * A reference to the {@link module:url|URL utility module} as an object.
 *
 * @type {Object}
 * @see  {@link module:url|url}
 */

/**
 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
 * only one `AudioTrack` in the list will be enabled at a time.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
 * @extends Track
 */

/**
 * A representation of a single `VideoTrack`.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
 * @extends Track
 */

/**
 * A safe getComputedStyle.
 *
 * This is needed because in Firefox, if the player is loaded in an iframe with
 * `display:none`, then `getComputedStyle` returns `null`, so, we do a
 * null-check to make sure that the player doesn't break in these cases.
 *
 * @function
 * @param    {Element} el
 *           The element you want the computed style of
 *
 * @param    {string} prop
 *           The property name you want
 *
 * @see      https://bugzilla.mozilla.org/show_bug.cgi?id=548397
 */

/**
 * A special menu item for turning of a specific type of text track
 *
 * @extends TextTrackMenuItem
 */

/**
 * A wrapper around the media elements `load` function. This will call the `HTML5`s
 * media element `load` function.
 *
 * @method Html5#load
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
 */

/**
 * A wrapper around the media elements `pause` function. This will call the `HTML5`
 * media elements `pause` function.
 *
 * @method Html5#pause
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
 */

/**
 * A wrapper around the media elements `play` function. This will call the `HTML5`s
 * media element `play` function.
 *
 * @method Html5#play
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
 */

/**
 * AIFF - Audio Interchange File Format
 *
 * Ref:
 *  http://www.onicos.com/staff/iz/formats/aiff.html
 *  http://muratnkonar.com/aiff/index.html
 *  http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/AIFF/AIFF.html
 */

/**
 * ANSI Latin 1 String
 * Using windows-1252 / ISO 8859-1 decoding
 */

/**
 * APE Tag Header/Footer Version 2.0
 * TAG: describes all the properties of the file [optional]
 */

/**
 * APE Tag v2.0 Item Header
 */

/**
 * APE_DESCRIPTOR: defines the sizes (and offsets) of all the pieces, as well as the MD5 checksum
 */

/**
 * APE_HEADER: describes all of the necessary information about the APE file
 */

/**
 * ASF Metadata tag mappings.
 * See http://msdn.microsoft.com/en-us/library/ms867702.aspx
 */

/**
 * Abstract parser which tries take ID3v2 and ID3v1 headers.
 */

/**
 * Accepts any number of transition values as parameters for creating a single transition statement. You may also pass an array of properties as the first parameter that you would like to apply the same transition values to (second parameter).
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s'),
 *   ...transitions(['color', 'background-color'], '2.0s ease-in 2s')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${transitions('opacity 1.0s ease-in 0s', 'width 2.0s ease-in 2s')};
 *   ${transitions(['color', 'background-color'], '2.0s ease-in 2s'),};
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'transition': 'opacity 1.0s ease-in 0s, width 2.0s ease-in 2s'
 *   'transition': 'color 2.0s ease-in 2s, background-color 2.0s ease-in 2s',
 * }
 */

/**
 * Add a class name to an element.
 *
 * @param  {Element} element
 *         Element to add class name to.
 *
 * @param  {string} classToAdd
 *         Class name to add.
 *
 * @return {Element}
 *         The DOM element with the added class name.
 */

/**
 * Add a function hook that will only run once to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]}
 *        The function or array of functions to attach.
 */

/**
 * Add a function hook to a specific videojs lifecycle.
 *
 * @param {string} type
 *        the lifecycle to hook the function to.
 *
 * @param {Function|Function[]}
 *        The function or array of functions to attach.
 */

/**
 * Add an event listener to element
 * It stores the handler function in a separate cache object
 * and adds a generic handler to the element's event,
 * along with a unique id (guid) to the element.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string|string[]} type
 *        Type of event to bind to.
 *
 * @param {EventTarget~EventListener} fn
 *        Event listener.
 */

/**
 * Add text to a DOM element.
 *
 * @param {Element} el
 *        The Element to add text content to.
 *
 * @param {string} content
 *        The text to add to the element.
 */

/**
 * Adding languages so that they're available to all players.
 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
 *
 * @param {string} code
 *        The language code or dictionary property
 *
 * @param {Object} data
 *        The data values to be translated
 *
 * @return {Object}
 *         The resulting language dictionary object
 */

/**
 * Adds a callback to run after the evented mixin applied.
 *
 * @param  {Object} object
 *         An object to Add
 * @param  {Function} callback
 *         The callback to run.
 */

/**
 * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
 * function that will get called when an event with a certain name gets triggered.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to call with `EventTarget`s
 */

/**
 * Adds or removes a class name to/from an element depending on an optional
 * condition or the presence/absence of the class name.
 *
 * @param  {Element} element
 *         The element to toggle a class name on.
 *
 * @param  {string} classToToggle
 *         The class that should be toggled.
 *
 * @param  {boolean|module:dom~PredicateCallback} [predicate]
 *         See the return value for {@link module:dom~PredicateCallback}
 *
 * @return {Element}
 *         The element with a class that has been toggled.
 */

/**
 * Adjust ID3 tag or caption timing information by the timeline pts values
 * (if keepOriginalTimestamps is false) and convert to seconds
 */

/**
 * All event listeners should follow the following format.
 *
 * @callback EventTarget~EventListener
 * @this {EventTarget}
 *
 * @param {EventTarget~Event} event
 *        the event that triggered this function
 *
 * @param {Object} [hash]
 *        hash of data sent during the event
 */

/**
 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
 * that just contains the src url alone.
 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
   * `var SourceString = 'http://example.com/some-video.mp4';`
 *
 * @typedef {Object|string} Tech~SourceObject
 *
 * @property {string} src
 *           The url to the source
 *
 * @property {string} type
 *           The mime type of the source
 */

/**
 * An Object that contains lifecycle hooks as keys which point to an array
 * of functions that are run when a lifecycle is triggered
 *
 * @private
 */

/**
 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#off}
 */

/**
 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#on}
 */

/**
 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
 * the standard DOM API.
 *
 * @function
 * @see {@link EventTarget#trigger}
 */

/**
 * An array of events available on the Html5 tech.
 *
 * @private
 * @type {Array}
 */

/**
 * An instance of the `Player` class is created when any of the Video.js setup methods
 * are used to initialize a video.
 *
 * After an instance has been created it can be accessed globally in two ways:
 * 1. By calling `videojs('example_video_1');`
 * 2. By using it directly via  `videojs.players.example_video_1;`
 *
 * @extends Component
 */

/**
 * An object containing event names as keys and booleans as values.
 *
 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
 *         will have extra functionality. See that function for more information.
 *
 * @property EventTarget.prototype.allowedEvents_
 * @private
 */

/**
 * An object that can be returned by a middleware to signify
 * that the middleware is being terminated.
 *
 * @type {object}
 * @property {object} middleware.TERMINATOR
 */

/**
 * An object that contains ranges of time.
 *
 * @typedef  {Object} TimeRange
 *
 * @property {number} length
 *           The number of time ranges represented by this object.
 *
 * @property {module:time-ranges~TimeRangeIndex} start
 *           Returns the time offset at which a specified time range begins.
 *
 * @property {module:time-ranges~TimeRangeIndex} end
 *           Returns the time offset at which a specified time range ends.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
 */

/**
 * An optional message that to show with the error. Message is not part of the HTML5
 * video spec but allows for more informative custom errors.
 *
 * @type {String}
 */

/**
 * An optional status code that can be set by plugins to allow even more detail about
 * the error. For example a plugin might provide a specific HTTP status code and an
 * error message for that code. Then when the plugin gets that error this class will
 * know how to display an error message for it. This allows a custom message to show
 * up on the `Player` error overlay.
 *
 * @type {Array}
 */

/**
 * An {@link AudioTrack} {@link MenuItem}
 *
 * @extends MenuItem
 */

/**
 * Anywhere we call this function we diverge from the spec
 * as we only support one enabled audiotrack at a time
 *
 * @param {AudioTrackList} list
 *        list to work on
 *
 * @param {AudioTrack} track
 *        The track to skip
 *
 * @private
 */

/**
 * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
 *
 * @param  {Object} target
 *         The object to which to add event methods.
 *
 * @param  {Object} [options={}]
 *         Options for customizing the mixin behavior.
 *
 * @param  {string} [options.eventBusKey]
 *         By default, adds a `eventBusEl_` DOM element to the target object,
 *         which is used as an event bus. If the target object already has a
 *         DOM element that should be used, pass its key here.
 *
 * @return {Object}
 *         The target object.
 */

/**
 * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
 * object.
 *
 * If the target object is {@link module:evented|evented} and has a
 * `handleStateChanged` method, that method will be automatically bound to the
 * `statechanged` event on itself.
 *
 * @param   {Object} target
 *          The object to be made stateful.
 *
 * @param   {Object} [defaultState]
 *          A default set of properties to populate the newly-stateful object's
 *          `state` property.
 *
 * @return {Object}
 *          Returns the `target`.
 */

/**
 * Apply attributes to an HTML element.
 *
 * @param {Element} el
 *        Element to add attributes to.
 *
 * @param {Object} [attributes]
 *        Attributes to be applied.
 */

/**
 * Array-like iteration for objects.
 *
 * @param {Object} object
 *        The object to iterate over
 *
 * @param {obj:EachCallback} fn
 *        The callback function which is called for each key in the object.
 */

/**
 * Array-like reduce for objects.
 *
 * @param {Object} object
 *        The Object that you want to reduce.
 *
 * @param {Function} fn
 *         A callback function which is called for each key in the object. It
 *         receives the accumulated value and the per-iteration value and key
 *         as arguments.
 *
 * @param {Mixed} [initial = 0]
 *        Starting value
 *
 * @return {Mixed}
 *         The final accumulated value.
 */

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */

/**
 * Asynchronously sets a source using middleware by recursing through any
 * matching middlewares and calling `setSource` on each, passing along the
 * previous returned value each time.
 *
 * @param  {Player} player
 *         A {@link Player} instance.
 *
 * @param  {Tech~SourceObject} src
 *         A source object.
 *
 * @param  {Function}
 *         The next middleware to run.
 */

/**
 * Atom: Sample Description Atom ('stsd')
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691
 */

/**
 * Atom: Sample-description Atom ('stsd')
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25691
 */

/**
 * Attempt to block the ability to select text.
 */

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */

/**
 * BASIC STRUCTURE
 */

/**
 * Base class for 'fixed' length atoms.
 * In some cases these atoms are longer then the sum of the described fields.
 * Issue: https://github.com/Borewit/music-metadata/issues/120
 */

/**
 * Base class for all buttons.
 *
 * @extends ClickableComponent
 */

/**
 * Base class helpers for the updating state of a component.
 */

/**
 * Best effort approach to read 64 but signed integer, big endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to read 64 but signed integer, little endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to read up to 64 bit unsigned integer, big endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to read up to 64 bit unsigned integer, little endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to write 64 but signed integer, big endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to write 64 but signed integer, little endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to write up to 64 bit unsigned integer, big endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Best effort approach to write up to 64 bit unsigned integer, little endian.
 * Note that JavasScript is limited to 2^53 - 1 bit.
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
 * when going into fullscreen.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeAudioTracks}
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeTextTracks}
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
 *
 * @type {boolean}
 * @default {@link Html5.supportsNativeVideoTracks}
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports the media element
 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
 * false there. Everywhere else this should be true.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
 * If this is false, manual `progress` events will be triggered instead.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
 * If this is false, manual `timeupdate` events will be triggered instead.
 *
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the media
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default {@link Html5.canControlPlaybackRate}
 */

/**
 * Boolean indicating whether the `Tech` supports changing the speed at which the video
 * plays. Examples:
 *   - Set player to play 2x (twice) as fast
 *   - Set player to play 0.5x (half) as fast
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports fullscreen resize control.
 * Resizing plugins using request fullscreen reloads the plugin
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {bolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports muting volume.
 *
 * @type {bolean}
 * @default {@link Html5.canMuteVolume}
 */

/**
 * Boolean indicating whether the `Tech` supports the `progress` event. This is currently
 * not triggered by video-js-swf. This will be used to determine if
 * {@link Tech#manualProgressOn} should be called.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports the `sourceset` event.
 *
 * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
 * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
 * a new source.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports the `timeupdate` event. This is currently
 * not triggered by video-js-swf. This will be used to determine if
 * {@link Tech#manualTimeUpdates} should be called.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports the native `TextTrack`s.
 * This will help us integrate with native `TextTrack`s if the browser supports them.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default
 */

/**
 * Boolean indicating whether the `Tech` supports volume control.
 *
 * @type {boolean}
 * @default {@link Html5.canControlVolume}
 */

/**
 * Bootstrap if a DOM exists.
 */

/**
 * Button to toggle between play and pause.
 *
 * @extends Button
 */

/**
 * CSS for a @font-face declaration. Defaults to check for local copies of the font on the user's machine. You can disable this by passing `null` to localFonts.
 *
 * @example
 * // Styles as object basic usage
 * const styles = {
 *    ...fontFace({
 *      'fontFamily': 'Sans-Pro',
 *      'fontFilePath': 'path/to/file'
 *    })
 * }
 *
 * // styled-components basic usage
 * const GlobalStyle = createGlobalStyle`${
 *   fontFace({
 *     'fontFamily': 'Sans-Pro',
 *     'fontFilePath': 'path/to/file'
 *   }
 * )}`
 *
 * // CSS as JS Output
 *
 * '@font-face': {
 *   'fontFamily': 'Sans-Pro',
 *   'src': 'url("path/to/file.eot"), url("path/to/file.woff2"), url("path/to/file.woff"), url("path/to/file.ttf"), url("path/to/file.svg")',
 * }
 */

/**
 * CSS for declaring a linear gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...linearGradient({
        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
        toDirection: 'to top right',
        fallback: '#FFF',
      })
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${linearGradient({
        colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
        toDirection: 'to top right',
        fallback: '#FFF',
      })}
 *`
 *
 * // CSS as JS Output
 *
 * div: {
 *   'backgroundColor': '#FFF',
 *   'backgroundImage': 'linear-gradient(to top right, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',
 * }
 */

/**
 * CSS for declaring a radial gradient, including a fallback background-color. The fallback is either the first color-stop or an explicitly passed fallback color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...radialGradient({
 *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
 *     extent: 'farthest-corner at 45px 45px',
 *     position: 'center',
 *     shape: 'ellipse',
 *   })
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${radialGradient({
 *     colorStops: ['#00FFFF 0%', 'rgba(0, 0, 255, 0) 50%', '#0000FF 95%'],
 *     extent: 'farthest-corner at 45px 45px',
 *     position: 'center',
 *     shape: 'ellipse',
 *   })}
 *`
 *
 * // CSS as JS Output
 *
 * div: {
 *   'backgroundColor': '#00FFFF',
 *   'backgroundImage': 'radial-gradient(center ellipse farthest-corner at 45px 45px, #00FFFF 0%, rgba(0, 0, 255, 0) 50%, #0000FF 95%)',
 * }
 */

/**
 * CSS to contain a float (credit to CSSMojo).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *    ...clearFix(),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${clearFix()}
 * `
 *
 * // CSS as JS Output
 *
 * '&::after': {
 *   'clear': 'both',
 *   'content': '""',
 *   'display': 'table'
 * }
 */

/**
 * CSS to fully cover an area. Can optionally be passed an offset to act as a "padding".
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...cover()
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${cover()}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   'position': 'absolute',
 *   'top': '0',
 *   'right: '0',
 *   'bottom': '0',
 *   'left: '0'
 * }
 */

/**
 * CSS to hide content visually but remain accessible to screen readers.
 * from [HTML5 Boilerplate](https://github.com/h5bp/html5-boilerplate/blob/9a176f57af1cfe8ec70300da4621fb9b07e5fa31/src/css/main.css#L121)
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...hideVisually(),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${hideVisually()};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'border': '0',
 *   'clip': 'rect(0 0 0 0)',
 *   'height': '1px',
 *   'margin': '-1px',
 *   'overflow': 'hidden',
 *   'padding': '0',
 *   'position': 'absolute',
 *   'whiteSpace': 'nowrap',
 *   'width': '1px',
 * }
 */

/**
 * CSS to hide text to show a background image in a SEO-friendly way.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'backgroundImage': 'url(logo.png)',
 *   ...hideText(),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   backgroundImage: url(logo.png);
 *   ${hideText()};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'backgroundImage': 'url(logo.png)',
 *   'textIndent': '101%',
 *   'overflow': 'hidden',
 *   'whiteSpace': 'nowrap',
 * }
 */

/**
 * CSS to normalize abnormalities across browsers (normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css)
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *    ...normalize(),
 * }
 *
 * // styled-components usage
 * const GlobalStyle = createGlobalStyle`${normalize()}`
 *
 * // CSS as JS Output
 *
 * html {
 *   lineHeight: 1.15,
 *   textSizeAdjust: 100%,
 * } ...
 */

/**
 * CSS to represent triangle with any pointing direction with an optional background color.
 *
 * @example
 * // Styles as object usage
 *
 * const styles = {
 *   ...triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })
 * }
 *
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${triangle({ pointingDirection: 'right', width: '100px', height: '100px', foregroundColor: 'red' })}
 *
 *
 * // CSS as JS Output
 *
 * div: {
 *  'borderColor': 'transparent transparent transparent red',
 *  'borderStyle': 'solid',
 *  'borderWidth': '50px 0 50px 100px',
 *  'height': '0',
 *  'width': '0',
 * }
 */

/**
 * CSS to represent truncated text with an ellipsis. You can optionally pass a max-width and number of lines before truncating.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...ellipsis('250px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${ellipsis('250px')}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   'display': 'inline-block',
 *   'maxWidth': '250px',
 *   'overflow': 'hidden',
 *   'textOverflow': 'ellipsis',
 *   'whiteSpace': 'nowrap',
 *   'wordWrap': 'normal'
 * }
 */

/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Call the update event for this Slider when this event happens on the player.
 *
 * @type {string}
 */

/**
 * Calls a getter on the tech first, through each middleware
 * from right to left to the player.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  {Tech} tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @return {Mixed}
 *         The final value from the tech after middleware has intercepted it.
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * Changes the hue of the color. Hue is a number between 0 to 360. The first
 * argument for adjustHue is the amount of degrees the color is rotated around
 * the color wheel, always producing a positive hue value.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: adjustHue(180, '#448'),
 *   background: adjustHue('180', 'rgba(101,100,205,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${adjustHue(180, '#448')};
 *   background: ${adjustHue('180', 'rgba(101,100,205,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#888844";
 *   background: "rgba(136,136,68,0.7)";
 * }
 */

/**
 * Check if HTML5 media is supported by this browser/device.
 *
 * @return {boolean}
 *         - True if HTML5 media is supported.
 *         - False if HTML5 media is not supported.
 */

/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */

/**
 * Check if a string ends with something
 * @private
 */

/**
 * Check if an element has a class name.
 *
 * @param  {Element} element
 *         Element to check
 *
 * @param  {string} classToCheck
 *         Class name to check for
 *
 * @return {boolean}
 *         Will be `true` if the element has a class, `false` otherwise.
 *
 * @throws {Error}
 *         Throws an error if `classToCheck` has white space.
 */

/**
 * Check if an event was a single left click.
 *
 * @param  {EventTarget~Event} event
 *         Event object.
 *
 * @return {boolean}
 *         Will be `true` if a single left click, `false` otherwise.
 */

/**
 * Check if any of the time ranges are over the maximum index.
 *
 * @private
 * @param   {string} fnName
 *          The function name to use for logging
 *
 * @param   {number} index
 *          The index to check
 *
 * @param   {number} maxIndex
 *          The maximum possible index
 *
 * @throws  {Error} if the timeRanges provided are over the maxIndex
 */

/**
 * Check if muting volume is supported and if it isn't hide the mute toggle
 * button.
 *
 * @param {Component} self
 *        A reference to the mute toggle button
 *
 * @param {Player} player
 *        A reference to the player
 *
 * @private
 */

/**
 * Check if the media element can handle a source natively.
 *
 * @param {Tech~SourceObject} source
 *         The source object
 *
 * @param {Object} [options]
 *         Options to be passed to the tech.
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string).
 */

/**
 * Check if the media element can play the given mime type.
 *
 * @param {string} type
 *        The mimetype to check
 *
 * @return {string}
 *         'probably', 'maybe', or '' (empty string)
 */

/**
 * Check if the playback rate can be changed in this browser/device.
 *
 * @return {boolean}
 *         - True if playback rate can be controlled
 *         - False otherwise
 */

/**
 * Check if the tech can support the given source
 *
 * @param {Object} srcObj
 *        The source object
 * @param {Object} options
 *        The options passed to the tech
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */

/**
 * Check if the tech can support the given type
 *
 * @param {string} type
 *        The mimetype to check
 * @return {string} 'probably', 'maybe', or '' (empty string)
 */

/**
 * Check if the volume can be changed in this browser/device.
 * Volume cannot be changed in a lot of mobile devices.
 * Specifically, it can't be changed from 1 on iOS.
 *
 * @return {boolean}
 *         - True if volume can be controlled
 *         - False otherwise
 */

/**
 * Check if the volume can be muted in this browser/device.
 * Some devices, e.g. iOS, don't allow changing volume
 * but permits muting/unmuting.
 *
 * @return {bolean}
 *      - True if volume can be muted
 *      - False otherwise
 */

/**
 * Check if volume control is supported and if it isn't hide the
 * `Component` that was passed  using the `vjs-hidden` class.
 *
 * @param {Component} self
 *        The component that should be hidden if volume is unsupported
 *
 * @param {Player} player
 *        A reference to the player
 *
 * @private
 */

/**
 * Check if we can override a video/audio elements attributes, with
 * Object.defineProperty.
 *
 * @return {boolean}
 *         - True if builtin attributes can be overridden
 *         - False otherwise
 */

/**
 * Check to see if native `AudioTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `AudioTrack`s are supported.
 *        - False otherwise
 */

/**
 * Check to see if native `TextTrack`s are supported by this browser/device.
 *
 * @return {boolean}
 *         - True if native `TextTrack`s are supported.
 *         - False otherwise
 */

/**
 * Check to see if native `VideoTrack`s are supported by this browser/device
 *
 * @return {boolean}
 *        - True if native `VideoTrack`s are supported.
 *        - False otherwise
 */

/**
 * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.
 * @private
 */

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

/**
 * Checks src mimetype, adding it when possible
 *
 * @param {Tech~SourceObject} src
 *        The src object to check
 * @return {Tech~SourceObject}
 *        src Object with known type
 */

/**
 * Checks whether xhr request was redirected and returns correct url depending
 * on `handleManifestRedirects` option
 *
 * @api private
 *
 * @param  {string} url - an url being requested
 * @param  {XMLHttpRequest} req - xhr request result
 *
 * @return {string}
 */

/**
 * Chunk offset atom, 'stco'
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25715
 */

/**
 * Class for MediaType object.
 * @public
 */

/**
 * Class to represent a content type.
 * @private
 */

/**
 * Clean up the listener cache and dispatchers
 *
 * @param {Element|Object} elem
 *        Element to clean up
 *
 * @param {string} type
 *        Type of event to clean up
 */

/**
 * Clear the middleware cache for a player.
 *
 * @param  {Player} player
 *         A {@link Player} instance.
 */

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

/**
 * Colors.
 */

/**
 * Comment header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1
 */

/**
 * Common AIFF chunk header
 */

/**
 * Common RIFF chunk header
 */

/**
 * Common Sound Sample Description (version & revision)
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-57317
 */

/**
 * Common chunk DSD header: the 'chunk name (Four-CC)' & chunk size
 */

/**
 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
 * {@link VideoTrackList}
 *
 * @extends EventTarget
 */

/**
 * Compares a keyboard event with a given keyCode or keyName.
 *
 * @param {Event} event Keyboard event that should be tested
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Boolean}
 * @api public
 */

/**
 * Component which is clickable or keyboard actionable, but is not a
 * native HTML button.
 *
 * @extends Component
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Compute the percentage of the media that has been buffered.
 *
 * @param {TimeRange} buffered
 *        The current `TimeRange` object representing buffered time ranges
 *
 * @param {number} duration
 *        Total duration of the media
 *
 * @return {number}
 *         Percent buffered of the total duration in decimal form.
 */

/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */

/**
 * Construct ReadStreamTokenizer from given Buffer.
 * @param buffer - Buffer to tokenize
 * @param fileInfo - Pass additional file information to the tokenizer
 * @returns BufferTokenizer
 */

/**
 * Construct ReadStreamTokenizer from given Stream.
 * Will set fileSize, if provided given Stream has set the .path property.
 * @param stream - Node.js Stream.Readable
 * @param fileInfo - Pass additional file information to the tokenizer
 * @returns Tokenizer
 */

/**
 * Construct ReadStreamTokenizer from given Stream.
 * Will set fileSize, if provided given Stream has set the .path property/
 * @param stream - Read from Node.js Stream.Readable
 * @param fileInfo - Pass the file information, like size and MIME-type of the correspnding stream.
 * @returns ReadStreamTokenizer
 */

/**
 * Construct an rgba color from a given hex color code.
 *
 * @param {number} color
 *        Hex number for color, like #f0e or #f604e2.
 *
 * @param {number} opacity
 *        Value for opacity, 0.0 - 1.0.
 *
 * @return {string}
 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
 */

/**
 * Consume a fixed number of bytes from the stream and return a string with a specified encoding.
 */

/**
 * Container of main controls.
 *
 * @extends Component
 */

/**
 * Contains methods that provide statefulness to an object which is passed
 * to {@link module:stateful}.
 *
 * @mixin StatefulMixin
 */

/**
 * Convenience component with default shallow equality check for sCU.
 */

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

/**
 * Convert dB to ratio
 * db Decibels
 */

/**
 * Convert pixel value to ems. The default base value is 16px, but can be changed by passing a
 * second argument to the function.
 * @function
 * @param {string|number} pxval
 * @param {string|number} [base='16px']
 * @example
 * // Styles as object usage
 * const styles = {
 *   'height': em('16px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   height: ${em('16px')}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'height': '1em'
 * }
 */

/**
 * Convert pixel value to rems. The default base value is 16px, but can be changed by passing a
 * second argument to the function.
 * @function
 * @param {string|number} pxval
 * @param {string|number} [base='16px']
 * @example
 * // Styles as object usage
 * const styles = {
 *   'height': rem('16px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   height: ${rem('16px')}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'height': '1rem'
 * }
 */

/**
 * Convert power ratio to DB
 * ratio: [0..1]
 */

/**
 * Convert rating to 1-5 star rating
 * @param rating - Normalized rating [0..1] (common.rating[n].rating)
 * @returns Number of stars: 1, 2, 3, 4 or 5 stars
 */

/**
 * Convert rating to 1-5 star rating
 * @param rating: Normalized rating [0..1] (common.rating[n].rating)
 * @returns Number of stars: 1, 2, 3, 4 or 5 stars
 */

/**
 * Convert replay gain to ratio and Decibel
 * @param value string holding a ratio like '0.034' or '-7.54 dB'
 */

/**
 * Converts a HslColor or HslaColor object to a color string.
 * This util is useful in case you only know on runtime which color object is
 * used. Otherwise we recommend to rely on `hsl` or `hsla`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 }),
 *   background: hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${hslToColorString({ hue: 240, saturation: 1, lightness: 0.5 })};
 *   background: ${hslToColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#00f";
 *   background: "rgba(179,25,25,0.72)";
 * }
 */

/**
 * Converts a RgbColor or RgbaColor object to a color string.
 * This util is useful in case you only know on runtime which color object is
 * used. Otherwise we recommend to rely on `rgb` or `rgba`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgbToColorString({ red: 255, green: 205, blue: 100 }),
 *   background: rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100 })};
 *   background: ${rgbToColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#ffcd64";
 *   background: "rgba(255,205,100,0.72)";
 * }
 */

/**
 * Converts a RgbColor, RgbaColor, HslColor or HslaColor object to a color string.
 * This util is useful in case you only know on runtime which color object is
 * used. Otherwise we recommend to rely on `rgb`, `rgba`, `hsl` or `hsla`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: toColorString({ red: 255, green: 205, blue: 100 }),
 *   background: toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 }),
 *   background: toColorString({ hue: 240, saturation: 1, lightness: 0.5 }),
 *   background: toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${toColorString({ red: 255, green: 205, blue: 100 })};
 *   background: ${toColorString({ red: 255, green: 205, blue: 100, alpha: 0.72 })};
 *   background: ${toColorString({ hue: 240, saturation: 1, lightness: 0.5 })};
 *   background: ${toColorString({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0.72 })};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#ffcd64";
 *   background: "rgba(255,205,100,0.72)";
 *   background: "#00f";
 *   background: "rgba(179,25,25,0.72)";
 * }
 */

/**
 * Converts the color to a grayscale, by reducing its saturation to 0.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: grayscale('#CCCD64'),
 *   background: grayscale('rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${grayscale('#CCCD64')};
 *   background: ${grayscale('rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#999";
 *   background: "rgba(153,153,153,0.7)";
 * }
 */

/**
 * Coordinate addition
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Core tokenizer
 */

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */

/**
 * Create a DOM syle element given a className for it.
 *
 * @param {string} className
 *        The className to add to the created style element.
 *
 * @return {Element}
 *         The element that was created.
 */

/**
 * Create a `TimeRange` object which mimics an
 * {@link https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges|HTML5 TimeRanges instance}.
 *
 * @param {number|Array[]} start
 *        The start of a single range (a number) or an array of ranges (an
 *        array of arrays of two numbers each).
 *
 * @param {number} end
 *        The end of a single range. Cannot be used with the array form of
 *        the `start` argument.
 */

/**
 * Create a dictionary ordered by their tag id (key)
 * @param nativeTags - List of tags
 * @returns Tags indexed by id
 */

/**
 * Create a dictionary ordered by their tag id (key)
 * @param nativeTags list of tags
 * @returns tags indexed by id
 */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

/**
 * Create a time range object given ranges of time.
 *
 * @private
 * @param   {Array} [ranges]
 *          An array of time ranges.
 */

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 * @private
 */

/**
 * Create an error file out of errors.md for development and a simple web link to the full errors
 * in production mode.
 */

/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates an element and applies properties, attributes, and inserts content.
 *
 * @param  {string} [tagName='div']
 *         Name of tag to be created.
 *
 * @param  {Object} [properties={}]
 *         Element properties to be applied.
 *
 * @param  {Object} [attributes={}]
 *         Element attributes to be applied.
 *
 * @param {module:dom~ContentDescriptor} content
 *        A content descriptor object.
 *
 * @return {Element}
 *         The element that was created.
 */

/**
 * Creates functions to query the DOM using a given method.
 *
 * @private
 * @param   {string} method
 *          The method to create the query with.
 *
 * @return  {Function}
 *          The query method
 */

/**
 * Creates the context object we're providing
 * @param backend
 * @param context
 */

/**
 * Current Video.js version. Follows [semantic versioning](https://semver.org/).
 *
 * @type {string}
 */

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

/**
 * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)
 *
 * Ref:
 *  http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf
 */

/**
 * DSDIFF chunk header
 * The data-size encoding is deviating from EA-IFF 85
 * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf
 */

/**
 * DSF (dsd stream file) File Parser
 * Ref: https://dsd-guide.com/sites/default/files/white-papers/DSFFileFormatSpec_E.pdf
 */

/**
 * Data Atom Structure
 * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW31
 */

/**
 * Data Atom Structure
 */

/**
 * Decorates a component as a dragsource
 * @param type The dragsource type
 * @param spec The drag source specification
 * @param collect The props collector function
 * @param options DnD options
 */

/**
 * Decreases the intensity of a color. Its range is between 0 to 1. The first
 * argument of the desaturate function is the amount by how much the color
 * intensity should be decreased.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: desaturate(0.2, '#CCCD64'),
 *   background: desaturate('0.2', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${desaturate(0.2, '#CCCD64')};
 *   background: ${desaturate('0.2', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#b8b979";
 *   background: "rgba(184,185,121,0.7)";
 * }
 */

/**
 * Decreases the opacity of a color. Its range for the amount is between 0 to 1.
 *
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: transparentize(0.1, '#fff');
 *   background: transparentize(0.2, 'hsl(0, 0%, 100%)'),
 *   background: transparentize('0.5', 'rgba(255, 0, 0, 0.8)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${transparentize(0.1, '#fff')};
 *   background: ${transparentize(0.2, 'hsl(0, 0%, 100%)')},
 *   background: ${transparentize('0.5', 'rgba(255, 0, 0, 0.8)')},
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(255,255,255,0.9)";
 *   background: "rgba(255,255,255,0.8)";
 *   background: "rgba(255,0,0,0.3)";
 * }
 */

/**
 * Default options for `ControlBar`
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for `ModalDialog` default options.
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for `MouseTimeDisplay`
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for `ProgressControl`
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for the `SeekBar`
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for the `VolumeBar`
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for the `VolumeControl`
 *
 * @type {Object}
 * @private
 */

/**
 * Default options for {@link PlayProgressBar}.
 *
 * @type {Object}
 * @private
 */

/**
 * Define a middleware that the player should use by way of a factory function
 * that returns a middleware object.
 *
 * @param  {string} type
 *         The MIME type to match or `"*"` for all MIME types.
 *
 * @param  {MiddlewareFactory} middleware
 *         A middleware factory function that will be executed for
 *         matching types.
 */

/**
 * Delegates to either the default time formatting function or a custom
 * function supplied via `setFormatTime`.
 *
 * Formats seconds as a time string (H:MM:SS or M:SS). Supplying a
 * guide (in seconds) will force a number of leading zeros to cover the
 * length of the guide.
 *
 * @static
 * @example  formatTime(125, 600) === "02:05"
 * @param    {number} seconds
 *           Number of seconds to be turned into a string
 *
 * @param    {number} guide
 *           Number (in seconds) to model the string after
 *
 * @return   {string}
 *           Time formatted as H:MM:SS or M:SS
 */

/**
 * Deprecated method to register a plugin with Video.js
 *
 * @deprecated videojs.plugin() is deprecated; use videojs.registerPlugin() instead
 *
 * @param {string} name
 *        The plugin name
 *
 * @param {Plugin|Function} plugin
 *         The plugin sub-class or function
 */

/**
 * Detect if a value is a string with any non-whitespace characters.
 *
 * @private
 * @param  {string} str
 *         The string to check
 *
 * @return {boolean}
 *         Will be `true` if the string is non-blank, `false` otherwise.
 *
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determine the base media decode start time, in seconds, for an MP4
 * fragment. If multiple fragments are specified, the earliest time is
 * returned.
 *
 * The base media decode time can be parsed from track fragment
 * metadata:
 * ```
 * moof > traf > tfdt.baseMediaDecodeTime
 * ```
 * It requires the timescale value from the mdhd to interpret.
 *
 * @param timescale {object} a hash of track ids to timescale values.
 * @return {number} the earliest base media decode start time for the
 * fragment, in seconds
 */

/**
 * Determine the composition start, in seconds, for an MP4
 * fragment.
 *
 * The composition start time of a fragment can be calculated using the base
 * media decode time, composition time offset, and timescale, as follows:
 *
 * compositionStartTime = (baseMediaDecodeTime + compositionTimeOffset) / timescale
 *
 * All of the aforementioned information is contained within a media fragment's
 * `traf` box, except for timescale info, which comes from the initialization
 * segment, so a track id (also contained within a `traf`) is also necessary to
 * associate it with a timescale
 *
 *
 * @param timescales {object} - a hash of track ids to timescale values.
 * @param fragment {Unit8Array} - the bytes of a media segment
 * @return {number} the composition start time for the fragment, in seconds
 **/

/**
 * Determines if the current DOM is embedded in an iframe.
 *
 * @return {boolean}
 *         Will be `true` if the DOM is embedded in an iframe, `false`
 *         otherwise.
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * Determines which contrast guidelines have been met for two colors.
 * Based on the [contrast calculations recommended by W3](https://www.w3.org/WAI/WCAG21/Understanding/contrast-enhanced.html).
 *
 * @example
 * const scores = meetsContrastGuidelines('#444', '#fff');
 */

/**
 * Determines, via duck typing, whether or not a value is a DOM element.
 *
 * @param  {Mixed} value
 *         The value to check.
 *
 * @return {boolean}
 *         Will be `true` if the value is a DOM element, `false` otherwise.
 */

/**
 * Determines, via duck typing, whether or not a value is a text node.
 *
 * @param  {Mixed} value
 *         Check if this value is a text node.
 *
 * @return {boolean}
 *         Will be `true` if the value is a text node, `false` otherwise.
 */

/**
 * Displays the current time
 *
 * @extends Component
 */

/**
 * Displays the duration
 *
 * @extends Component
 */

/**
 * Displays the live indicator when duration is Infinity.
 *
 * @extends Component
 */

/**
 * Displays the time left in the video
 *
 * @extends Component
 */

/**
 * Displays time information about the video
 *
 * @extends Component
 */

/**
 * Documented in player.js
 *
 * @ignore
 */

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */

/**
 * Does our fallback mode think that this event is the end of composition?
 */

/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

/**
 * EBML Tag map
 */

/**
 * Element Data Store.
 *
 * Allows for binding data to an element without putting it directly on the
 * element. Ex. Event listeners are stored here.
 * (also from jsninja.com, slightly modified and updated for closure compiler)
 *
 * @type {Object}
 * @private
 */

/**
 * Element for testing browser HTML5 media capabilities
 *
 * @type {Element}
 * @constant
 * @private
 */

/**
 * Elements of document type description
 * Derived from https://github.com/tungol/EBML/blob/master/doctypes/matroska.dtd
 * Extended with:
 *  https://www.matroska.org/technical/specs/index.html
 */

/**
 * Empties the contents of an element.
 *
 * @param  {Element} el
 *         The element to empty children from
 *
 * @return {Element}
 *         The element with no children
 */

/**
 * Enables shorthand for direction-based properties. It accepts a property (hyphenated or camelCased) and up to four values that map to top, right, bottom, and left, respectively. You can optionally pass an empty string to get only the directional values as properties. You can also optionally pass a null argument for a directional value to ignore it.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...directionalProperty('padding', '12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${directionalProperty('padding', '12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'paddingTop': '12px',
 *   'paddingRight': '24px',
 *   'paddingBottom': '36px',
 *   'paddingLeft': '48px'
 * }
 */

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */

/**
 * Enumeration of allowed getters where the keys are method names.
 *
 * @type {Object}
 */

/**
 * Enumeration of allowed setters where the keys are method names.
 *
 * @type {Object}
 */

/**
 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
 * specification listed under {@link MediaError} for more information.
 *
 * @enum {array}
 * @readonly
 * @property {string} 0 - MEDIA_ERR_CUSTOM
 * @property {string} 1 - MEDIA_ERR_ABORTED
 * @property {string} 2 - MEDIA_ERR_NETWORK
 * @property {string} 3 - MEDIA_ERR_DECODE
 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
 */

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

/**
 * Establish consistent measurements and spacial relationships throughout your projects by incrementing an em or rem value up or down a defined scale. We provide a list of commonly used scales as pre-defined variables.
 * @example
 * // Styles as object usage
 * const styles = {
 *    // Increment two steps up the default scale
 *   'fontSize': modularScale(2)
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *    // Increment two steps up the default scale
 *   fontSize: ${modularScale(2)}
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'fontSize': '1.77689em'
 * }
 */

/**
 * Event names that have already been detected and prefixed (if applicable).
 */

/**
 * Events that can be called with on + eventName. See {@link EventHandler}.
 *
 * @property {Object} TrackList#allowedEvents_
 * @private
 */

/**
 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
 * represents the {@link TextTrack}'s state.
 *
 * @param {TextTrack} track
 *        The text track to query.
 *
 * @return {Object}
 *         A serializable javascript representation of the TextTrack.
 * @private
 */

/**
 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
 * state of all {@link TextTrack}s currently configured. The return array is compatible with
 * {@link text-track-list-converter:jsonToTextTracks}.
 *
 * @param {Tech} tech
 *        The tech object to query
 *
 * @return {Array}
 *         A serializable javascript representation of the {@link Tech}s
 *         {@link TextTrackList}.
 */

/**
 * Extensible Binary Meta Language (EBML) parser
 * https://en.wikipedia.org/wiki/Extensible_Binary_Meta_Language
 * http://matroska.sourceforge.net/technical/specs/rfc/index.html
 *
 * WEBM VP8 AUDIO FILE
 */

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */

/**
 * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:
 * ref: https://xiph.org/flac/format.html#metadata_block
 */

/**
 * Fact chunk; chunk-id is "fact"
 * http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html
 * http://www.recordingblogs.com/wiki/fact-chunk-of-a-wave-file
 */

/**
 * Factory function that creates pixel-to-x converters
 * @private
 */

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */

/**
 * Fetches the value of a passed CSS Variable in the :root scope, or otherwise returns a defaultValue if provided.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'background': cssVar('--background-color'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${cssVar('--background-color')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   'background': 'red'
 * }
 */

/**
 * Finds a all DOM elements matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param  {string} selector
 *         A valid CSS selector, which will be passed to `querySelectorAll`.
 *
 * @param  {Element|String} [context=document]
 *         A DOM element within which to query. Can also be a selector
 *         string in which case the first matching element will be used
 *         as context. If missing (or no element matches selector), falls
 *         back to `document`.
 *
 * @return {NodeList}
 *         A element list of elements that were found. Will be empty if none
 *         were found.
 *
 */

/**
 * Finds a single DOM element matching `selector` within the optional
 * `context` of another DOM element (defaulting to `document`).
 *
 * @param  {string} selector
 *         A valid CSS selector, which will be passed to `querySelector`.
 *
 * @param  {Element|String} [context=document]
 *         A DOM element within which to query. Can also be a selector
 *         string in which case the first matching element will be used
 *         as context. If missing (or no element matches selector), falls
 *         back to `document`.
 *
 * @return {Element|null}
 *         The element that was found or null.
 */

/**
 * Fired when the current playback position has changed *
 * During playback this is fired every 15-250 milliseconds, depending on the
 * playback technology in use.
 *
 * @event Player#timeupdate
 * @type {EventTarget~Event}
 */

/**
 * Fired when the player has downloaded data at the current playback position
 *
 * @event Player#loadeddata
 * @type {EventTarget~Event}
 */

/**
 * Fired when the player has initial duration and dimension information
 *
 * @event Player#loadedmetadata
 * @type {EventTarget~Event}
 */

/**
 * Fired when the volume changes
 *
 * @event Player#volumechange
 * @type {EventTarget~Event}
 */

/**
 * Fired while the user agent is downloading media data.
 *
 * @event Player#progress
 * @type {EventTarget~Event}
 */

/**
 * Fires when the browser has loaded meta data for the audio/video.
 *
 * @event Player#loadedmetadata
 * @type {EventTarget~Event}
 */

/**
 * Fires when the browser has loaded the current frame of the audio/video.
 *
 * @event Player#loadeddata
 * @type {event}
 */

/**
 * Fires when the browser is intentionally not getting media data.
 *
 * @event Player#suspend
 * @type {EventTarget~Event}
 */

/**
 * Fires when the browser is trying to get media data, but data is not available.
 *
 * @event Player#stalled
 * @type {EventTarget~Event}
 */

/**
 * Fires when the current playback position has changed.
 *
 * @event Player#timeupdate
 * @type {event}
 */

/**
 * Fires when the current playlist is empty.
 *
 * @event Player#emptied
 * @type {EventTarget~Event}
 */

/**
 * Fires when the loading of an audio/video is aborted.
 *
 * @event Player#abort
 * @type {EventTarget~Event}
 */

/**
 * Fires when the text track has been changed
 *
 * @event Player#texttrackchange
 * @type {event}
 */

/**
 * Fires when the video's intrinsic dimensions change
 *
 * @event Player#resize
 * @type {event}
 */

/**
 * Fires when the volume has been changed
 *
 * @event Player#volumechange
 * @type {event}
 */

/**
 * Fix a native event to have standard property values
 *
 * @param {Object} event
 *        Event object to fix.
 *
 * @return {Object}
 *         Fixed event object.
 */

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */

/**
 * For IE shims
 */

/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */

/**
 * Format object to media type.
 *
 * @param {object} obj
 * @return {string}
 * @public
 */

/**
 * Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in
 * seconds) will force a number of leading zeros to cover the length of the
 * guide.
 *
 * @private
 * @param  {number} seconds
 *         Number of seconds to be turned into a string
 *
 * @param  {number} guide
 *         Number (in seconds) to model the string after
 *
 * @return {string}
 *         Time formatted as H:MM:SS or M:SS
 */

/**
 * Forwards all `data` events on this stream to the destination stream. The
 * destination stream should provide a method `push` to receive the data
 * events as they arrive.
 * @param destination {stream} the stream that will receive all `data` events
 * @param autoFlush {boolean} if false, we will not call `flush` on the destination
 *                            when the current stream emits a 'done' event
 * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
 */

/**
 * Function helper that adds an array of states to a template of selectors. Used in textInputs and buttons.
 * @private
 */

/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

/**
 * Generates a media query to target HiDPI devices.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *  [hiDPI(1.5)]: {
 *    width: 200px;
 *  }
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${hiDPI(1.5)} {
 *     width: 200px;
 *   }
 * `
 *
 * // CSS as JS Output
 *
 * '@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
 *  only screen and (min--moz-device-pixel-ratio: 1.5),
 *  only screen and (-o-min-device-pixel-ratio: 1.5/1),
 *  only screen and (min-resolution: 144dpi),
 *  only screen and (min-resolution: 1.5dppx)': {
 *   'width': '200px',
 * }
 */

/**
 * Get a list of hooks for a specific lifecycle
 *
 * @param  {string} type
 *         the lifecyle to get hooks from
 *
 * @param  {Function|Function[]} [fn]
 *         Optionally add a hook (or hooks) to the lifecycle that your are getting.
 *
 * @return {Array}
 *         an array of hooks, or an empty array if there are none.
 */

/**
 * Get a single player based on an ID or DOM element.
 *
 * This is useful if you want to check if an element or ID has an associated
 * Video.js player, but not create one if it doesn't.
 *
 * @param   {string|Element} id
 *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
 *          or a string matching the `id` of such an element.
 *
 * @return {Player|undefined}
 *          A player instance or `undefined` if there is no player instance
 *          matching the argument.
 */

/**
 * Get a unique auto-incrementing ID by number that has not been returned before.
 *
 * @return {number}
 *         A new unique ID.
 */

/**
 * Get all the video, audio, and hint tracks from a non fragmented
 * mp4 segment
 */

/**
 * Get an element's attribute values, as defined on the HTML tag.
 *
 * Attributes are not the same as properties. They're defined on the tag
 * or with setAttribute.
 *
 * @param  {Element} tag
 *         Element from which to get tag attributes.
 *
 * @return {Object}
 *         All attributes of the element. Boolean attributes will be `true` or
 *         `false`, others will be strings.
 */

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

/**
 * Get an object with the currently created players, keyed by player ID
 *
 * @return {Object}
 *         The created players
 */

/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */

/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */

/**
 * Get content-type from req/res objects.
 *
 * @param {object}
 * @return {Object}
 * @private
 */

/**
 * Get document associated with the event target.
 */

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */

/**
 * Get or set the `Player`'s crossorigin option. For the HTML5 player, this
 * sets the `crossOrigin` property on the `<video>` tag to control the CORS
 * behavior.
 *
 * @see [Video Element Attributes]{@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video#attr-crossorigin}
 *
 * @param {string} [value]
 *        The value to set the `Player`'s crossorigin to. If an argument is
 *        given, must be one of `anonymous` or `use-credentials`.
 *
 * @return {string|undefined}
 *         - The current crossorigin value of the `Player` when getting.
 *         - undefined when setting
 */

/**
 * Get the actual value of an option.
 *
 * @param  {string} value
 *         The value to get
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */

/**
 * Get the mimetype of a given src url if possible
 *
 * @param {string} src
 *        The url to the src
 *
 * @return {string}
 *         return the mimetype if it was known or empty string otherwise
 */

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */

/**
 * Get the pointer position within an element.
 *
 * The base on the coordinates are the bottom left of the element.
 *
 * @param  {Element} el
 *         Element on which to get the pointer position on.
 *
 * @param  {EventTarget~Event} event
 *         Event object.
 *
 * @return {module:dom~Coordinates}
 *         A coordinates object corresponding to the mouse position.
 *
 */

/**
 * Get the position of an element in the DOM.
 *
 * Uses `getBoundingClientRect` technique from John Resig.
 *
 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
 *
 * @param  {Element} el
 *         Element from which to get offset.
 *
 * @return {module:dom~Position}
 *         The position of the element that was passed in.
 */

/**
 * Get the remote element {@link HtmlTrackElementList}
 *
 * @returns {HtmlTrackElementList}
 * @method Tech.prototype.remoteTextTrackEls
 */

/**
 * Get the remote element {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.remoteTextTracks
 */

/**
 * Get the remote {@link HtmlTrackElementList} tracks.
 *
 * @return {HtmlTrackElementList}
 *         The current remote text track element list
 *
 * @method Player.prototype.remoteTextTrackEls
 */

/**
 * Get the remote {@link TextTrackList}
 *
 * @return {TextTrackList}
 *         The current remote text track list
 *
 * @method Player.prototype.remoteTextTracks
 */

/**
 * Get the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @private
 * @param      {string} fnName
 *             The function name to use for logging
 *
 * @param      {string} valueIndex
 *             The property that should be used to get the time. should be
 *             'start' or 'end'
 *
 * @param      {Array} ranges
 *             An array of time ranges
 *
 * @param      {Array} [rangeIndex=0]
 *             The index to start the search at
 *
 * @return     {number}
 *             The time that offset at the specified index.
 *
 * @deprecated rangeIndex must be set to a value, in the future this will throw an error.
 * @throws     {Error} if rangeIndex is more than the length of ranges
 */

/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */

/**
 * Get the value of 'disablePictureInPicture' from the video element.
 *
 * @method Html5#disablePictureInPicture
 * @return {boolean} value
 *         - The value of `disablePictureInPicture` from the video element.
 *         - True indicates that the video can't be played in Picture-In-Picture mode
 *         - False indicates that the video can be played in Picture-In-Picture mode
 *
 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
 */

/**
 * Get the value of `autoplay` from the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#autoplay
 * @return {boolean}
 *         - The value of `autoplay` from the media element.
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */

/**
 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
 * object that represents the parts of the media that are already downloaded and
 * available for playback.
 *
 * @method Html5#buffered
 * @return {TimeRange}
 *         The value of `buffered` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
 */

/**
 * Get the value of `controls` from the media element. `controls` indicates
 * whether the native media controls should be shown or hidden.
 *
 * @method Html5#controls
 * @return {boolean}
 *         - The value of `controls` from the media element.
 *         - True indicates that native controls should be showing.
 *         - False indicates that native controls should be hidden.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
 */

/**
 * Get the value of `crossOrigin` from the media element. `crossOrigin` indicates
 * to the browser that should sent the cookies along with the requests for the
 * different assets/playlists
 *
 * @method Html5#crossOrigin
 * @return {string}
 *         - anonymous indicates that the media should not sent cookies.
 *         - use-credentials indicates that the media should sent cookies along the requests.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
 */

/**
 * Get the value of `currentTime` from the media element. `currentTime` indicates
 * the current second that the media is at in playback.
 *
 * @method Html5#currentTime
 * @return {number}
 *         The value of `currentTime` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
 */

/**
 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
 * whether the media should start muted or not. Only changes the default state of the
 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
 * current state.
 *
 * @method Html5#defaultMuted
 * @return {boolean}
 *         - The value of `defaultMuted` from the media element.
 *         - True indicates that the media should start muted.
 *         - False indicates that the media should not start muted
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */

/**
 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
 * the rate at which the media is currently playing back. This value will not indicate the current
 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
 *
 * Examples:
 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.defaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */

/**
 * Get the value of `ended` from the media element. `ended` indicates whether
 * the media has reached the end or not.
 *
 * @method Html5#ended
 * @return {boolean}
 *         - The value of `ended` from the media element.
 *         - True indicates that the media has ended.
 *         - False indicates that the media has not ended.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
 */

/**
 * Get the value of `loop` from the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#loop
 * @return {boolean}
 *         - The value of `loop` from the media element.
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */

/**
 * Get the value of `muted` from the media element. `muted` indicates
 * that the volume for the media should be set to silent. This does not actually change
 * the `volume` attribute.
 *
 * @method Html5#muted
 * @return {boolean}
 *         - True if the value of `volume` should be ignored and the audio set to silent.
 *         - False if the value of `volume` should be used.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */

/**
 * Get the value of `networkState` from the media element. `networkState` indicates
 * the current network state. It returns an enumeration from the following list:
 * - 0: NETWORK_EMPTY
 * - 1: NETWORK_IDLE
 * - 2: NETWORK_LOADING
 * - 3: NETWORK_NO_SOURCE
 *
 * @method Html5#networkState
 * @return {number}
 *         The value of `networkState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
 */

/**
 * Get the value of `paused` from the media element. `paused` indicates whether the media element
 * is currently paused or not.
 *
 * @method Html5#paused
 * @return {boolean}
 *         The value of `paused` from the media element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
 */

/**
 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
 * the rate at which the media is currently playing back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#playbackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */

/**
 * Get the value of `played` from the media element. `played` returns a `TimeRange`
 * object representing points in the media timeline that have been played.
 *
 * @method Html5#played
 * @return {TimeRange}
 *         The value of `played` from the media element. A `TimeRange` object indicating
 *         the ranges of time that have been played.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
 */

/**
 * Get the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#playsinline
 * @return {boolean}
 *         - The value of `playsinline` from the media element.
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */

/**
 * Get the value of `poster` from the media element. `poster` indicates
 * that the url of an image file that can/will be shown when no media data is available.
 *
 * @method Html5#poster
 * @return {string}
 *         The value of `poster` from the media element. Value will be a url to an
 *         image.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
 */

/**
 * Get the value of `preload` from the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#preload
 * @return {string}
 *         The value of `preload` from the media element. Will be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */

/**
 * Get the value of `readyState` from the media element. `readyState` indicates
 * the current state of the media element. It returns an enumeration from the
 * following list:
 * - 0: HAVE_NOTHING
 * - 1: HAVE_METADATA
 * - 2: HAVE_CURRENT_DATA
 * - 3: HAVE_FUTURE_DATA
 * - 4: HAVE_ENOUGH_DATA
 *
 * @method Html5#readyState
 * @return {number}
 *         The value of `readyState` from the media element. This will be a number
 *         from the list in the description.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
 */

/**
 * Get the value of `seekable` from the media element. `seekable` returns a
 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
 *
 * @method Html5#seekable
 * @return {TimeRange}
 *         The value of `seekable` from the media element. A `TimeRange` object
 *         indicating the current ranges of time that can be seeked to.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
 */

/**
 * Get the value of `seeking` from the media element. `seeking` indicates whether the
 * media is currently seeking to a new position or not.
 *
 * @method Html5#seeking
 * @return {boolean}
 *         - The value of `seeking` from the media element.
 *         - True indicates that the media is currently seeking to a new position.
 *         - False indicates that the media is not seeking to a new position at this time.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
 */

/**
 * Get the value of `videoHeight` from the video element. `videoHeight` indicates
 * the current height of the video in css pixels.
 *
 * @method Html5#videoHeight
 * @return {number}
 *         The value of `videoHeight` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */

/**
 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
 * the current width of the video in css pixels.
 *
 * @method Html5#videoWidth
 * @return {number}
 *         The value of `videoWidth` from the video element. This will be a number
 *         in css pixels.
 *
 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
 */

/**
 * Get the value of `volume` from the media element. `volume` indicates
 * the current playback volume of audio for a media. `volume` will be a value from 0
 * (silent) to 1 (loudest and default).
 *
 * @method Html5#volume
 * @return {number}
 *         The value of `volume` from the media element. Value will be between 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */

/**
 * Get the value of an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to get the value of.
 *
 * @return {string}
 *         The value of the attribute.
 */

/**
 * Get the value of the `error` from the media element. `error` indicates any
 * MediaError that may have occurred during playback. If error returns null there is no
 * current error.
 *
 * @method Html5#error
 * @return {MediaError|null}
 *         The value of `error` from the media element. Will be `MediaError` if there
 *         is a current error and null otherwise.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
 */

/**
 * Get the {@link AudioTrackList}
 *
 * @returns {AudioTrackList}
 * @method Tech.prototype.audioTracks
 */

/**
 * Get the {@link AudioTrackList}
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
 *
 * @return {AudioTrackList}
 *         the current audio track list
 *
 * @method Player.prototype.audioTracks
 */

/**
 * Get the {@link TextTrackList}
 *
 * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
 *
 * @return {TextTrackList}
 *         the current text track list
 *
 * @method Player.prototype.textTracks
 */

/**
 * Get the {@link TextTrackList}
 *
 * @returns {TextTrackList}
 * @method Tech.prototype.textTracks
 */

/**
 * Get the {@link VideoTrackList}
 *
 * @returns {VideoTrackList}
 * @method Tech.prototype.videoTracks
 */

/**
 * Get the {@link VideoTrackList}
 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
 *
 * @return {VideoTrackList}
 *         the current video track list
 *
 * @method Player.prototype.videoTracks
 */

/**
 * Gets a plugin by name if it exists.
 *
 * @static
 * @method   getPlugin
 * @memberOf Plugin
 * @param    {string} name
 *           The name of a plugin.
 *
 * @returns  {Function|undefined}
 *           The plugin (or `undefined`).
 */

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

/**
 * Gets the value of the selected <option> element within a <select> element.
 *
 * @param  {Element} el
 *         the element to look in
 *
 * @param  {Function} [parser]
 *         Optional function to adjust the value.
 *
 * @return {Mixed}
 *         - Will be `undefined` if no value exists
 *         - Will be `undefined` if the given value is "none".
 *         - Will be the actual value otherwise.
 *
 * @private
 */

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */

/**
 * Global enumeration of players.
 *
 * The keys are the player IDs and the values are either the {@link Player}
 * instance or `null` for disposed players.
 *
 * @type {Object}
 */

/**
 * Goes through all the playlists and collects an array of KeySystems options objects
 * containing each playlist's keySystems and their pssh values, if available.
 *
 * @param {Object[]} playlists
 *        The playlists to look through
 * @param {string[]} keySystems
 *        The keySystems to collect pssh values for
 *
 * @return {KeySystems[]}
 *         An array of KeySystems objects containing available key systems and their
 *         pssh values
 */

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */

/**
 * HLS is a source handler, not a tech. Make sure attempts to use it
 * as one do not cause exceptions.
 */

/**
 * Helper for doing math with CSS Units. Accepts a formula as a string. All values in the formula must have the same unit (or be unitless). Supports complex formulas utliziing addition, subtraction, multiplication, division, square root, powers, factorial, min, max, as well as parentheses for order of operation.
 *
 *In cases where you need to do calculations with mixed units where one unit is a [relative length unit](https://developer.mozilla.org/en-US/docs/Web/CSS/length#Relative_length_units), you will want to use [CSS Calc](https://developer.mozilla.org/en-US/docs/Web/CSS/calc).
 *
 * *warning* While we've done everything possible to ensure math safely evalutes formulas expressed as strings, you should always use extreme caution when passing `math` user provided values.
 * @example
 * // Styles as object usage
 * const styles = {
 *   fontSize: math('12rem + 8rem'),
 *   fontSize: math('(12px + 2px) * 3'),
 *   fontSize: math('3px^2 + sqrt(4)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   fontSize: ${math('12rem + 8rem')};
 *   fontSize: ${math('(12px + 2px) * 3')};
 *   fontSize: ${math('3px^2 + sqrt(4)')};
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   fontSize: '20rem',
 *   fontSize: '42px',
 *   fontSize: '11px',
 * }
 */

/**
 * Helper for targeting rules in a style block generated by polished modules that need !important-level specificity. Can optionally specify a rule (or rules) to target specific rules.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...important(cover())
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${important(cover())}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   'position': 'absolute !important',
 *   'top': '0 !important',
 *   'right: '0 !important',
 *   'bottom': '0 !important',
 *   'left: '0 !important'
 * }
 */

/**
 * Helpers.
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * ID3v1 Genre mappings
 * Ref: https://de.wikipedia.org/wiki/Liste_der_ID3v1-Genres
 */

/**
 * ID3v1 tag mappings
 */

/**
 * ID3v2 header
 * Ref: http://id3.org/id3v2.3.0#ID3v2_header
 * ToDo
 */

/**
 * ID3v2.2 tag mappings
 */

/**
 * IEEE 754 16-bit (half precision) float, big endian
 */

/**
 * IEEE 754 16-bit (half precision) float, little endian
 */

/**
 * IEEE 754 32-bit (single precision) float, big endian
 */

/**
 * IEEE 754 32-bit (single precision) float, little endian
 */

/**
 * IEEE 754 64-bit (double precision) float, big endian
 */

/**
 * IEEE 754 64-bit (double precision) float, little endian
 */

/**
 * IEEE 754 80-bit (extended precision) float, big endian
 */

/**
 * IEEE 754 80-bit (extended precision) float, little endian
 */

/**
 * Identical to the native `getBoundingClientRect` function, but ensures that
 * the method is supported at all (it is in all browsers we claim to support)
 * and that the element is in the DOM before continuing.
 *
 * This wrapper function also shims properties which are not provided by some
 * older browsers (namely, IE8).
 *
 * Additionally, some browsers do not support adding properties to a
 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
 * properties (except `x` and `y` which are not widely supported). This helps
 * avoid implementations where keys are non-enumerable.
 *
 * @param  {Element} el
 *         Element whose `ClientRect` we want to calculate.
 *
 * @return {Object|undefined}
 *         Always returns a plain object - or `undefined` if it cannot.
 */

/**
 * Identification header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2
 */

/**
 * Ignore a given number of bytes
 */

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */

/**
 * Implements an <option> host component that warns when `selected` is set.
 */

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

/**
 * Increases the intensity of a color. Its range is between 0 to 1. The first
 * argument of the saturate function is the amount by how much the color
 * intensity should be increased.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: saturate(0.2, '#CCCD64'),
 *   background: saturate('0.2', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${saturate(0.2, '#FFCD64')};
 *   background: ${saturate('0.2', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#e0e250";
 *   background: "rgba(224,226,80,0.7)";
 * }
 */

/**
 * Increases the opacity of a color. Its range for the amount is between 0 to 1.
 *
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: opacify(0.1, 'rgba(255, 255, 255, 0.9)');
 *   background: opacify(0.2, 'hsla(0, 0%, 100%, 0.5)'),
 *   background: opacify('0.5', 'rgba(255, 0, 0, 0.2)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${opacify(0.1, 'rgba(255, 255, 255, 0.9)')};
 *   background: ${opacify(0.2, 'hsla(0, 0%, 100%, 0.5)')},
 *   background: ${opacify('0.5', 'rgba(255, 0, 0, 0.2)')},
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#fff";
 *   background: "rgba(255,255,255,0.7)";
 *   background: "rgba(255,0,0,0.7)";
 * }
 */

/**
 * Info Tag
 * Ref: http://gabriel.mp3-tech.org/mp3infotag.html
 */

/**
 * Info Tag: Xing, LAME
 */

/**
 * Injects text into an element, replacing any existing contents entirely.
 *
 * @param  {Element} el
 *         The element to add text content into
 *
 * @param  {string} text
 *         The text content to add.
 *
 * @return {Element}
 *         The element with added text content.
 */

/**
 * Insert an element as the first child node of another
 *
 * @param {Element} child
 *        Element to insert
 *
 * @param {Element} parent
 *        Element to insert child into
 */

/**
 * Inverts the red, green and blue values of a color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: invert('#CCCD64'),
 *   background: invert('rgba(101,100,205,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${invert('#CCCD64')};
 *   background: ${invert('rgba(101,100,205,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#33329b";
 *   background: "rgba(154,155,50,0.7)";
 * }
 */

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */

/**
 * It's falsish not falsy because 0 is allowed.
 */

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */

/**
 * Just an empty spacer element that can be used as an append point for plugins, etc.
 * Also can be used to create space between elements when necessary.
 *
 * @extends Component
 */

/**
 * Keep a number between a min and a max value
 *
 * @param {number} number
 *        The number to clamp
 *
 * @param {number} min
 *        The minimum value
 * @param {number} max
 *        The maximum value
 *
 * @return {number}
 *         the clamped number
 */

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */

/**
 * Keeps track of the current dispatcher.
 */

/**
 * LAME TAG value
 * Did not find any official documentation for this
 * Value e.g.: "3.98.4"
 */

/**
 * List of associated audio tracks.
 *
 * @type {AudioTrackList}
 * @private
 * @property Tech#audioTracks_
 */

/**
 * List of associated text tracks
 *
 * @type {TextTrackList}
 * @private
 * @property Tech#textTracks_
 */

/**
 * List of associated video tracks.
 *
 * @type {VideoTrackList}
 * @private
 * @property Tech#videoTracks_
 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Loops through an array of event types and calls the requested method for each type.
 *
 * @param {Function} fn
 *        The event method we want to use.
 *
 * @param {Element|Object} elem
 *        Element or object to bind listeners to
 *
 * @param {string} type
 *        Type of event to bind to.
 *
 * @param {EventTarget~EventListener} callback
 *        Event listener.
 */

/**
 * Lowercase the first letter of a string.
 *
 * @param {string} string
 *        String to be lowercased
 *
 * @return {string}
 *         The string with a lowercased first letter
 */

/**
 * METADATA_BLOCK_DATA
 * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo
 */

/**
 * MPEG Audio Layer I/II/III
 */

/**
 * MPEG Audio Layer I/II/III frame header
 * Ref: https://www.mp3-tech.org/programmer/frame_header.html
 * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM
 * Ref: https://wiki.multimedia.cx/index.php/ADTS
 */

/**
 * Manipulate Text Tracks settings.
 *
 * @extends ModalDialog
 */

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */

/**
 * Merge two objects recursively.
 *
 * Performs a deep merge like
 * {@link https://lodash.com/docs/4.17.10#merge|lodash.merge}, but only merges
 * plain objects (not arrays, elements, or anything else).
 *
 * Non-plain object values will be copied directly from the right-most
 * argument.
 *
 * @static
 * @param   {Object[]} sources
 *          One or more objects to merge into a new object.
 *
 * @return {Object}
 *          A new object that is the merged result of all sources.
 */

/**
 * Mimetypes
 *
 * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm
 * @typedef Mimetypes~Kind
 * @enum
 */

/**
 * Mixes the two provided colors together by calculating the average of each of the RGB components weighted to the first color by the provided weight.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: mix(0.5, '#f00', '#00f')
 *   background: mix(0.25, '#f00', '#00f')
 *   background: mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${mix(0.5, '#f00', '#00f')};
 *   background: ${mix(0.25, '#f00', '#00f')};
 *   background: ${mix('0.5', 'rgba(255, 0, 0, 0.5)', '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#7f007f";
 *   background: "#3f00bf";
 *   background: "rgba(63, 0, 191, 0.75)";
 * }
 */

/**
 * Module convert fs functions to promise based functions
 */

/**
 * Module exports.
 * @public
 */

/**
 * Module exports.
 */

/**
 * Native source handler for Html5, simply passes the source to the media element.
 *
 * @property {Tech~SourceObject} source
 *        The source object
 *
 * @property {Html5} tech
 *        The instance of the HTML5 tech.
 */

/**
 * Normalize an `id` value by trimming off a leading `#`
 *
 * @private
 * @param   {string} id
 *          A string, maybe with a leading `#`.
 *
 * @return {string}
 *          The string, without any leading `#`.
 */

/**
 * Normalizes and appends content to an element.
 *
 * @param  {Element} el
 *         Element to append normalized content to.
 *
 * @param {module:dom~ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Element}
 *         The element with appended normalized content.
 */

/**
 * Normalizes and inserts content into an element; this is identical to
 * `appendContent()`, except it empties the element first.
 *
 * @param {Element} el
 *        Element to insert normalized content into.
 *
 * @param {module:dom~ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Element}
 *         The element with inserted normalized content.
 */

/**
 * Normalizes content for eventual insertion into the DOM.
 *
 * This allows a wide range of content definition methods, but helps protect
 * from falling into the trap of simply writing to `innerHTML`, which could
 * be an XSS concern.
 *
 * The content for an element can be passed in multiple types and
 * combinations, whose behavior is as follows:
 *
 * @param {module:dom~ContentDescriptor} content
 *        A content descriptor value.
 *
 * @return {Array}
 *         All of the content that was passed in, normalized to an array of
 *         elements or text nodes.
 */

/**
 * Object.assign-style object shallow merge/extend.
 *
 * @param  {Object} target
 * @param  {Object} ...sources
 * @return {Object}
 */

/**
 * Operations for dealing with CSS properties.
 */

/**
 * Opus ID Header parser
 * Ref: https://wiki.xiph.org/OggOpus#ID_Header
 */

/**
 * Opus parser
 * Internet Engineering Task Force (IETF) - RFC 6716
 * Used by OggParser
 */

/**
 * Parse audio from ITokenizer source
 * @param tokenizer - Audio source implementing the tokenizer interface
 * @param options - Parsing options
 * @returns Metadata
 */

/**
 * Parse audio from Node Buffer
 * @param buf - Buffer holding audio data
 * @param fileInfo - File information object or MIME-type string
 * @param options - Parsing options
 * @returns Metadata
 * Ref: https://github.com/Borewit/strtok3/blob/e6938c81ff685074d5eb3064a11c0b03ca934c1d/src/index.ts#L15
 */

/**
 * Parse audio from Node Stream.Readable
 * @param stream - Stream to read the audio track from
 * @param fileInfo - File information object or MIME-type, e.g.: 'audio/mpeg'
 * @param options - Parsing options
 * @returns Metadata
 */

/**
 * Parse audio from Node Stream.Readable
 * @param stream - Stream to read the audio track from
 * @param options - Parsing options
 * @param fileInfo - File information object or MIME-type string
 * @returns Metadata
 */

/**
 * Parse audio from Node file
 * @param filePath - Media file to read meta-data from
 * @param options - Parsing options
 * @returns Metadata
 */

/**
 * Parse errors.md and turn it into a simple hash of code: message
 * @private
 */

/**
 * Parse media type to object.
 *
 * @param {string|object} string
 * @return {Object}
 * @public
 */

/**
 * Parse media type to object.
 *
 * @param {string} string
 * @return {object}
 * @public
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the METADATA_BLOCK_PICTURE
 * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE
 * Ref: https://xiph.org/flac/format.html#metadata_block_picture
 * // ToDo: move to ID3 / APIC?
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Parser for Ogg logical bitstream framing
 */

/**
 * Parses an MP4 initialization segment and extracts the timescale
 * values for any declared tracks. Timescale values indicate the
 * number of clock ticks per second to assume for time-based values
 * elsewhere in the MP4.
 *
 * To determine the start time of an MP4, you need two pieces of
 * information: the timescale unit and the earliest base media decode
 * time. Multiple timescales can be specified within an MP4 but the
 * base media decode time is always expressed in the timescale from
 * the media header box for the track:
 * ```
 * moov > trak > mdia > mdhd.timescale
 * ```
 * @param init {Uint8Array} the bytes of the init segment
 * @return {object} a hash of track ids to timescale values or null if
 * the init segment is malformed.
 */

/**
 * Pass the source to the native media element.
 *
 * @param {Tech~SourceObject} source
 *        The source object
 *
 * @param {Html5} tech
 *        The instance of the Html5 tech
 *
 * @param {Object} [options]
 *        The options to pass to the source
 */

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

/**
 * Pluralization helper.
 */

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */

/**
 * Populates selectors that target all buttons. You can pass optional states to append to the selectors.
 * @example
 * // Styles as object usage
 * const styles = {
 *   [buttons('active')]: {
 *     'border': 'none'
 *   }
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   > ${buttons('active')} {
 *     border: none;
 *   }
 * `
 *
 * // CSS in JS Output
 *
 *  'button:active,
 *  'input[type="button"]:active,
 *  'input[type=\"reset\"]:active,
 *  'input[type=\"submit\"]:active: {
 *   'border': 'none'
 * }
 */

/**
 * Populates selectors that target all text inputs. You can pass optional states to append to the selectors.
 * @example
 * // Styles as object usage
 * const styles = {
 *   [textInputs('active')]: {
 *     'border': 'none'
 *   }
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   > ${textInputs('active')} {
 *     border: none;
 *   }
 * `
 *
 * // CSS in JS Output
 *
 *  'input[type="color"]:active,
 *  input[type="date"]:active,
 *  input[type="datetime"]:active,
 *  input[type="datetime-local"]:active,
 *  input[type="email"]:active,
 *  input[type="month"]:active,
 *  input[type="number"]:active,
 *  input[type="password"]:active,
 *  input[type="search"]:active,
 *  input[type="tel"]:active,
 *  input[type="text"]:active,
 *  input[type="time"]:active,
 *  input[type="url"]:active,
 *  input[type="week"]:active,
 *  input:not([type]):active,
 *  textarea:active': {
 *   'border': 'none'
 * }
 */

/**
 * Prevents the browser from suggesting a Picture-in-Picture context menu
 * or to request Picture-in-Picture automatically in some cases.
 *
 * @method Html5#setDisablePictureInPicture
 * @param {boolean} value
 *         The true value will disable Picture-in-Picture mode.
 *
 * @see [Spec]{@link https://w3c.github.io/picture-in-picture/#disable-pip}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Produce a regular expression for matching a className within an elements className.
 *
 * @private
 * @param  {string} className
 *         The className to generate the RegExp for.
 *
 * @return {RegExp}
 *         The RegExp that will check for a specific `className` in an elements
 *         className.
 */

/**
 * Provided to the parser to uodate the metadata result.
 * Responsible for triggering async updates
 */

/**
 * Provides a set of static methods for creating Disposables.
 * @param {Function} action Action to run during the first call to dispose.
 * The action is guaranteed to be run at most once.
 */

/**
 * Provides abstract Node Buffer access via the IRandomRead interface
 */

/**
 * Provides abstract file access via the IRandomRead interface
 */

/**
 * Provides an easy way to change the `wordWrap` property.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...wordWrap('break-word')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${wordWrap('break-word')}
 * `
 *
 * // CSS as JS Output
 *
 * const styles = {
 *   overflowWrap: 'break-word',
 *   wordWrap: 'break-word',
 *   wordBreak: 'break-all',
 * }
 */

/**
 * Quote a string if necessary.
 *
 * @param {string} val
 * @return {string}
 * @private
 */

/**
 * RIFF Info Tags; part of the EXIF 2.3
 * Ref: http://owl.phy.queensu.ca/~phil/exiftool/TagNames/RIFF.html#Info
 */

/**
 * Read Codec-Entries
 * @param tokenizer
 */

/**
 * Reduces hex values if possible e.g. #ff8866 to #f86
 * @private
 */

/**
 * Ref:
 *    https://tools.ietf.org/html/draft-fleischman-asf-01, Appendix A: ASF GUIDs
 *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 *
 *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 *
 *  ASF File Structure:
 *    https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 *
 *  ASF GUIDs:
 *    http://drang.s4.xrea.com/program/tips/id3tag/wmp/10_asf_guids.html
 *
 *    https://github.com/dji-sdk/FFmpeg/blob/master/libavformat/asf.c
 */

/**
 * Ref:
 *   https://theora.org/doc/Theora.pdf
 */

/**
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap1/qtff1.html#//apple_ref/doc/uid/TP40000939-CH203-38190
 */

/**
 * Ref: https://github.com/sergiomb2/libmp4v2/wiki/iTunesMetadata
 */

/**
 * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx
 */

/**
 * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
 *
 * parameter     = token "=" ( token / quoted-string )
 * token         = 1*tchar
 * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
 *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
 *               / DIGIT / ALPHA
 *               ; any VCHAR, except delimiters
 * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
 * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
 * obs-text      = %x80-FF
 * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
 */

/**
 * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
 */

/**
 * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
 *
 * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
 * obs-text    = %x80-FF
 */

/**
 * RegExp to match type in RFC 6838
 *
 * type-name = restricted-name
 * subtype-name = restricted-name
 * restricted-name = restricted-name-first *126restricted-name-chars
 * restricted-name-first  = ALPHA / DIGIT
 * restricted-name-chars  = ALPHA / DIGIT / "!" / "#" /
 *                          "$" / "&" / "-" / "^" / "_"
 * restricted-name-chars =/ "." ; Characters before first dot always
 *                              ; specify a facet name
 * restricted-name-chars =/ "+" ; Characters after last plus always
 *                              ; specify a structured syntax suffix
 * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z
 * DIGIT =  %x30-39             ; 0-9
 */

/**
 * RegExp to match type in RFC 7231 sec 3.1.1.1
 *
 * media-type = type "/" subtype
 * type       = token
 * subtype    = token
 */

/**
 * Register a component so it can referred to by name. Used when adding to other
 * components, either through addChild `component.addChild('myComponent')` or through
 * default children options  `{ children: ['myComponent'] }`.
 *
 * > NOTE: You could also just initialize the component before adding.
 * `component.addChild(new MyComponent());`
 *
 * @param {string} name
 *        The class name of the component
 *
 * @param {Component} comp
 *        The component class
 *
 * @return {Component}
 *         The newly registered component
 */

/**
 * Remove a class name from an element.
 *
 * @param  {Element} element
 *         Element to remove a class name from.
 *
 * @param  {string} classToRemove
 *         Class name to remove
 *
 * @return {Element}
 *         The DOM element with class name removed.
 */

/**
 * Remove a hook from a specific videojs lifecycle.
 *
 * @param  {string} type
 *         the lifecycle that the function hooked to
 *
 * @param  {Function} fn
 *         The hooked function to remove
 *
 * @return {boolean}
 *         The function that was removed or undef
 */

/**
 * Remove an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to remove.
 */

/**
 * Removes an `event listener` for a specific event from an instance of `EventTarget`.
 * This makes it so that the `event listener` will no longer get called when the
 * named event happens.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to remove.
 */

/**
 * Removes event listeners from an element
 *
 * @param {Element|Object} elem
 *        Object to remove listeners from.
 *
 * @param {string|string[]} [type]
 *        Type of listener to remove. Don't include to remove all events from element.
 *
 * @param {EventTarget~EventListener} [fn]
 *        Specific listener to remove. Don't include to remove listeners for an event
 *        type.
 */

/**
 * Replaces the default formatTime implementation with a custom implementation.
 *
 * @param {Function} customImplementation
 *        A function which will be used in place of the default formatTime
 *        implementation. Will receive the current time in seconds and the
 *        guide (in seconds) as arguments.
 */

/**
 * Reports whether or not a player has a plugin available.
 *
 * This does not report whether or not the plugin has ever been initialized
 * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
 *
 * @method Player#hasPlugin
 * @param  {string}  name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player has the requested plugin available.
 */

/**
 * Reports whether or not a player is using a plugin by name.
 *
 * For basic plugins, this only reports whether the plugin has _ever_ been
 * initialized on this player.
 *
 * @method Player#usingPlugin
 * @param  {string} name
 *         The name of a plugin.
 *
 * @return {boolean}
 *         Whether or not this player is using the requested plugin.
 */

/**
 * Represents a group of disposable resources that are disposed together.
 * @constructor
 */

/**
 * Represents the position of a DOM element on the page.
 *
 * @typedef  {Object} module:dom~Position
 *
 * @property {number} left
 *           Pixels to the left.
 *
 * @property {number} top
 *           Pixels from the top.
 */

/**
 * Represents x and y coordinates for a DOM element or mouse pointer.
 *
 * @typedef  {Object} module:dom~Coordinates
 *
 * @property {number} x
 *           x coordinate in pixels
 *
 * @property {number} y
 *           y coordinate in pixels
 */

/**
 * Resets formatTime to the default implementation.
 */

/**
 * Resets warning cache when testing.
 *
 * @private
 */

/**
 * Resource Interchange File Format (RIFF) Parser
 *
 * WAVE PCM soundfile format
 *
 * Ref:
 *  http://www.johnloomis.org/cpe102/asgn/asgn1/riff.html
 *  http://soundfile.sapp.org/doc/WaveFormat
 *
 *  ToDo: Split WAVE part from RIFF parser
 */

/**
 * Retrigger the `abort` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechAbort_
 * @fires Player#abort
 * @listens Tech#abort
 */

/**
 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechEmptied_
 * @fires Player#emptied
 * @listens Tech#emptied
 */

/**
 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoaddeddata_
 * @fires Player#loadeddata
 * @listens Tech#loadeddata
 */

/**
 * Retrigger the `progress` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechProgress_
 * @fires Player#progress
 * @listens Tech#progress
 */

/**
 * Retrigger the `resize` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechResize_
 * @fires Player#resize
 * @listens Tech#resize
 */

/**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechLoadedmetadata_
 * @fires Player#loadedmetadata
 * @listens Tech#loadedmetadata
 */

/**
 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechStalled_
 * @fires Player#stalled
 * @listens Tech#stalled
 */

/**
 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechSuspend_
 * @fires Player#suspend
 * @listens Tech#suspend
 */

/**
 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTexttrackchange_
 * @fires Player#texttrackchange
 * @listens Tech#texttrackchange
 */

/**
 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechTimeUpdate_
 * @fires Player#timeupdate
 * @listens Tech#timeupdate
 */

/**
 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
 *
 * @private
 * @method Player#handleTechVolumechange_
 * @fires Player#volumechange
 * @listens Tech#volumechange
 */

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

/**
 * Returns a CSS calc formula for linear interpolation of a property between two values. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px').
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   fontSize: between('20px', '100px', '400px', '1000px'),
 *   fontSize: between('20px', '100px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   fontSize: ${between('20px', '100px', '400px', '1000px')};
 *   fontSize: ${between('20px', '100px')}
 * `
 *
 * // CSS as JS Output
 *
 * h1: {
 *   'fontSize': 'calc(-33.33333333333334px + 13.333333333333334vw)',
 *   'fontSize': 'calc(-9.090909090909093px + 9.090909090909092vw)'
 * }
 */

/**
 * Returns a given CSS value and its unit as elements of an array.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   '--dimension': getValueAndUnit('100px')[0],
 *   '--unit': getValueAndUnit('100px')[1],
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   --dimension: ${getValueAndUnit('100px')[0]};
 *   --unit: ${getValueAndUnit('100px')[1]};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   '--dimension': 100,
 *   '--unit': 'px',
 * }
 */

/**
 * Returns a given CSS value minus its unit of measure.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   '--dimension': stripUnit('100px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   --dimension: ${stripUnit('100px')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   '--dimension': 100
 * }
 */

/**
 * Returns a number (float) representing the luminance of a color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff',
 *   background: getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?
 *                             'rgba(58, 133, 255, 1)' :
 *                             'rgba(255, 57, 149, 1)',
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${getLuminance('#CCCD64') >= getLuminance('#0000ff') ? '#CCCD64' : '#0000ff'};
 *   background: ${getLuminance('rgba(58, 133, 255, 1)') >= getLuminance('rgba(255, 57, 149, 1)') ?
 *                             'rgba(58, 133, 255, 1)' :
 *                             'rgba(255, 57, 149, 1)'};
 *
 * // CSS in JS Output
 *
 * div {
 *   background: "#CCCD64";
 *   background: "rgba(58, 133, 255, 1)";
 * }
 */

/**
 * Returns a set of codec strings parsed from the playlist or the default
 * codec strings if no codecs were specified in the playlist
 *
 * @param {Playlist} media the current media playlist
 * @return {Object} an object with the video and audio codecs
 */

/**
 * Returns a set of media queries that resizes a property (or set of properties) between a provided fromSize and toSize. Accepts optional minScreen (defaults to '320px') and maxScreen (defaults to '1200px') to constrain the interpolation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...fluidRange(
 *    {
 *        prop: 'padding',
 *        fromSize: '20px',
 *        toSize: '100px',
 *      },
 *      '400px',
 *      '1000px',
 *    )
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${fluidRange(
 *      {
 *        prop: 'padding',
 *        fromSize: '20px',
 *        toSize: '100px',
 *      },
 *      '400px',
 *      '1000px',
 *    )}
 * `
 *
 * // CSS as JS Output
 *
 * div: {
 *   "@media (min-width: 1000px)": Object {
 *     "padding": "100px",
 *   },
 *   "@media (min-width: 400px)": Object {
 *     "padding": "calc(-33.33333333333334px + 13.333333333333334vw)",
 *   },
 *   "padding": "20px",
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: hsl(359, 0.75, 0.4),
 *   background: hsl({ hue: 360, saturation: 0.75, lightness: 0.4 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${hsl(359, 0.75, 0.4)};
 *   background: ${hsl({ hue: 360, saturation: 0.75, lightness: 0.4 })};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#b3191c";
 *   background: "#b3191c";
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgb(255, 205, 100),
 *   background: rgb({ red: 255, green: 205, blue: 100 }),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgb(255, 205, 100)};
 *   background: ${rgb({ red: 255, green: 205, blue: 100 })};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#ffcd64";
 *   background: "#ffcd64";
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: hsla(359, 0.75, 0.4, 0.7),
 *   background: hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 }),
 *   background: hsla(359, 0.75, 0.4, 1),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${hsla(359, 0.75, 0.4, 0.7)};
 *   background: ${hsla({ hue: 360, saturation: 0.75, lightness: 0.4, alpha: 0,7 })};
 *   background: ${hsla(359, 0.75, 0.4, 1)};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(179,25,28,0.7)";
 *   background: "rgba(179,25,28,0.7)";
 *   background: "#b3191c";
 * }
 */

/**
 * Returns a string value for the color. The returned result is the smallest possible rgba or hex notation.
 *
 * Can also be used to fade a color by passing a hex value or named CSS color along with an alpha value.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: rgba(255, 205, 100, 0.7),
 *   background: rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 }),
 *   background: rgba(255, 205, 100, 1),
 *   background: rgba('#ffffff', 0.4),
 *   background: rgba('black', 0.7),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${rgba(255, 205, 100, 0.7)};
 *   background: ${rgba({ red: 255, green: 205, blue: 100, alpha: 0.7 })};
 *   background: ${rgba(255, 205, 100, 1)};
 *   background: ${rgba('#ffffff', 0.4)};
 *   background: ${rgba('black', 0.7)};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "rgba(255,205,100,0.7)";
 *   background: "rgba(255,205,100,0.7)";
 *   background: "#ffcd64";
 *   background: "rgba(255,255,255,0.4)";
 *   background: "rgba(0,0,0,0.7)";
 * }
 */

/**
 * Returns a string value for the darkened color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: darken(0.2, '#FFCD64'),
 *   background: darken('0.2', 'rgba(255,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${darken(0.2, '#FFCD64')};
 *   background: ${darken('0.2', 'rgba(255,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#ffbd31";
 *   background: "rgba(255,189,49,0.7)";
 * }
 */

/**
 * Returns a string value for the lightened color.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: lighten(0.2, '#CCCD64'),
 *   background: lighten('0.2', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${lighten(0.2, '#FFCD64')};
 *   background: ${lighten('0.2', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#e5e6b1";
 *   background: "rgba(229,230,177,0.7)";
 * }
 */

/**
 * Returns a value that expresses the current state of the element
 * with respect to rendering the current playback position, from the
 * codes in the list below.
 * - HAVE_NOTHING (numeric value 0)
 *   No information regarding the media resource is available.
 * - HAVE_METADATA (numeric value 1)
 *   Enough of the resource has been obtained that the duration of the
 *   resource is available.
 * - HAVE_CURRENT_DATA (numeric value 2)
 *   Data for the immediate current playback position is available.
 * - HAVE_FUTURE_DATA (numeric value 3)
 *   Data for the immediate current playback position is available, as
 *   well as enough data for the user agent to advance the current
 *   playback position in the direction of playback.
 * - HAVE_ENOUGH_DATA (numeric value 4)
 *   The user agent estimates that enough data is available for
 *   playback to proceed uninterrupted.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
 * @return {number} the current playback rendering state
 * @method Player#readyState
 */

/**
 * Returns a wrapper around Web Worker code that is constructible.
 *
 * @function shimWorker
 *
 * @param { String }    filename    The name of the file
 * @param { Function }  fn          Function wrapping the code of the worker
 */

/**
 * Returns an HslColor or HslaColor object. This utility function is only useful
 * if want to extract a color component. With the color util `toColorString` you
 * can convert a HslColor or HslaColor object back to a string.
 *
 * @example
 * // Assigns `{ hue: 0, saturation: 1, lightness: 0.5 }` to color1
 * const color1 = parseToHsl('rgb(255, 0, 0)');
 * // Assigns `{ hue: 128, saturation: 1, lightness: 0.5, alpha: 0.75 }` to color2
 * const color2 = parseToHsl('hsla(128, 100%, 50%, 0.75)');
 */

/**
 * Returns an RgbColor or RgbaColor object. This utility function is only useful
 * if want to extract a color component. With the color util `toColorString` you
 * can convert a RgbColor or RgbaColor object back to a string.
 *
 * @example
 * // Assigns `{ red: 255, green: 0, blue: 0 }` to color1
 * const color1 = parseToRgb('rgb(255, 0, 0)');
 * // Assigns `{ red: 92, green: 102, blue: 112, alpha: 0.75 }` to color2
 * const color2 = parseToRgb('hsla(210, 10%, 40%, 0.75)');
 */

/**
 * Returns an array of all current players.
 *
 * @return {Array}
 *         An array of all players. The array will be in the order that
 *         `Object.keys` provides, which could potentially vary between
 *         JavaScript engines.
 *
 */

/**
 * Returns black or white (or optional passed colors) for best
 * contrast depending on the luminosity of the given color.
 * When passing custom return colors, strict mode ensures that the
 * return color always meets or exceeds WCAG level AA or greater. If this test
 * fails, the default return color (black or white) is returned in place of the
 * custom return color. You can optionally turn off strict mode.
 *
 * Follows [W3C specs for readability](https://www.w3.org/TR/WCAG20-TECHS/G18.html).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   color: readableColor('#000'),
 *   color: readableColor('black', '#001', '#ff8'),
 *   color: readableColor('white', '#001', '#ff8'),
 *   color: readableColor('red', '#333', '#ddd', true)
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   color: ${readableColor('#000')};
 *   color: ${readableColor('black', '#001', '#ff8')};
 *   color: ${readableColor('white', '#001', '#ff8')};
 *   color: ${readableColor('red', '#333', '#ddd', true)};
 * `
 *
 * // CSS in JS Output
 * element {
 *   color: "#fff";
 *   color: "#ff8";
 *   color: "#001";
 *   color: "#000";
 * }
 */

/**
 * Returns the TimeRanges of the media that are currently available
 * for seeking to.
 *
 * @return {TimeRanges} the seekable intervals of the media timeline
 * @method Player#seekable
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Returns the complement of the provided color. This is identical to adjustHue(180, <color>).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: complement('#448'),
 *   background: complement('rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${complement('#448')};
 *   background: ${complement('rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#884";
 *   background: "rgba(153,153,153,0.7)";
 * }
 */

/**
 * Returns the contrast ratio between two colors based on
 * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).
 *
 * @example
 * const contrastRatio = getContrast('#444', '#fff');
 */

/**
 * Returns the current state of network activity for the element, from
 * the codes in the list below.
 * - NETWORK_EMPTY (numeric value 0)
 *   The element has not yet been initialised. All attributes are in
 *   their initial states.
 * - NETWORK_IDLE (numeric value 1)
 *   The element's resource selection algorithm is active and has
 *   selected a resource, but it is not actually using the network at
 *   this time.
 * - NETWORK_LOADING (numeric value 2)
 *   The user agent is actively trying to download data.
 * - NETWORK_NO_SOURCE (numeric value 3)
 *   The element's resource selection algorithm is active, but it has
 *   not yet found a resource to use.
 *
 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
 * @return {number} the current network activity state
 * @method Player#networkState
 */

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */

/**
 * Returns the time for the specified index at the start or end
 * of a TimeRange object.
 *
 * @typedef    {Function} TimeRangeIndex
 *
 * @param      {number} [index=0]
 *             The range number to return the time for.
 *
 * @return     {number}
 *             The time offset at the specified index.
 *
 * @deprecated The index argument must be provided.
 *             In the future, leaving it out will throw an error.
 */

/**
 * Returns whether a value is an object of any kind - including DOM nodes,
 * arrays, regular expressions, etc. Not functions, though.
 *
 * This avoids the gotcha where using `typeof` on a `null` value
 * results in `'object'`.
 *
 * @param  {Object} value
 * @return {boolean}
 */

/**
 * Returns whether an object appears to be a "plain" object - that is, a
 * direct instance of `Object`.
 *
 * @param  {Object} value
 * @return {boolean}
 */

/**
 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
 *
 * @param  {Object}  value
 *         An object that may or may not be `Promise`-like.
 *
 * @return {boolean}
 *         Whether or not the object is `Promise`-like.
 */

/**
 * Returns whether or not an object has had the evented mixin applied.
 *
 * @param  {Object} object
 *         An object to test.
 *
 * @return {boolean}
 *         Whether or not the object appears to be evented.
 */

/**
 * Returns whether or not the player is in the "ended" state.
 *
 * @return {Boolean} True if the player is in the ended state, false if not.
 * @method Player#ended
 */

/**
 * Returns whether or not the player is in the "seeking" state.
 *
 * @return {Boolean} True if the player is in the seeking state, false if not.
 * @method Player#seeking
 */

/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

/**
 * SECTION: handle `click` event
 */

/**
 * SECTION: handle `input` event
 */

/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

/**
 * Sample-size ('stsz') atom
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25710
 */

/**
 * Sample-to-Chunk ('stsc') atom interface
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25706
 */

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Select most likely cover image.
 * @param pictures Usually metadata.common.picture
 * @return Cover image, if any, otherwise null
 */

/**
 * Set the value of `autoplay` on the media element. `autoplay` indicates
 * that the media should start to play as soon as the page is ready.
 *
 * @method Html5#setAutoplay
 * @param {boolean} autoplay
 *         - True indicates that the media should start as soon as the page loads.
 *         - False indicates that the media should not start as soon as the page loads.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
 */

/**
 * Set the value of `crossOrigin` from the media element. `crossOrigin` indicates
 * to the browser that should sent the cookies along with the requests for the
 * different assets/playlists
 *
 * @method Html5#setCrossOrigin
 * @param {string} crossOrigin
 *         - anonymous indicates that the media should not sent cookies.
 *         - use-credentials indicates that the media should sent cookies along the requests.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-media-crossorigin}
 */

/**
 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
 * audio level should be silent, but will only effect the muted level on initial playback..
 *
 * @method Html5.prototype.setDefaultMuted
 * @param {boolean} defaultMuted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
 */

/**
 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
 * the rate at which the media should play back upon initial startup. Changing this value
 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
 *
 * Example Values:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5.prototype.setDefaultPlaybackRate
 * @return {number}
 *         The value of `defaultPlaybackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
 */

/**
 * Set the value of `loop` on the media element. `loop` indicates
 * that the media should return to the start of the media and continue playing once
 * it reaches the end.
 *
 * @method Html5#setLoop
 * @param {boolean} loop
 *         - True indicates that playback should seek back to start once
 *           the end of a media is reached.
 *         - False indicates that playback should not loop back to the start when the
 *           end of the media is reached.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
 */

/**
 * Set the value of `muted` on the media element. `muted` indicates that the current
 * audio level should be silent.
 *
 * @method Html5#setMuted
 * @param {boolean} muted
 *        - True if the audio should be set to silent
 *        - False otherwise
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
 */

/**
 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
 * the rate at which the media should play back. Examples:
 *   - if playbackRate is set to 2, media will play twice as fast.
 *   - if playbackRate is set to 0.5, media will play half as fast.
 *
 * @method Html5#setPlaybackRate
 * @return {number}
 *         The value of `playbackRate` from the media element. A number indicating
 *         the current playback speed of the media, where 1 is normal speed.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
 */

/**
 * Set the value of `playsinline` from the media element. `playsinline` indicates
 * to the browser that non-fullscreen playback is preferred when fullscreen
 * playback is the native default, such as in iOS Safari.
 *
 * @method Html5#setPlaysinline
 * @param {boolean} playsinline
 *         - True indicates that the media should play inline.
 *         - False indicates that the media should not play inline.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
 */

/**
 * Set the value of `poster` on the media element. `poster` is the url to
 * an image file that can/will be shown when no media data is available.
 *
 * @method Html5#setPoster
 * @param {string} poster
 *        The url to an image that should be used as the `poster` for the media
 *        element.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
 */

/**
 * Set the value of `preload` on the media element. `preload` indicates
 * what should download before the media is interacted with. It can have the following
 * values:
 * - none: nothing should be downloaded
 * - metadata: poster and the first few frames of the media may be downloaded to get
 *   media dimensions and other metadata
 * - auto: allow the media and metadata for the media to be downloaded before
 *    interaction
 *
 * @method Html5#setPreload
 * @param {string} preload
 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
 *         or 'auto'.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
 */

/**
 * Set the value of `src` on the media element. `src` indicates the current
 * {@link Tech~SourceObject} for the media.
 *
 * @method Html5#setSrc
 * @param {Tech~SourceObject} src
 *        The source object to set as the current source.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
 */

/**
 * Set the value of `volume` on the media element. `volume` indicates the current
 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
 * so on.
 *
 * @method Html5#setVolume
 * @param {number} percentAsDecimal
 *        The volume percent as a decimal. Valid range is from 0-1.
 *
 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
 */

/**
 * Set the value of an element's attribute.
 *
 * @param {Element} el
 *        A DOM element.
 *
 * @param {string} attribute
 *        Attribute to set.
 *
 * @param {string} value
 *        Value to set the attribute to.
 */

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

/**
 * Sets the hue of a color to the provided value. The hue range can be
 * from 0 and 359.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: setHue(42, '#CCCD64'),
 *   background: setHue('244', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${setHue(42, '#CCCD64')};
 *   background: ${setHue('244', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#cdae64";
 *   background: "rgba(107,100,205,0.7)";
 * }
 */

/**
 * Sets the lightness of a color to the provided value. The lightness range can be
 * from 0 and 1.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: setLightness(0.2, '#CCCD64'),
 *   background: setLightness('0.75', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${setLightness(0.2, '#CCCD64')};
 *   background: ${setLightness('0.75', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#4d4d19";
 *   background: "rgba(223,224,159,0.7)";
 * }
 */

/**
 * Sets the saturation of a color to the provided value. The saturation range can be
 * from 0 and 1.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: setSaturation(0.2, '#CCCD64'),
 *   background: setSaturation('0.75', 'rgba(204,205,100,0.7)'),
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${setSaturation(0.2, '#CCCD64')};
 *   background: ${setSaturation('0.75', 'rgba(204,205,100,0.7)')};
 * `
 *
 * // CSS in JS Output
 * element {
 *   background: "#adad84";
 *   background: "rgba(228,229,76,0.7)";
 * }
 */

/**
 * Sets the selected <option> element within a <select> element based on a
 * given value.
 *
 * @param {Element} el
 *        The element to look in.
 *
 * @param {string} value
 *        the property to look on.
 *
 * @param {Function} [parser]
 *        Optional function to adjust the value before comparing.
 *
 * @private
 */

/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

/**
 * Shades a color by mixing it with black. `shade` can produce
 * hue shifts, where as `darken` manipulates the luminance channel and therefore
 * doesn't produce hue shifts.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: shade(0.25, '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${shade(0.25, '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#00003f";
 * }
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Shorthand accepts up to five values, including null to skip a value, and maps them to their respective directions. The first value can optionally be a position keyword.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...position('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${position('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'top': '12px',
 *   'right': '24px',
 *   'bottom': '36px',
 *   'left': '48px'
 * }
 *
 * // Styles as object usage
 * const styles = {
 *   ...position('absolute', '12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${position('absolute', '12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'position': 'absolute',
 *   'top': '12px',
 *   'right': '24px',
 *   'bottom': '36px',
 *   'left': '48px'
 * }
 */

/**
 * Shorthand for easily setting the animation property. Allows either multiple arrays with animations
 * or a single animation spread over the arguments.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${animation(['rotate', '1s', 'ease-in-out'], ['colorchange', '2s'])}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'animation': 'rotate 1s ease-in-out, colorchange 2s'
 * }
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...animation('rotate', '1s', 'ease-in-out')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${animation('rotate', '1s', 'ease-in-out')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'animation': 'rotate 1s ease-in-out'
 * }
 */

/**
 * Shorthand for the border property that splits out individual properties for use with tools like Fela and Styletron. A side keyword can optionally be passed to target only one side's border properties.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...border('1px', 'solid', 'red')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${border('1px', 'solid', 'red')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderColor': 'red',
 *   'borderStyle': 'solid',
 *   'borderWidth': `1px`,
 * }
 *
 * // Styles as object usage
 * const styles = {
 *   ...border('top', '1px', 'solid', 'red')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${border('top', '1px', 'solid', 'red')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopColor': 'red',
 *   'borderTopStyle': 'solid',
 *   'borderTopWidth': `1px`,
 * }
 */

/**
 * Shorthand that accepts a value for side and a value for radius and applies the radius value to both corners of the side.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderRadius('top', '5px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderRadius('top', '5px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopRightRadius': '5px',
 *   'borderTopLeftRadius': '5px',
 * }
 */

/**
 * Shorthand that accepts any number of background values as parameters for creating a single background statement.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...backgrounds('url("/image/background.jpg")', 'linear-gradient(red, green)', 'center no-repeat')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${backgrounds('url("/image/background.jpg")', 'linear-gradient(red, green)', 'center no-repeat')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'background': 'url("/image/background.jpg"), linear-gradient(red, green), center no-repeat'
 * }
 */

/**
 * Shorthand that accepts any number of backgroundImage values as parameters for creating a single background statement.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...backgroundImages('url("/image/background.jpg")', 'linear-gradient(red, green)')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${backgroundImages('url("/image/background.jpg")', 'linear-gradient(red, green)')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'backgroundImage': 'url("/image/background.jpg"), linear-gradient(red, green)'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderColor('red', 'green', 'blue', 'yellow')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderColor('red', 'green', 'blue', 'yellow')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopColor': 'red',
 *   'borderRightColor': 'green',
 *   'borderBottomColor': 'blue',
 *   'borderLeftColor': 'yellow'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderStyle('solid', 'dashed', 'dotted', 'double')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderStyle('solid', 'dashed', 'dotted', 'double')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopStyle': 'solid',
 *   'borderRightStyle': 'dashed',
 *   'borderBottomStyle': 'dotted',
 *   'borderLeftStyle': 'double'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...borderWidth('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${borderWidth('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'borderTopWidth': '12px',
 *   'borderRightWidth': '24px',
 *   'borderBottomWidth': '36px',
 *   'borderLeftWidth': '48px'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...margin('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${margin('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'marginTop': '12px',
 *   'marginRight': '24px',
 *   'marginBottom': '36px',
 *   'marginLeft': '48px'
 * }
 */

/**
 * Shorthand that accepts up to four values, including null to skip a value, and maps them to their respective directions.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...padding('12px', '24px', '36px', '48px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${padding('12px', '24px', '36px', '48px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'paddingTop': '12px',
 *   'paddingRight': '24px',
 *   'paddingBottom': '36px',
 *   'paddingLeft': '48px'
 * }
 */

/**
 * Shorthand to set the height and width properties in a single statement.
 * @example
 * // Styles as object usage
 * const styles = {
 *   ...size('300px', '250px')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   ${size('300px', '250px')}
 * `
 *
 * // CSS as JS Output
 *
 * div {
 *   'height': '300px',
 *   'width': '250px',
 * }
 */

/**
 * Shows loading progress
 *
 * @extends Component
 */

/**
 * Shows volume level
 *
 * @extends Component
 */

/**
 * Signals that a plugin has just been set up on a player - by name. The name
 * is the name of the plugin.
 *
 * @event    Player#pluginsetup:$name
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Signals that a plugin has just been set up on a player.
 *
 * @event    Player#pluginsetup
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Signals that a plugin is about to be set up on a player - by name. The name
 * is the name of the plugin.
 *
 * @event    Player#beforepluginsetup:$name
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Signals that a plugin is about to be set up on a player.
 *
 * @event    Player#beforepluginsetup
 * @type     {Plugin~PluginEventHash}
 */

/**
 * Silence a Promise-like object.
 *
 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
 * play promise" rejection error messages.
 *
 * @param  {Object} value
 *         An object that may or may not be `Promise`-like.
 */

/**
 * Sound Sample Description (Version 0)
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-130736
 */

/**
 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
 *
 * @extends Spacer
 */

/**
 * Spec: http://id3.org/ID3v1
 * Wiki: https://en.wikipedia.org/wiki/ID3
 */

/**
 * Speex Header Packet
 * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000
 */

/**
 * Speex, RFC 5574
 * Ref:
 *   https://www.speex.org/docs/manual/speex-manual/
 *   https://tools.ietf.org/html/rfc5574
 */

/**
 * Store the browser-specific methods for the fullscreen API.
 *
 * @type {Object}
 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @deprecated - This will be deprecated in v5 in favor of `easeIn`, `easeOut`, `easeInOut`.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': timingFunctions('easeInQuad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${timingFunctions('easeInQuad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': easeIn('quad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${easeIn('quad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.550,  0.085, 0.680, 0.530)',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': easeInOut('quad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${easeInOut('quad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.455,  0.030, 0.515, 0.955)',
 * }
 */

/**
 * String to represent common easing functions as demonstrated here: (github.com/jaukia/easie).
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   'transitionTimingFunction': easeOut('quad')
 * }
 *
 * // styled-components usage
 *  const div = styled.div`
 *   transitionTimingFunction: ${easeOut('quad')};
 * `
 *
 * // CSS as JS Output
 *
 * 'div': {
 *   'transitionTimingFunction': 'cubic-bezier(0.250,  0.460, 0.450, 0.940)',
 * }
 */

/**
 * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
 * in the SubsCapsMenu.
 *
 * @extends TextTrackMenuItem
 */

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */

/**
 * TODO: Explore using CSS.escape when it becomes more available
 * in evergreen browsers.
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

/**
 * Takes the argument given to the player and calls the `call` version of the
 * method on each middleware from left to right.
 *
 * Then, call the passed in method on the tech and return the result unchanged
 * back to the player, through middleware, this time from right to left.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  {Tech} tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @param  {Mixed} arg
 *         The value to set on the tech.
 *
 * @return {Mixed}
 *         The return value of the `method` of the `tech`, regardless of the
 *         return values of middlewares.
 */

/**
 * Takes the argument given to the player and calls the setter method on each
 * middleware from left to right to the tech.
 *
 * @param  {Object[]} middleware
 *         An array of middleware instances.
 *
 * @param  {Tech} tech
 *         The current tech.
 *
 * @param  {string} method
 *         A method name.
 *
 * @param  {Mixed} arg
 *         The value to set on the tech.
 *
 * @return {Mixed}
 *         The return value of the `method` of the `tech`.
 */

/**
 * Test media type.
 *
 * @param {string} string
 * @return {object}
 * @public
 */

/**
 * The Menu component is used to build popup menus, including subtitle and
 * captions selection menus.
 *
 * @extends Component
 */

/**
 * The Progress Control component contains the seek bar, load progress,
 * and play progress.
 *
 * @extends Component
 */

/**
 * The Vhs Handler object, where we orchestrate all of the parts
 * of HLS to interact with video.js
 *
 * @class VhsHandler
 * @extends videojs.Component
 * @param {Object} source the soruce object
 * @param {Tech} tech the parent tech object
 * @param {Object} options optional and required options
 */

/**
 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
 * it gets clicked.
 *
 * @extends Button
 */

/**
 * The `MediaLoader` is the `Component` that decides which playback technology to load
 * when a player is initialized.
 *
 * @extends Component
 */

/**
 * The `videojs()` function doubles as the main function for users to create a
 * {@link Player} instance as well as the main library namespace.
 *
 * It can also be used as a getter for a pre-existing {@link Player} instance.
 * However, we _strongly_ recommend using `videojs.getPlayer()` for this
 * purpose because it avoids any potential for unintended initialization.
 *
 * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
 * of our JSDoc template, we cannot properly document this as both a function
 * and a namespace, so its function signature is documented here.
 *
 * #### Arguments
 * ##### id
 * string|Element, **required**
 *
 * Video element or video element ID.
 *
 * ##### options
 * Object, optional
 *
 * Options object for providing settings.
 * See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
 *
 * ##### ready
 * {@link Component~ReadyCallback}, optional
 *
 * A function to be called when the {@link Player} and {@link Tech} are ready.
 *
 * #### Return Value
 *
 * The `videojs()` function returns a {@link Player} instance.
 *
 * @namespace
 *
 * @borrows AudioTrack as AudioTrack
 * @borrows Component.getComponent as getComponent
 * @borrows module:computed-style~computedStyle as computedStyle
 * @borrows module:events.on as on
 * @borrows module:events.one as one
 * @borrows module:events.off as off
 * @borrows module:events.trigger as trigger
 * @borrows EventTarget as EventTarget
 * @borrows module:extend~extend as extend
 * @borrows module:fn.bind as bind
 * @borrows module:format-time.formatTime as formatTime
 * @borrows module:format-time.resetFormatTime as resetFormatTime
 * @borrows module:format-time.setFormatTime as setFormatTime
 * @borrows module:merge-options.mergeOptions as mergeOptions
 * @borrows module:middleware.use as use
 * @borrows Player.players as players
 * @borrows Plugin.registerPlugin as registerPlugin
 * @borrows Plugin.deregisterPlugin as deregisterPlugin
 * @borrows Plugin.getPlugins as getPlugins
 * @borrows Plugin.getPlugin as getPlugin
 * @borrows Plugin.getPluginVersion as getPluginVersion
 * @borrows Tech.getTech as getTech
 * @borrows Tech.registerTech as registerTech
 * @borrows TextTrack as TextTrack
 * @borrows module:time-ranges.createTimeRanges as createTimeRange
 * @borrows module:time-ranges.createTimeRanges as createTimeRanges
 * @borrows module:url.isCrossOrigin as isCrossOrigin
 * @borrows module:url.parseUrl as parseUrl
 * @borrows VideoTrack as VideoTrack
 *
 * @param  {string|Element} id
 *         Video element or video element ID.
 *
 * @param  {Object} [options]
 *         Options object for providing settings.
 *         See: [Options Guide](https://docs.videojs.com/tutorial-options.html).
 *
 * @param  {Component~ReadyCallback} [ready]
 *         A function to be called when the {@link Player} and {@link Tech} are
 *         ready.
 *
 * @return {Player}
 *         The `videojs()` function returns a {@link Player|Player} instance.
 */

/**
 * The bar that contains the volume level and can be clicked on to adjust the level
 *
 * @extends Slider
 */

/**
 * The base class for buttons that toggle specific  track types (e.g. subtitles).
 *
 * @extends MenuButton
 */

/**
 * The base class for buttons that toggle specific text track types (e.g. subtitles)
 *
 * @extends MenuButton
 */

/**
 * The base class for buttons that toggle specific {@link AudioTrack} types.
 *
 * @extends TrackButton
 */

/**
 * The base functionality for a slider. Can be vertical or horizontal.
 * For instance the volume bar or the seek bar on a video is a slider.
 *
 * @extends Component
 */

/**
 * The base plugin name.
 *
 * @private
 * @constant
 * @type {string}
 */

/**
 * The button component for toggling and selecting captions
 *
 * @extends TextTrackButton
 */

/**
 * The button component for toggling and selecting captions and/or subtitles
 *
 * @extends TextTrackButton
 */

/**
 * The button component for toggling and selecting chapters
 * Chapters act much differently than other text tracks
 * Cues are navigation vs. other tracks of alternative languages
 *
 * @extends TextTrackButton
 */

/**
 * The button component for toggling and selecting descriptions
 *
 * @extends TextTrackButton
 */

/**
 * The button component for toggling and selecting subtitles
 *
 * @extends TextTrackButton
 */

/**
 * The callback definition for toggleClass.
 *
 * @callback module:dom~PredicateCallback
 * @param    {Element} element
 *           The DOM element of the Component.
 *
 * @param    {string} classToToggle
 *           The `className` that wants to be toggled
 *
 * @return   {boolean|undefined}
 *           If `true` is returned, the `classToToggle` will be added to the
 *           `element`. If `false`, the `classToToggle` will be removed from
 *           the `element`. If `undefined`, the callback will be ignored.
 */

/**
 * The chapter track menu item
 *
 * @extends MenuItem
 */

/**
 * The component for a menu item. `<li>`
 *
 * @extends ClickableComponent
 */

/**
 * The component for controlling the playback rate.
 *
 * @extends MenuButton
 */

/**
 * The component for controlling the volume level
 *
 * @extends Component
 */

/**
 * The component for displaying text track cues.
 *
 * @extends Component
 */

/**
 * The current list of {@link AudioTrack} for a media file.
 *
 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
 * @extends TrackList
 */

/**
 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
 *
 * @type {Array}
 * @constant
 */

/**
 * The default options for an `ErrorDisplay`.
 *
 * @private
 */

/**
 * The error code that refers two one of the defined `MediaError` types
 *
 * @type {Number}
 */

/**
 * The global options object. These are the settings that take effect
 * if no overrides are specified when the player is created.
 *
 * @type {Object}
 */

/**
 * The initial play button that shows before the video has played. The hiding of the
 * `BigPlayButton` get done via CSS and `Player` states.
 *
 * @extends Button
 */

/**
 * The key on which a player's active plugins cache is stored.
 *
 * @private
 * @constant
 * @type     {string}
 */

/**
 * The menu item for caption track settings menu
 *
 * @extends TextTrackMenuItem
 */

/**
 * The name of the base plugin class as it is registered.
 *
 * @type {string}
 */

/**
 * The separator between the current time and duration.
 * Can be hidden if it's not needed in the design.
 *
 * @extends Component
 */

/**
 * The specific menu item type for selecting a language within a text track kind
 *
 * @extends MenuItem
 */

/**
 * The specific menu item type for selecting a playback rate.
 *
 * @extends MenuItem
 */

/**
 * The text that is added to the `CurrentTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */

/**
 * The text that is added to the `DurationDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */

/**
 * The text that is added to the `RemainingTimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */

/**
 * The text that is added to the `TimeDisplay` for screen reader users.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `CaptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `ChaptersButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */

/**
 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `DurationDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */

/**
 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `MuteToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `PictureInPictureToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `PlayToggle`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */

/**
 * The text that should display over the `SubsCapsButton`s controls.
 *
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
 *
 * @type {string}
 * @private
 */

/**
 * The text that should display over the `TimeDisplay`s controls. Added to for localization.
 *
 * @type {string}
 * @private
 *
 * @deprecated in v7; controlText_ is not used in non-active display Components
 */

/**
 * The {@link MouseTimeDisplay} component tracks mouse movement over the
 * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
 * indicating the time which is represented by a given point in the
 * {@link ProgressControl}.
 *
 * @extends Component
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

/**
 * This function causes an event to happen. This will then cause any `event listeners`
 * that are waiting for that event, to get called. If there are no `event listeners`
 * for an event then nothing will happen.
 *
 * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
 * Trigger will also call the `on` + `uppercaseEventName` function.
 *
 * Example:
 * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
 * `onClick` if it exists.
 *
 * @param {string|EventTarget~Event|Object} event
 *        The name of the event, an `Event`, or an object with a key of type set to
 *        an event name.
 */

/**
 * This function is used to fire a sourceset when there is something
 * similar to `mediaEl.load()` being called. It will try to find the source via
 * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
 * with the source that was found or empty string if we cannot know. If it cannot
 * find a source then `sourceset` will not be fired.
 *
 * @param {Html5} tech
 *        The tech object that sourceset was setup on
 *
 * @return {boolean}
 *         returns false if the sourceset was not fired and true otherwise.
 */

/**
 * This function will add an `event listener` that gets triggered only once. After the
 * first trigger it will get removed. This is like adding an `event listener`
 * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
 *
 * @param {string|string[]} type
 *        An event name or an array of event names.
 *
 * @param {EventTarget~EventListener} fn
 *        The function to be called once for each event name.
 */

/**
 * This is a mixed value that describes content to be injected into the DOM
 * via some method. It can be of the following types:
 *
 * Type       | Description
 * -----------|-------------
 * `string`   | The value will be normalized into a text node.
 * `Element`  | The value will be accepted as-is.
 * `TextNode` | The value will be accepted as-is.
 * `Array`    | A one-dimensional array of strings, elements, text nodes, or functions. These functions should return a string, element, or text node (any other return value, like an array, will be ignored).
 * `Function` | A function, which is expected to return a string, element, text node, or array - any of the other possible values described above. This means that a content descriptor could be a function that returns an array of functions, but those second-level functions must return strings, elements, or text nodes.
 *
 * @typedef {string|Element|TextNode|Array|Function} module:dom~ContentDescriptor
 */

/**
 * This is the abstract API for an update queue.
 */

/**
 * This is the base class for media playback technology controllers, such as
 * {@link Flash} and {@link HTML5}
 *
 * @extends Component
 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

/**
 * This is the web browser implementation of `debug()`.
 */

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */

/**
 * Thrown on read operation of the end of file or stream has been reached
 */

/**
 * Throws an error if the passed string has whitespace. This is used by
 * class methods to be relatively consistent with the classList API.
 *
 * @private
 * @param  {string} str
 *         The string to check for whitespace.
 *
 * @throws {Error}
 *         Throws an error if there is whitespace in the string.
 */

/**
 * Time tooltips display a time above the progress bar.
 *
 * @extends Component
 */

/**
 * Time-to-sample('stts') atom.
 * Store duration information for a media’s samples.
 * Ref: https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25696
 */

/**
 * Timestamp stored in seconds since Mac Epoch (1 January 1904)
 */

/**
 * Tints a color by mixing it with white. `tint` can produce
 * hue shifts, where as `lighten` manipulates the luminance channel and therefore
 * doesn't produce hue shifts.
 *
 * @example
 * // Styles as object usage
 * const styles = {
 *   background: tint(0.25, '#00f')
 * }
 *
 * // styled-components usage
 * const div = styled.div`
 *   background: ${tint(0.25, '#00f')};
 * `
 *
 * // CSS in JS Output
 *
 * element {
 *   background: "#bfbfff";
 * }
 */

/**
 * Toggle Picture-in-Picture mode
 *
 * @extends Button
 */

/**
 * Toggle fullscreen video
 *
 * @extends Button
 */

/**
 * Token for read FourCC
 * Ref: https://en.wikipedia.org/wiki/FourCC
 */

/**
 * Token for: 3. ASF top-level Header Object
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3
 */

/**
 * Token for: 3.1 Header Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1
 */

/**
 * Token for: 3.2: File Properties Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2
 */

/**
 * Token for: 3.3 Stream Properties Object (mandatory, one per stream)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3
 */

/**
 * Token to parse RIFF-INFO tag value
 */

/**
 * Token used to decode text-track from 'mdat' atom (raw data stream)
 */

/**
 * Token: Media Header Atom
 * Ref:
 *   https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-SW34
 *   https://wiki.multimedia.cx/index.php/QuickTime_container#mdhd
 */

/**
 * Token: Movie Header Atom
 */

/**
 * Touch events Chrome expects to be passive
 */

/**
 * Track Header Atoms structure
 * Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/QTFFChap2/qtff2.html#//apple_ref/doc/uid/TP40000939-CH204-25550
 */

/**
 * Translate native top level events into event types.
 */

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

/**
 * Trigger a listener only once and then turn if off for all
 * configured events
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event listener function
 */

/**
 * Trigger a listener only once for an event.
 *
 * @param {Element|Object} elem
 *        Element or object to bind to.
 *
 * @param {string|string[]} type
 *        Name/type of event
 *
 * @param {Event~EventListener} fn
 *        Event listener function
 */

/**
 * Trigger an event for an element
 *
 * @param {Element|Object} elem
 *        Element to trigger an event on
 *
 * @param {EventTarget~Event|string} event
 *        A string (the type) or an event object with a type attribute
 *
 * @param {Object} [hash]
 *        data hash to pass along with the event
 *
 * @return {boolean|undefined}
 *         Returns the opposite of `defaultPrevented` if default was
 *         prevented. Otherwise, returns `undefined`
 */

/**
 * Triggered when a different track is selected/enabled.
 *
 * @event TrackList#change
 * @type {EventTarget~Event}
 */

/**
 * Try to update the style of a DOM element. Some style changes will throw an error,
 * particularly in IE8. Those should be noops.
 *
 * @param {Element} el
 *        The DOM element to be styled.
 *
 * @param {string} style
 *        The CSS property on the element that should be styled.
 *
 * @param {string} rule
 *        The style rule that should be applied to the property.
 *
 * @private
 */

/**
 * Turn off text selection blocking.
 */

/**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Updates the selectedIndex of the QualityLevelList when a mediachange happens in vhs.
 *
 * @param {QualityLevelList} qualityLevels The QualityLevelList to update.
 * @param {PlaylistLoader} playlistLoader PlaylistLoader containing the new media info.
 * @function handleVhsMediaChange
 */

/**
 * Uppercase the first letter of a string.
 *
 * @param {string} string
 *        String to be uppercased
 *
 * @return {string}
 *         The string with an uppercased first letter
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED} instead; only
 * included for backward-compatibility with 4.x.
 *
 * @deprecated Since version 5.0, use {@link module:browser.TOUCH_ENABLED|browser.TOUCH_ENABLED instead.
 * @type {boolean}
 */

/**
 * Used by act() to track whether you're inside an act() scope.
 */

/**
 * Used by {@link SeekBar} to display media playback progress as part of the
 * {@link ProgressControl}.
 *
 * @extends Component
 */

/**
 * Used to set the internal tracking of window loaded state to true.
 *
 * @private
 */

/**
 * Used to subclass an existing class by emulating ES subclassing using the
 * `extends` keyword.
 *
 * @function
 * @example
 * var MyComponent = videojs.extend(videojs.getComponent('Component'), {
 *   myCustomMethod: function() {
 *     // Do things in my method.
 *   }
 * });
 *
 * @param    {Function} superClass
 *           The class to inherit from
 *
 * @param    {Object}   [subClassMethods={}]
 *           Methods of the new class
 *
 * @return   {Function}
 *           The new class with subClassMethods that inherited superClass.
 */

/**
 * VTTCue methods
 */

/**
 * Validation function for `value` and `defaultValue`.
 */

/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

/**
 * Vorbis 1 Parser.
 * Used by OggParser
 */

/**
 * Vorbis tag mappings
 *
 * Mapping from native header format to one or possibly more 'common' entries
 * The common entries aim to read the same information from different media files
 * independent of the underlying format
 */

/**
 * Wait until the page is loaded before running autoSetup. This will be called in
 * autoSetup if `hasLoaded` returns false.
 *
 * @param {number} wait
 *        How long to wait in ms
 *
 * @param {module:videojs} [vjs]
 *        The videojs library function
 */

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */

/**
 * WavPack Block Header
 *
 * 32-byte little-endian header at the front of every WavPack block
 *
 * Ref: http://www.wavpack.com/WavPack5FileFormat.pdf (page 2/6: 2.0 "Block Header")
 */

/**
 * WavPack Parser
 */

/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */

/**
 * When the tech is set, passes the tech to each middleware's `setTech` method.
 *
 * @param {Object[]} middleware
 *        An array of middleware instances.
 *
 * @param {Tech} tech
 *        A Video.js tech.
 */

/**
 * Whether or not this component supports `requestAnimationFrame`.
 *
 * This is exposed primarily for testing purposes.
 *
 * @private
 * @type {Boolean}
 */

/**
 * Whether passive event listeners are supported
 */

/**
 * Whether the browser has built-in HLS support.
 */

/**
 * Whether the current DOM interface appears to be real (i.e. not simulated).
 *
 * @return {boolean}
 *         Will be `true` if the DOM appears to be real, `false` otherwise.
 */

/**
 * Windows Media Metadata Usage Guidelines
 *   Ref: https://msdn.microsoft.com/en-us/library/ms867702.aspx
 *
 * Ref:
 *   https://tools.ietf.org/html/draft-fleischman-asf-01
 *   https://hwiegman.home.xs4all.nl/fileformats/asf/ASF_Specification.pdf
 *   http://drang.s4.xrea.com/program/tips/id3tag/wmp/index.html
 *   https://msdn.microsoft.com/en-us/library/windows/desktop/ee663575(v=vs.85).aspx
 */

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

/**
 * `kind` of TextTrack to look for to associate it with this menu.
 *
 * @type {string}
 * @private
 */

/**
 * `kind`s of TextTrack to look for to associate it with this menu.
 *
 * @type {array}
 * @private
 */

/**
 * attributes;
 * children;
 * 
 * writeable properties:
 * nodeValue,Attr:value,CharacterData:data
 * prefix
 */

/**
 * cuechange - One or more cues in the track have become active or stopped being active.
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * format chunk; chunk-id is "fmt "
 * http://soundfile.sapp.org/doc/WaveFormat/
 */

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 *
 * A lightweight readable stream implemention that handles event dispatching.
 * Objects that inherit from streams should call init in their constructors.
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 *
 * Accepts program elementary stream (PES) data events and corrects
 * decode and presentation time stamps to account for a rollover
 * of the 33 bit value.
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 *
 * Parse mpeg2 transport stream packets to extract basic timing information
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 *
 * Utilities to detect basic properties and metadata about Aac data.
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 *
 * Utilities to detect basic properties and metadata about MP4s.
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 *
 * Utilities to detect basic properties and metadata about TS Segments.
 */

/**
 * mux.js
 *
 * Copyright (c) Brightcove
 * Licensed Apache-2.0 https://github.com/videojs/mux.js/blob/master/LICENSE
 */

/**
 * our implementation of an `innerHTML` descriptor for browsers
 * that do not have one.
 */

/**
 * preformance key(refChild == null)
 */

/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/**
 * super basic version of sprintf
 * @private
 */

/**
 * super basic version of sprintf
 */

/**
 * useDragLayer Hook
 * @param collector The property collector
 */

/**
 * useDragSource hook
 * @param sourceSpec The drag source specification *
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification
 */

/**
 * windows-1252 / iso_8859-1 decoder (ANSI)
 */

/**
 * {
 *  [playerId]: [[mwFactory, mwInstance], ...]
 * }
 *
 * @private
 */

/**
Checks whether the TAR checksum is valid.

@param {Buffer} buffer - The TAR header `[offset ... offset + 512]`.
@param {number} offset - TAR header offset.
@returns {boolean} `true` if the TAR checksum is valid, otherwise `false`.
*/

/**
ID3 UINT32 sync-safe tokenizer token.
28 bits (representing up to 256MB) integer, the msb is 0 to avoid "false syncsignals".
*/

/**
^\w+\.prototype\.([_\w]+)\s*=\s*((?:.*\{\s*?[\r\n][\s\S]*?^})|\S.*?(?=[;\r\n]));?
^\w+\.prototype\.([_\w]+)\s*=\s*(\S.*?(?=[;\r\n]));?
 */

/** @class */

/** @license React v0.20.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v0.20.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.1
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.1
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @noinline */

/** Performs the task of cleaning up resources. */

/************************************************************************/

/******/

/***/

/*,new PlayListClass("playlistTwo",1,[]),new PlayListClass("playlistThree",2,[])*/

/*eslint-disable no-self-compare*/

/*eslint-enable no-self-compare*/

/*falls through*/

/*jshint loopfunc:true */

/*xml space '\x20' | #x9 | #xD | #xA; */

//

//			

//					attributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};

//			console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))

//			return null;

//			var qName = uri

//		if(key.indexOf(':')>0 || key == 'xmlns'){

//		if(localName){

//		}

//		}else{

//	,getIndex:function(uri, localName)){

//	break;

//	deep = false;

//	getType:function(i){},

//	getType:function(uri,localName){}

//	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},

//	return false;

//	void();break;

//	},

// 

//                          display-time

//                     segment index to display time

//                    segment in the current timeline with timing data

//                and regions will be placed into.

//                the equivalence display-time 0 === segment-index 0

//           chars (ext_+0, ext_+1, and ext_+2 are char0s for

//           extended codes)

//           left so that we can do this.control_ | CONTROL_CODE

//         channel.port2.postMessage(0);

//         setImmediate(callback);

//       Instead all listners are removed on the first trigger!

//       Is this true?

//       multiple metadata streams

//       remove the wrapper for the event type that called it.

//       see https://github.com/videojs/video.js/issues/5962

//       the lowestEnabledRendition.

//      content descriptor (1 byte)

//      content tagTypes (1 byte),

//      language (3 bytes),

//      time stamp format (1 byte),

//     2) the player is paused

//     3) the first play has already been setup

//     channel.port1.onmessage = callback;

//     return function requestCall() {

//     var channel = new MessageChannel();

//     };

//    Here we search for the first keyframe in the fragment and

//    PTS of the keyframe forward so that it covers the time range

//    This is where we keep track of the GOPS (group-of-pictures)

//    allotted to the loader currently behind.

//    always know when it is a fiber.

//    and that keyframe. We then extend the duration and pull the

//    and the main loader try to save the timeline mapping, whichever comes later

//    arbitrary mapping. If audio and video streams are not perfectly in-sync, then

//    arity for ends

//    browser

//    compatible.

//    first saved (see (1)).

//    fragment.

//    from previous fragments and attempt to find one that we can

//    is faster.

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    is waiting for the other to catch up, then instead of requesting another

//    more difficult to predict when they get optimized and they are almost

//    never inlined properly in static compilers.

//    new function as the true mapToProps for subsequent calls.

//    of the frames that were disposed of.

//    overlapping range

//    prepend to the current fragment in order to create a valid

//    processing was in media-segment-request, then it would also need to know how

//    provided by the main loader, meaning that, if the logic for waiting on

//    same, however, it breaks for (2)

//    segment and using up more bandwidth, by not yet loading, more bandwidth is

//    the developer that their mapToProps function is not returning a valid result.

//    the mapping will be off for one of the streams, dependent on which one was

//    throw away all the frames between the start of the fragment

//    to optimize in a non-JIT environment.

//    to re-generate the segment information after the main loader caught up.

//    will overwrite the first. In theory this is OK, as the mappings should be the

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

//   1. The checked React property when present

//   1. The value React property when present

//   1. call requestFullscreen with potential options

//   2. The defaultChecked React property when present

//   2. The defaultValue React property when present

//   2. if we got a promise from above, use it to update isFullscreen()

//   3. An empty string

//   3. Otherwise, false

//   All playback technologies respect preload false.

//   This is particularly used for iPhone, older iPads, and non-safari browser on iOS.

//   newAvg = oldAvg + (sample - oldAvg) / (sampleCount + 1)

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

//  * Ref: http://gabriel.mp3-tech.org/mp3infotag.html

//  * XING Header Tag

//  */

//  - live streams have been started

//  - verifyProgramDateTimeTags has already been run

//  0x402 (1026) to 0x410 are valid for decode

//  0x402 to 0x410 are valid for decode

//  1. The value React property

//  2. The defaultValue React property

//  3. Otherwise there should be no change

//  40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)

//  <S d="1" />

//  <S d="1" r="-1" />

//  <S t="0" d="1" />

//  <S t="5" d="1" />

//  If 1) there is no active media

//  If the data is an odd number of bytes in length, a pad byte must be added at the end

//  MPEG-PS, MPEG-1 Part 1

//  Track display prioritization model: if multiple tracks are 'showing',

//  `select` elements automatically pick the first item #13222

//  buf.toString('ascii')

//  data."

//  display the first 'subtitles' or 'captions' track which is 'showing',

//  doesn't change behavior of IE11 or Chrome if JAWS is not being used

//  is insufficient PES packet data to completely fill the transport stream packet

//  only update if changed

//  otherwise display the first 'descriptions' track which is 'showing'

//  payload bytes. Stuffing is accomplished by defining an adaptation field longer than

//  prettier-ignore

//  readonly attribute NamedNodeMap     entities;

//  readonly attribute NamedNodeMap     notations;

//  remaining after the adaptation field exactly accommodates the available PES packet

//  the sum of the lengths of the data elements in it, so that the payload bytes

//  type 3: comment header

//  which makes copying more difficult.

//  with a sourceDuration of 10

// !!THIS ORDER IS IMPORTANT!!

// "<segment>/.." is removed.

// "Container" atoms, contains nested atoms

// "For transport stream packets carrying PES packets, stuffing is needed when there

// "Member not found" in strict mode, and in Firefox which does not

// "Pause on exceptions" behavior. Because React wraps all user-provided

// "Registers" used to "return" multiple values

// "SPS"

// "The EXT-X-MAP tag specifies how to obtain the Media Initialization Section

// "break on all exceptions" in your console,

// "captions and subtitles" other locales use "subtitles"

// "consumed" by the delegate iterator. If context.method was

// "drop and blow away the whole document" action.

// "gap."

// "retries" — a special update that attempts to flip a Suspense boundary

// "return" to "throw", let that override the TypeError below.

// "return", allow the original .return call to continue in the

// "stack" as the parent. Then append children as we go in beginWork

// #1 is far prefereable over #2 which can cause "stuttering" but

// #1002 - if the video ends right before the next timeupdate would happen,

// #1068 - Prevent mousemove spamming

// #EXT-X-CUE-OUT-CONT:10/30

// #EXT-X-CUE-OUT:30

// $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests

// $FlowFixMe

// $FlowFixMe - Should be inferred as not undefined.

// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

// $FlowFixMe Flow doesn't know about ArrayBuffer

// $FlowFixMe Flow doesn't know about SharedArrayBuffer

// $FlowFixMe Flow doesn't know about toStringTag

// $FlowFixMe Flow gets confused by a WeakSet feature check below.

// $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key

// $FlowFixMe Flow incorrectly thinks existing element's key can be a number

// $FlowFixMe Flow thinks console is immutable.

// $FlowFixMe It does accept undefined.

// $FlowFixMe The Flow type is opaque but there's no way to actually create it.

// $FlowFixMe This is okay but Flow doesn't know it.

// $FlowFixMe This should probably use `delete container._reactRootContainer`

// $FlowFixMe number or string is fine here

// $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

// $FlowFixMe: Flow complains about not setting a value, which is intentional here

// $FlowFixMe: Flow doesn't like mixed types

// $FlowFixMe: Ignore Flow complaining about needing a value

// $FlowFixMe: Not typed to avoid destructuring arguments

// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors

// $FlowIssue Flow incorrectly thinks Map has no prototype

// $FlowIssue Flow incorrectly thinks Set has no prototype

// $FlowIssue `createElement` should be updated for Web Components

// $FlowIssue symbol is perfectly valid here

// && !('lineNumber' in locator)){

// '

// '-' is false for all relational operators (e.g. <, >=) so this setting

// '----:com.apple.iTunes:PERFORMER': 'performer'

// 'FINGERPRINT=MusicMagic Fingerprint {fingerprint}': 'musicip_fingerprint', // ToDo

// 'IPLS:instrument': 'performer:instrument', // ToDo

// 'PERFORMER=artist (instrument)': 'performer:instrument', // ToDo

// 'Performer=artist (instrument)': 'performer:instrument',

// 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.

// 'Speex  ' in header https://en.wikipedia.org/wiki/Speex

// 'TMCL:instrument': 'performer:instrument',

// 'WM/PartOfSet': 'totaldiscs',

// 'errorInterval' time has elapsed since the last source-reload

// 'movie' => 'mvhd': movie header atom; child of Movie Atom

// 'playbackRates': [0.5, 1, 1.5, 2],

// 'reserved'

// 'und' language (undetermined)

// 'url' type

// ():int

// ():uint

// ():void

// (1) collect cue start time

// (13 seconds), at which point it stops as well. Since current time is past the

// (3) next characters must match "-->"

// (5) collect cue end time

// (All odd-numbered second bytes set underline)

// (For instance: TinyMCE editor used in a list component that supports pasting to add more,

// (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.

// (Rendering will throw with a helpful message and as soon as the type is

// (Section 3) required to parse the applicable Media Segments.  It applies to every

// (See https://github.com/videojs/video.js/issues/5683)

// (There's no appropriate action type for DevTools overrides.)

// (and would be incorrectly rendered on the client).

// (because the hook only marks sources as dirty if it's written to their WIP version).

// (count:int):void

// (determined by the presence of the videoTimingInfo object), the segment's "player

// (eg DOM renderer may schedule auto-focus for inputs and form controls).

// (eg DOM renderer supports auto-focus for certain elements).

// (for file uris) to be errors, but the old XHR did, so emulate that

// (group-of-pictures)

// (if any) of the base URL.

// (inside this function), since by suspending at the end of the render

// (javascript order)

// (needed for certain tests that spyOn input values and Safari)

// (not the UI elements like the close button).

// (number of channels)-1. FLAC supports from 1 to 8 channels

// (only suffering ~3 seconds of frozen video and a pause in audio playback).

// (or left-to-right swipes on iOS) to read contents of a page. Using

// (see https://w3c.github.io/media-source/#sourcebuffer-append-error).

// (since SegmentBase is only for one total segment)

// (since there aren't external URLs to media playlists with DASH)

// (size:int):uint

// (tag must exist before Player)

// (the user may have provided their own)

// *

// * main hasn't had a timeline change yet (thus has not loaded its first segment)

// * main hasn't yet changed to the timeline audio is looking to load

// *after* the media source has opened.

// *unhide* children that were previously hidden, so check if this

// - 4 (length) + 4 (chunk type) + 13 (chunk data) + 4 (CRC): IHDR chunk

// - 8 bytes: PNG signature

// - Android 4-4.3

// - BeforeInputEventPlugin

// - ChangeEventPlugin

// - Chrome 26-34

// - EnterLeaveEventPlugin

// - Firefox 14-29

// - However, we may have gotten new wrapper props after that

// - Internet Explorer 11

// - Safari 6-7

// - SelectEventPlugin

// - This render may have been triggered by a Redux store update that produced new child props

// - a bug where the `select` does not scroll to the correct option because singular

// - a bug where the `select` set the first item as selected despite the `size` attribute #14239

// - https://fetch.spec.whatwg.org/#atomic-http-redirect-handling

// - https://fetch.spec.whatwg.org/#concept-response-url

// - iPad Safari 6-7.1

// - iPhone Safari 7-7.1

// - one entry indicating specific type of file.

// - one entry named '[Content_Types].xml' or '_rels/.rels',

// - segments are in time order

// - there will always be a segment.duration

// - we can start from zero

// -- 12-byte signatures --

// -- 2-byte signatures --

// -- 3-byte signatures --

// -- 4-byte signatures --

// -- 5-byte signatures --

// -- 6-byte signatures --

// -- 7-byte signatures --

// -- 8-byte signatures --

// -- 9-byte signatures --

// -- Unsafe signatures --

// --- Welcome to debugging React ---

// -------------------

// ----------------------

// -progress queue, we need to clone the updates. We usually clone during

// ...)) which otherwise throws a "_processChildContext is not a function"

// ...and patterns for individual operators/function names

// ...disregarding cues with a falsey value

// ...for determining the fetch location

// ...for synching across variants

// .constructor.prototype properties for functions that return Generator

// .throw, and .return (see defineIteratorMethods).

// .throw, and .return methods.

// /!\ Keep this setter empty (see the timeupdate handler above)

// /**

// 0 0 1 .. NAL .. 0 0 0

// 0 0 1 .. NAL .. 0 0 1

// 0 = A, 1 = B, 2 = C, 3 = D

// 0 == left; 1 == middle; 2 == right

// 0 as an other value will be more than this

// 0.5 MB/s

// 0b111111111111111111111111111111

// 1) "delayed", 2) "initial render", 3) "retry".

// 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)

// 1) GOP-FUSION:

// 1) Nobody should add any instance methods on this. Instance methods can be

// 1) Only one mapping is saved per timeline, meaning that if both the audio loader

// 1. Because audio and main loaders cross discontinuities together, if this loader

// 1. Find the first IDAT (image data) chunk (49 44 41 54)

// 1. check for the type in the `source` cache

// 1. if a fullscreen api is available, use it

// 1. the mime type override stops working, or is not implemented for a specific

// 1. until we have not seen a timeupdate yet

// 1.0 rate

// 1.0 volume

// 10.1 Top-level ASF object GUIDs

// 10.2 Header Object GUIDs

// 10.3 Header Extension Object GUIDs

// 10.4 Stream Properties Object Stream Type GUIDs

// 12

// 13-18 - Allow a header (metadata) under the WEBVTT line.

// 19-29 - Allow any number of line terminators, then initialize new cue values.

// 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'

// 1ms after ready so that player can watch for it.

// 2) Check to see if the network state of the tag was failed at init, and if so, reset the source

// 2) In the event of a live stream, the initial live point will make for a somewhat

// 2) KEYFRAME-PULLING:

// 2) Nobody should rely on `instanceof Fiber` for type testing. We should

// 2. Check if there is an "acTL" chunk before the IDAT one (61 63 54 4C)

// 2. liveCurrentTime is Infinity, which happens on Android

// 2. media-segment-request doesn't have to have logic to consider whether a segment

// 2. otherwise, if the tech supports fullscreen, call `enterFullScreen` on it.

// 2. see if we have this source in our `currentSources` cache

// 2. when using mock XHR libraries like sinon that do not allow the override behavior

// 2a) If the embedded URL is entirely empty, it inherits the

// 2b) If the embedded URL starts with a scheme name, it is

// 2c) Otherwise, the embedded URL inherits the scheme of

// 3) If the embedded URL's <net_loc> is non-empty, we skip to

// 3) Primary timing goes by video in VHS, so the mapping should be video.

// 3) We might want to experiment with using numeric keys since they are easier

// 3. The audio loader bases some of its segment properties on timing information

// 3. look for the src url in source elements and use the type there

// 3. otherwise, use "fullWindow" mode

// 3.1 FORMAT VERSION CHUNK

// 3.10

// 3.11

// 3.2

// 3.2 WebVTT metadata header syntax

// 3.2.1 Sample Rate Chunk

// 3.2.2 Channels Chunk

// 3.2.3 Compression Type Chunk

// 3.2.4 Absolute Start Time Chunk

// 3.2.5 Loudspeaker Configuration Chunk

// 3.3

// 3.3 WebVTT region metadata header syntax

// 3.4

// 3.4 WebVTT region and WebVTT region settings syntax

// 3.5 WebVTT

// 30 seconds before the playhead provides a safe default for trimming.

// 30-39 - Check if self line contains an optional identifier or timing data.

// 32 bit signed integer

// 34 - If we have an empty line then report the cue.

// 35 - If we have the special substring '-->' then report the cue,

// 4 * 8000;

// 4) We can easily go from a constructor to a createFiber object literal if that

// 4. finally fallback to our list of mime types based on src url extension

// 4.1

// 4.1 WebVTT cue settings list.

// 4.1 WebVTT cue timings.

// 4.1 WebVTT timestamp

// 4.2.1. Text information frames - details

// 4.4.2 WebVTT cue settings

// 4.7

// 4.8

// 4.8	Metadata Library Object (optional, 0 or 1)

// 40 - Collect cue timings and settings.

// 40-bit block_index

// 40-bit total samples for entire file (if block_index == 0 and a value of -1 indicates an unknown length)

// 42 = 24 fps // 250 is what Webkit uses // FF uses 15

// 5) If the embedded URL path is empty (and not preceded by a

// 5) It should be easy to port this to a C struct and keep a C implementation

// 5.1 WebVTT file parsing.

// 54-62 - Collect and discard the remaining cue.

// 5a) if the embedded URL's <params> is non-empty, we skip to

// 5b) if the embedded URL's <query> is non-empty, we skip to

// 6) The last segment of the base URL's path (anything

// 6a) All occurrences of "./", where "." is a complete path

// 6b) If the path ends with "." as a complete path segment,

// 6c) All occurrences of "<segment>/../", where <segment> is a

// 6d) If the path ends with "<segment>/..", where <segment> is a

// 7.3.2.1.1 Sequence parameter set data syntax

// 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments

// 90kHz clock

// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire

// :Boolean

// :int

// :uint

// :uint;

// <!doctype,<![CDATA,<!--

// <?...?>

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// <select> value update needs to occur after <option> children

// > 2 bytes unicode chars directly

// @@iterator function is called on it. Some browsers' implementations of the

// @deprecated We should only use remainingTimeDisplay

// @duration to be in @timescale units, so we can convert it here.

// @font-face, @page

// @import

// @link https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers#Passing_data_by_transferring_ownership_(transferable_objects)

// @param overlay A block level element (usually a div) that the computed cues

// @private

// @see [Spec]{@link https://www.w3.org/TR/2011/WD-html5-20110113/video.html#media-element-load-algorithm}

// @see http://www.quirksmode.org/js/events_properties.html

// @see https://electronjs.org/docs/api/webview-tag

// @ts-ignore

// A .throw or .return when the delegate iterator has no .throw

// A C0 control is a code point in the range \u0000 NULL to \u001F

// A Generator should always return itself as the iterator object when the

// A big-endian 16-bit signed integer

// A big-endian 32-bit signed integer

// A changed version number will let those components know to throw and restart the render.

// A class component without an instance only mounts if it suspended

// A cursor to a boolean indicating whether the context has changed.

// A cursor to the current merged context object on the stack.

// A fair amount of file-types are detectable within this range

// A few React string attributes have a different name.

// A few assumptions here:

// A fiber's effect list consists only of its children, not itself. So if

// A fill buffer must have already run to establish a pending segment before there's

// A fudge factor to apply to advertised playlist bitrates to account for

// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or

// A lane is said to be entangled with another when it's not allowed to render

// A lazy component only mounts if it suspended inside a non-

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// A reserved attribute.

// A safety way is to access one of the cross origin properties: Window or Location

// A selector might throw after a source mutation.

// A settings object holds key/value pairs and will ignore anything but the first

// A value of zero here means the number of total samples is unknown.

// A) Gather up all start and end times

// ADTS

// ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned

// APNG format (https://wiki.mozilla.org/APNG_Specification)

// ASAP was originally a nextTick shim included in Q. This was factored out

// ASF Objects

// ASF_Header_Object first 80 bytes

// ATTENTION

// AVCLevelIndication

// AVCProfileIndication

// About 3 frames @ 30fps

// Accept a setting if its a valid (signed) integer.

// Accept a setting if its a valid percentage.

// Accept a setting if its one of the given alternatives.

// Accessing the contentDocument of a HTMLIframeElement can cause the browser

// Accessing this.activeCues for the side-effects of updating itself

// According to the standard, mid-row codes

// Accumulate all instances and listeners via the target -> root path.

// Act like we're loaded for other purposes.

// Actual calculation will be done in finalize

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Add ARIA attributes for clickable element which is not a native HTML button

// Add a `name` property to the plugin prototype so that each plugin can

// Add a clone of the args at this point to history.

// Add a default timeout

// Add a direct reference to the child by name on the parent instance.

// Add a listener to the target's dispose event as well. This ensures

// Add a major version class to aid css in plugins

// Add a player prototype method for all sub-classed plugins (but not for

// Add a single API-specific function to the VhsHandler instance

// Add a style element in the player that we'll use to set the width/height

// Add a title list item to the top

// Add aliases

// Add all children to a key map for quick lookups.

// Add an OFF menu item to turn all tracks off

// Add an extra top frame while an element is being validated

// Add any child components in options

// Add attributes for button element

// Add buildCSSClass values to the button, not the wrapper

// Add console prefix after adding to history.

// Add default styles

// Add listener for esc key to exit fullscreen

// Add menu items to the menu

// Add one to the time to ensure that we don't accidentally attempt to divide

// Add playback rate selection by adding rates

// Add the UI object's element to the container div (box)

// Add the manual rendition mix-in to VhsHandler

// Add the remaining children to a temporary map so that we can find them by

// Add the slider element class to all sub classes

// Add the tech element in the DOM if it was not already there

// Add the type to the front of the message when it's not "log".

// Add this track to the list of pending tracks and store

// Add to byteIndex to support multiple ID3 tags in sequence

// Add to that the distance this segment is from the very first

// Add types as properties on MediaError

// Additional mappings:

// Additionally, check that the document in question has a default view.

// Adds HTML closing tags for current formatting to caption text and

// Adds leading coma if properties preceed color-stops

// Adds the opening HTML tag for the passed character to the caption text,

// Adjust Gops' metadata to account for the inclusion of the

// Adjust the `pullTooltipBy` distance to the left or right depending on

// Advance the buffer early in case we fail below.

// Advance the index before calling the task. This ensures that we will

// After all the children have unmounted, it is now safe to remove the

// After these have been cleaned up, we'll let them throw.

// After this we'll use a set of heuristics to determine whether this

// Align at the center

// All PACs can apply underline, so detect and apply

// All checks failed. Returning false to indicate failure to correct waiting

// All of the above are perceived as null.

// All remaining items in the tail are insertions.

// All tasks are delayed, and this is the task with the earliest delay.

// All tech waiting checks failed. Use last resort correction

// All the menu item instances share the same blur handler provided by the menu container.

// All the transition lanes are taken, too. This should be very

// Allow an optional user-specified function to modify the option

// Allow for disabling default components

// Allow for the ability to individualize this function

// Allow for using event listeners also

// Allow injecting another batching function later

// Allow null for conditional declaration

// Allow options for children to be set at the parent options

// Allow options to be passed as a simple boolean if no configuration

// Allow redundant calls to this constructor to avoid having `instanceof`

// Allow single or multiple animations passed

// Allow use of default import syntax in TypeScript

// Allows for smooth scrubbing, when player can't keep up.

// Already processed this mediaTime for this cue

// Already timed out, so perform work without checking if we need to yield.

// Also keep track of cummulative data about the frame from the nal units such

// Also listen for timeupdate (in the parent) and loadedmetadata because removing those

// Also validate hook order for cascading updates.

// Also, a value of 0 is invalid.

// Although North America uses "captions" in most cases for

// Although it isn't an instance of a class, the segment transmuxer must still be

// Although the spec states an #EXT-X-STREAM-INF tag MUST have a BANDWIDTH attribute,

// Although there should, in theory, be a pending action for any updateend receieved,

// Although these checks should most likely cover non 'main' types, for now it narrows

// Although transmuxing is done, appends may not yet be finished. Throw a marker

// Although we may have already started appending on progress, we shouldn't switch the

// Although, given that all segments have accurate date time objects, the segment

// Always call this before exiting `commitRoot`, to ensure that any

// Always choose the track that matches both language and kind

// Always collect profile timings when DevTools are present.

// Always set children to the same thing. In IE9, the selection range will

// Always show at least one digit of minutes.

// An 8-bit signed integer

// An empty line terminates the header and starts the body (cues).

// An exception thrown by a task will permanently interrupt the processing of

// An incomplete component only mounts if it suspended inside a non-

// An indeterminate component only mounts if it suspended inside a non-

// An update was scheduled from inside a reducer. Add the new

// Android 2.3 throws an Illegal Constructor error for window.Event

// Android 4.0 and above can play HLS to some extent but it reports being unable to do so

// Android Chrome will report duration as Infinity for VOD HLS until after

// Any "shared" rollover streams will accept _all_ data. Otherwise,

// Any existing children that weren't consumed above were deleted. We need

// Any falsy value should stay as an empty string, otherwise

// Any insertions at the end of the tail list after this point

// Any mouse movement will be considered user activity

// Any reducers that existed in both the new and old rootReducer

// Any string that contains non-whitespace characters will

// Any touch events are set to block the mousedown event from happening

// Anything else let's inspect with %O

// Anything lower than normal priority should remain at the current level.

// Append a new context item.

// Append a universal closeability message if the modal is closeable.

// Append all the effects of the subtree and this fiber onto the effect

// Append each moof+mdat (one per track) together

// Append pending updates to base queue

// Append the captured update the end of the cloned list.

// Append the node to the current node, and enter the scope of the new

// Append the rendered row to the child list.

// Append the update to the end of the list.

// Append to the beginning of the list.

// Append to the end of the list

// Append to the end of the list.

// Apple sanctioned for backwards compatibility

// Apple santioned

// Apply any `formatters` transformations

// Apply default values for any missing fields.

// Apply env-specific formatting (colors, etc.)

// Apply fullscreen styles

// Apply initial line position to the cue box.

// Apply previous operator, since it has precedence over current one

// Apply styles to a div. If there is no div passed then it defaults to the

// Apply the diff to the DOM node.

// Apply the diff.

// Are we removing all bound events?

// ArrayBuffers are transferable but generic TypedArrays are not

// As a result though, React will see the scheduled update as a noop and bailout.

// As a workaround to support multiple concurrent renderers, we categorize

// As per the recommendation in CEA-608(Base Row Implementation), defer to the number

// As the event types are in pairs of two, we need to iterate

// Assign the result of the finished delegate to the temporary

// Assume WebVTT.convertCueToDOMTree is on the global.

// Assume it is ADTS-container

// Assume the artist field is used as artists

// Assume this is just a normal PDF

// Assumes signed `.xpi` from addons.mozilla.org

// Assumes tag format to be

// Assumes tag formate to be

// Assumes there is no parent namespace.

// Assumes timestamps are monotonically increasing.

// Assumptions:

// AsyncIterator objects; they just return a Promise for the value of

// AsyncMode is deprecated along with isAsyncMode

// AsyncMode should be deprecated

// At least in Chrome, if there is a gap in the video buffer, the audio will continue

// At least two to three segments worth of content should be buffered before there's a

// At the same time we're going to reverse the list of everything

// At this point, the return fiber's effect list is empty except for

// Attach a listener to the promise to "ping" the root and retry. But only if

// Attach our event handlers

// Attach the metadata to the value property of the cue to keep consistency between

// Attachment

// Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

// Attempt to complete the current unit of work, then move to the next

// Attempt to increase the priority of this target.

// Attempting the main content

// Attributes are not additive, so clear all formatting

// Audio

// Audio Packet

// Audio has a different clock equal to the sampling_rate so we need to

// Audio loader should wait if:

// AudioSampleEntry, ISO/IEC 14496-12

// Auto-bind the `handleStateChanged` method of the target object if it exists.

// Auto-bind the dispose method so we can use it as a listener and unbind

// Avoid an extra prototype jump for these methods.

// Avoid crashing if we missed a drop event or our previous drag died

// Avoid deopting on observable arguments or heterogeneous types.

// Avoid failures from read-only properties

// Avoid propagating failures to Promises returned by later

// Avoid recreating masked context unless unmasked context has changed.

// Avoid setting value attribute on submit/reset inputs as it overrides the

// Avoid spamming the console because they are often not actionable except for lib authors

// Avoid the error message generated by ClickableComponent's addChild method

// B(20,19): MPEG Audio versionIndex ID

// B) Sort them by time

// BADCUE

// BANDWIDTH_VARIANCE and add one so the playlist selector does not exclude it

// BE Signed Integer

// BE Unsigned Integer

// Bail if this doesn't appear to be an H264 stream

// Bail out if hotkeys are not configured.

// Bail out if the component has already been disposed.

// Bail out if the user is focused on an interactive form element.

// Bail out if there's no console or if this type is not allowed by the

// Based on the previous check, one of these must be true

// Based on:

// Batching is necessary here in order to ensure that all event handlers run

// Be forgiving, per 25.3.3.3.3 of the spec:

// Because the audio timestamp offset may have been changed by the main loader,

// Because this fiber did not complete, don't reset its expiration time.

// Because videoTimingInfo is only set after transmux, it is the only way to get

// Before Symbol spec.

// Before entering the begin phase, clear pending update priority.

// Before entering the begin phase, copy the work-in-progress onto a dummy

// Before exiting, make sure there's a callback scheduled for the next

// Bitmask char0 so that we can apply character transformations

// Blacklist this playlist

// Both document and window will never be undefined thanks to `global`.

// Boundaries without fallbacks or should be avoided are not considered since

// Breaks iPhone, fixed in HTML5 setup.

// Browser does not implement `key`, polyfill as much of it as we can.

// Browsers introduced an intervention, making these events

// Browsers may emit a timeupdate event after a waiting event. In order to prevent

// Browsers support silencing uncaught errors by calling

// Browsers without "deltaMode" is reporting in raw wheel delta where one

// Bubble up the earliest expiration time.

// Built-in SSR attribute is allowed

// Built-in properties that belong on the element

// Bump the sequence number for next time

// But in practice, there are a few reasons why it is better to wait until a loader

// But in the event that it's executed more than once–

// But native events return true for stopPropagation, but don't have

// But only if this has a fallback.

// But we shouldn't call any lifecycle methods or callbacks. Remove

// But works for yielding (the common case) and should support resuming.

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By default, return `true` to log errors to the console.

// By explicitly using `prop-types` you are opting into new development behavior.

// By setting `count` to 1 the throughput value becomes the starting value

// Bytes per element is 4

// C(18,17): Layer description

// C) Go along one by one incrementing arity for start and decrementing

// CC1, CC2, CC3, CC4

// CRC data present

// CSP to forbid Function, and you're not willing to fix either of those

// Cache the last set value for optimized scrubbing (esp. Flash)

// Cache unmasked context so we can avoid recreating masked context unless necessary.

// Caching the currentTime is meant to prevent a massive amount of reads on the tech's

// Calculate VINT_WIDTH

// Calculate bitrate

// Calculate duration

// Calculate sampling rate

// Calculate the diff between the two objects.

// Calculate the distance from the reference edge of the viewport to the text

// Call delegate.iterator[context.method](context.arg) and handle the

// Call the event method for each one of the types

// Call the function asynchronously by default for consistency

// Call this asynchronously to match the xhr request behavior below

// Calling defineProperty() again should be equivalent.

// Can initialize it with either a StyleBox or another BoxPosition.

// Can pass a StyleBox, HTMLElement, or another BoxPositon.

// Can't convert without an "anchor point" for the program time (i.e., a time that can

// Cancel an existing timeout.

// Cannot set timeout with sync request

// Caption data has to be reset when seeking outside buffered range

// CaptionSettingsMenuItem has no concept of 'selected'

// Capture and retry

// Capture errors so they don't interrupt unmounting.

// Capture local references to native APIs, in case a polyfill overrides them.

// Capture values for checking if and when this component unmounts

// Captured a suspense effect. Re-render the boundary.

// Captured updates are updates that are thrown by a child during the render

// Careful!

// Careful: RN currently depends on this prefix

// Cast `value` to a string to ensure the value is set correctly. While

// Cast array buffer to correct type for transmuxer

// Catch/silence error when a pause interrupts a play request

// Caution: React DevTools currently depends on this property

// Certain browsers don't have support for console.debug. For those, we

// Certain renderers require commit-time effects for initial mount.

// Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/

// Chapter-Tag

// Chapters

// Check MPEG 1 or 2 Layer 3 header, or 'layer 0' for ADTS (MPEG sync-word 0xFFE)

// Check for (ADTS) MPEG-2

// Check for MPEG header at different starting offsets

// Check for MPEG layer 1

// Check for MPEG layer 2

// Check for MPEG layer 3

// Check for a possible change between when we last rendered now.

// Check for end-of-string.

// Check for entangled lanes and add them to the batch.

// Check for syntax errors:

// Check for tasks that are no longer delayed and add them to the queue.

// Check for the start of NOTE blocks.

// Check for width:height format

// Check if MessageChannel is supported, too.

// Check if Pickle is ASAR

// Check if absolute URL

// Check if any lanes are being starved by other work. If so, mark them as

// Check if any media elements exist

// Check if any work has expired.

// Check if both types have a family and it's the same one.

// Check if browser support events with passive listeners

// Check if data-setup attr exists.

// Check if element exists, has getAttribute func.

// Check if leading zero is need for seconds

// Check if module is in cache

// Check if previous string ref matches new string ref

// Check if the browser supports this technology

// Check if the children have any pending work.

// Check if the context matches.

// Check if the current tech is defined before continuing

// Check if the work completed or if something threw.

// Check if the work-in-progress queue is a clone.

// Check if there are updates that we skipped tree that might have unblocked

// Check if there was a render phase update

// Check if there's an existing task. We may be able to reuse it.

// Check if there's remaining work on this root

// Check if this box is entirely within the container or it is overlapping

// Check if this box is within another box.

// Check if this box overlaps another box, b2.

// Check if this box overlaps any other boxes in boxes.

// Check if this browser supports moving the element into the box.

// Check if this host node is stable or about to be placed.

// Check if this is an Adobe Illustrator file

// Check if this target is unblocked. Returns true if it's unblocked.

// Check if using css width/height (% or px) and adjust

// Check if we need to show hours

// Check if we're dealing with a real forwardRef. Don't want to crash early.

// Check if we're inside unbatchedUpdates

// Check if we're not already rendering

// Check that all units are the same

// Check that everything is ready to begin buffering for the first call to play

// Check that the browser supports the APIs we need to implement our special

// Check the node either in the main document or in the current context

// Check the target ids at the innermost position. If they are valid, add them

// Check to see if mouse/touch activity has happened

// Check to see if the time is beyond a reasonable guess of the end of the stream.

// Check to see if we are appending a full segment.

// Check to see if we are crossing a discontinuity to see if we need to set the

// Check whether a track of a different kind is showing

// Check whether we have a value for a key.

// Checks if the target has a default action for this event.

// Child classes can include a function that does:

// Children can be more than one argument, and those are transferred onto

// Choosing a reasonable default is particularly important for high bitrate content and

// Chrome 32+ warns if you try to copy deprecated returnValue, but

// Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970

// Chrome and IE fire non-standard event when selection is changed (and

// Chrome bug: https://bugs.chromium.org/p/chromium/issues/detail?id=651904

// Chrome does not appear to continue `timeupdate` events after a `waiting` event

// Chrome has a hard limit of 150MB of

// Chrome raises "The specified value <x> is not a valid email address".

// Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation

// Chrome with requestType=blob throws errors arround when even testing access to responseText

// Chrome's video froze at 10 seconds, where the video buffer encountered the gap,

// Chrome/Safari/IE have bugs where when you change the cursor it can

// Chunk size

// Chunk type ID

// Circular

// Clear ContentReset from the effect tag

// Clear already finished discrete updates in case that a later call of

// Clear any existing inactivity timeout to start the timer over

// Clear completed interactions from the pending Map.

// Clear existing timeout

// Clear nalUnits

// Clear out the queue before the queued functions are run, since some of the

// Clear the "placement" from effect tag so that we know that this is

// Clone from the current hook.

// Clone the dependencies object. This is mutated during the render phase, so

// Clone the media object so it cannot be mutated from outside.

// Clone the old object so that we can modify the values event = {};

// Clone the update queue from current. Unless it's already a clone.

// Close menu popup when a user clicks outside the menu

// Closed Captioning Media, https://developer.apple.com/library/archive/documentation/QuickTime/QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-SW87

// Cluster

// Collect dispatched captions

// Combine passed cssRules with previously deferred CSS rules

// Command keys insert or clear IME input.

// Comments

// Commit the effects

// Commit the placeholder.

// Commit the work prepared earlier.

// Common tag (alias) found

// Compactify. Considerable speedup on Firefox.

// Compare sort index first, then task id.

// Compensate for precision differences so that currentTime is not less

// Completing this fiber spawned new work. Work on that next.

// Compute double and third tables

// Compute sbox

// Compute the intial position and styles of the cue div.

// Computes the next Just Noticeable Difference (JND) boundary.

// Concatenate the video data and construct the mdat

// Conceptually the HostRoot fiber is a child of the Container node. So if you

// Conceptually this is similar to Placement in that a new subtree is

// Conceptually, this is really the same as pinging. We can use any

// Configure the caption window if we're in roll-up mode

// Confirmed that the boundary is in a concurrent mode tree. Continue

// Connect to the new tree.

// Consider removing.

// Constants for the LSByte command codes recognized by Cea608Stream. This

// Constructs the computed display state of the cue (a div). Places the div

// Consume 'n' characters from the input.

// Consume remaining header and frame data

// Content Encoding

// Context is created before the class component is instantiated so check for instance.

// Context list has a pending update. Mark that this fiber performed work.

// Context providers should defer to sCU for rendering

// Continue asynchronously if there is no sidx

// Continue with the flush process now

// Contrary to `setAttribute`, object properties are properly

// Controlled attributes are not validated

// Convert an array of nal units into an array of frames with each frame being

// Convert native tag event to generic 'alias' tag

// Convert the function's inner code to a string to construct the worker

// Convert the positions from this box to CSS compatible positions using

// Convert to a percentage for css value

// Convert to absolute URL. Flash hosted off-site needs an absolute URL.

// Convert to seconds in the source's timescale

// Convince Flow we've calculated it (it's DEV-only in this method.)

// Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.

// Copy over all the attributes from the tag, including ID and class

// Copy pageX/pageY from the object

// Copy the specific URL properties to a new object

// Count leading zeros. Only used on lanes, so assume input is an integer.

// Count of children found in the current subtree.

// Count the number of times the root synchronously re-renders without

// Counters used to generate unique IDs.

// Create SegmentLoader stat-getters

// Create a copy of the TextTrackCueList...

// Create a fake event type.

// Create a global error event handler. We use this to capture the value

// Create a new array to hold the NAL unit data

// Create a new module (and put it into the cache)

// Create a new object & element for this controls set

// Create a new queue and setState method,

// Create a new typed array to hold the init segment

// Create a new typed array to hold the moof+mdats

// Create an absolutely positioned div that will be used to position the cue

// Create an element for this tag.

// Create an event handler for our fake event. We will synchronously

// Create an init segment containing a moov

// Create and add the child component.

// Create bound methods for document listeners.

// Create element if one wasn't provided in options

// Create new video.js instance.

// Create pseudo track info

// Create reverse mapping

// Create the new function that changes the context

// Create the region, using default values for any values that were not

// Create the script via .innerHTML so its "parser-inserted" flag is

// Creates a new ParserError object from an errorData object. The errorData

// Cueing Data

// Current playback rate

// Currently this is only used with renderSubtreeIntoContainer; not sure if it

// Cursor position is set by indent PAC (see below) in 4-column

// Custom components can no longer be wrapped directly in React DnD 2.0

// Cut off the return pointers to disconnect it from the tree. Ideally, we

// Cut out early if the target id has not been set. This should prevent errors

// D(16): Protection bit (if true 16-bit CRC follows header)

// D) If arity is ever incremented to 2 we are entering an

// DEV mode, we create a separate object for Context.Consumer that acts

// DEV version of invokeGuardedCallback

// DEV-only fields

// DO NOT enable the default subtitle or caption track.

// DO enable the default audio track

// DOM after hydrating, and there are boundaries in the DOM

// DOM component is still mounted; update

// DOM node, and call the user-provided callback from inside an event handler

// DOM properties, then it is an invalid aria-* attribute.

// DashPlaylistLoader must accept either a src url or a playlist because subsequent

// Deal with cases where we got 3 arguments, but we are still listening to

// Decode URL

// DecoderConfigDescriptor

// DecoderSpecificInfo

// Dedup strategy: Warn once per component.

// Dedupe by the rendering component because it's the one that needs to be fixed.

// Default

// Default exports for Node. Export the extended versions of VTTCue and

// Default message to show when a video cannot be played.

// Default order of fallback technology

// Default state of video is paused

// Default stream functions that are expected to be overridden to perform

// Default to 1 when returning current volume.

// Default to ASF generic extension

// Default to a ContinuousEvent. Note: we might

// Default to a dummy "batch" implementation that just runs the callback

// Default to shallow comparison

// Default track encountered an error. All we can do now is blacklist the current

// Defaults

// Defensive coding. This is never expected to happen.

// Define Generator.prototype.{next,throw,return} in terms of the

// Define getter/setters for config properties

// Define the dispose function to clean up our events

// Define the unified helper method that is used to implement .next,

// Definitely a string, and a clone

// Delay the initialization of children because we need to set up

// Delegate to the injected renderer-specific implementation

// Delete all buffered data to allow an immediate quality switch, then seek to give

// Delete child references

// Delete the fallback child fragment

// Delete the old fiber and place the new one.

// Delete the previous character

// Deletions are added in reversed order so we add it to the front.

// Deliberately forget the last sent value so that we don't

// Deliver new bytes to the stream.

// Denotes the special case of a manifest object passed to http-streaming instead of a

// Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources

// Despite the naming that might imply otherwise, this method only

// Detach refs and call componentWillUnmount() on the whole subtree.

// Detach the content element from the DOM before performing

// Detach the insertion after the last node that was already

// Detect PACs (Preamble Address Codes)

// Detect buggy property enumeration order in older V8 versions.

// Detected Microsoft Compound File Binary File (MS-CFB) Format.

// Determine if native controls should be used

// Determine if the tag should be added based on the context of where it

// Determine if we need to compute the display states of the cues. This could

// Determine the next expiration time to work on, using the fields stored

// Determine the next lanes to work on, and their priority.

// Determine the relevant kind(s) of tracks for this component and filter

// DevTools exists

// DevTools exists, even though it doesn't support Fiber.

// Didn't match.

// Disabled?

// Discogs

// Disconnect from the old current.

// Disconnect the alternate pointers.

// Disconnect the tail rows after the content row.

// Dispatch packet to the right Cea608Stream

// Dispatch the exception by looping back around to the

// Dispose all children.

// Dispose any existing source handler

// Disposed players leave a key with a `null` value, so we need to make sure

// Distinguish between actual "data" props that were passed to the wrapper component,

// Do a pass over the next row.

// Do not add duplicate elements

// Do not add duplicate tracks

// Do not allow keydowns to reach out of the modal dialog.

// Do not append effects to parents if a sibling failed to complete

// Do not assign value if it is already set. This prevents user text input

// Do not attempt to reload the source if a source-reload occurred before

// Do not call preventDefault() on touchstart in Chrome

// Do not fire durationchange unless the duration value is known.

// Do not pop unless this Fiber provided the current context.

// Do not reset the effect list.

// Do not set `select.value` as exact behavior isn't consistent across all

// Do not try adding the cue if the start and end times are invalid.

// Do not work on any idle work until all the non-idle work has finished,

// Do some typechecking here since we call this blindly. We want to ensure

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Dolby Audio Types

// Don't abort if the current playlist is on the lowestEnabledRendition

// Don't abort if we have no bandwidth information to estimate segment sizes

// Don't blacklist the only playlist unless it was blacklisted

// Don't bother comparing lengths in prod because these arrays should be

// Don't bother with a very short suspense time.

// Don't change these two values. They're used by React Dev Tools.

// Don't continue if the root player doesn't support reporting user activity

// Don't count time spent in a timed out Suspense subtree as part of the base duration.

// Don't deduplicate because this legitimately causes bugs

// Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.

// Don't do a rendition switch unless we have enough time to get a sync segment

// Don't emit hover in `dragenter` on Firefox due to an edge case.

// Don't fire the event while the user is dragging. This matches the

// Don't let browser turn this into a click

// Don't let video end while scrubbing.

// Don't need to call updateMouseMovementPolyfillState() here

// Don't pass current sidx mapping

// Don't pass through non HTML tags through to HTML elements

// Don't persist the state accumulated from the render phase updates to

// Don't preventDefault for Tab key - we still want to lose focus

// Don't publish the source just yet (see why below)

// Don't push this Fiber's context unless it's unique.

// Don't rely on the media source for duration in the case of a live playlist since

// Don't remove within target duration of the current time to avoid the possibility of

// Don't replace the kind of track across the same language

// Don't replay promises. Treat everything else like an error.

// Don't require the player ID function in the case of mock players

// Don't reset current debug fiber, since we're about to work on the

// Don't return HostRoot or SuspenseComponent here.

// Don't return anything

// Don't return anything.

// Don't scan deeper if this is a matching provider

// Don't set the end time yet, as the segment may not be finished processing.

// Don't show a nice cursor but still prevent default

// Don't trigger a change event unless it actually changed

// Don't trigger unless buffered amount is greater than last time

// Don't update "base" render times for bailouts.

// Don't want poster to be tabbable.

// Don't want to add a cache object through getElData if not needed

// Don't want to add a data object to cache for every parent,

// Don't want to trigger ready here or it will before init is actually

// Don't warn about react-lifecycles-compat polyfilled components.

// Don't warn about react-lifecycles-compat polyfilled methods though.

// Don't warn in exotic cases like chrome-extension://.

// Double check webkit in userAgent just in case we are in a worker

// Drag-and-Drop Attributes

// Due to the imprecision of decimal/ratio based calculations and varying

// Due to this, it is left to the user to implement at this time.

// Dummy constructor functions that we use as the .constructor and

// During mounting we don't know the child context yet as the instance doesn't exist.

// E(15,12): Bitrate index

// E.G.

// E.G. Same elements as above with this added at the end

// E.g

// ES_Descriptor

// ES_ID

// Each iteration, currentParent is populated with node's host parent if not

// Eager reads the version of a mutable source and stores it on the root.

// Early bailout if there's no pending work left.

// Edge fails with "Object expected" in some scenarios.

// Edge/IE bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14600375/

// Effectively, this gives us try-catch behavior without actually using

// Effects

// Either a BoxPosition was passed in and we need to copy it, or a StyleBox

// Either there's no queue entry that uses this source buffer type in the queue, or

// Electron ships a custom <webview> tag to display external web content in

// Element may have a `player` property referring to an already created

// Elements are stringified (which is normally irrelevant

// Eliminate any possible sources of leaking memory by clearing up

// Emit each caption to the outside world

// Emit each id3 tag to the outside world

// Emit the built segment

// Empty video tag tracks so the built-in player doesn't use them also.

// Enable debug mode to fire debugon event for all plugins.

// Enables DevTools to append owner stacks to error messages in DEV mode.

// Encoder Info

// End time may not exist in a case where we aren't parsing the full segment (one

// Enforce duration not enabled, stop processing entire stream

// Ensure ready is triggered asynchronously

// Ensure the CSS class is valid by starting with an alpha character

// Ensure the outside world knows about our changes

// Ensure the right class is still on the player for the style element

// Ensure there's at least a guid, even if the function hasn't been used

// Ensure we have the right element, and that the user is not dragging a

// Ensure we transfer the update queue to the parent so that it doesn't

// Entangle the updates so that they render in the same batch.

// Enter BADWEBVTT state if header was not parsed correctly otherwise

// Entered into the middle of an ad cue

// Env-specific initialization logic for debug instances

// Equivalent of `typeof` but with special handling for array and regexp.

// Equivalent to push, but avoids a function call.

// Erasure

// Error Handling

// Error was thrown at the root. There is no parent, so the root

// Esc button will trigger `click` event

// Escape hides popup menu

// Escape or Tab unpress the 'button'

// Especially since these might also just pop in during future commits.

// Even better would be if children weren't special cased at all tho.

// Even if there is no available next range, there is still a possibility we are

// Even if this property uses a namespace we use getAttribute

// Even if we abort and rereconcile the children, that will try to hydrate

// Even if we were, there is another bug in Internet Explorer 10.

// Even in the case of a live playlist, the native MediaSource's duration should not

// Even though keepOriginalTimestamps is set to true for the transmuxer, timestamp

// Even though the requests above are aborted, and in theory we could wait until we

// Even though the video underflowed and was stuck in a gap, the audio overplayed

// Even though we can't restart right now, we might get an

// Even when hot reloading, allow dependencies to stabilize

// Events are not possible without cancelling IME.

// Eventually we'll delete this branch altogether.

// Everything else (cast to string)

// Example scenario: Enter a long stream/video just after a rollover occurred. The reference

// Example:

// Except for NoPriority, these correspond to Scheduler priorities. We use

// Exception thrown outside of any try block that could handle

// Execute the module function

// Executes the default action.

// Exit early because we don't have enough to parse

// Exit early if we don't have enough in the buffer

// Exit loop after executing an opening parenthesis or function

// Exit without suspending.

// Expect IME keyCode on each keydown. If we get any other

// Expected to be working on a non-root fiber. This is a fatal error

// Experimental Create Event Handle API.

// Experimental indicator

// Extend subObj's prototype with functions and other properties from props

// Extend the first frame of what is now the

// Extended Flags

// Extended characters always follow their "non-extended" equivalents.

// Extended header

// Extended header size

// Extra space so second column lines up

// Extract the VM specific prefix used by each line.

// F(11,10): Sampling rate frequency index

// F) Record overlapping ranges

// FF does not set `charCode` for the Enter-key, check against `keyCode`.

// FIXME: More than one lane can finish in a single commit.

// FIXME: What if the suspended lanes are Idle? Should not restart.

// FIXME: should we read the full 64 bits?

// FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.

// Fabric (secondary); React DOM (primary) and React ART (secondary).

// Fail fast and in a meaningful way!

// Failing to do this will result in unnecessary calls to componentWillReceiveProps.

// Fall back gracefully if we're running an older version of Scheduler.

// Fall back to a native source hander when unsupported sources are

// Fall back to the production implementation.

// Fall back to using a timer.

// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).

// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).

// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).

// Fallback to just using the name if we couldn't make it throw.

// Fallback to nativeEvent.srcElement for IE9

// Fast path. We can bail out without scheduling React to re-render.

// Fetches element data and a reference to the parent (for bubbling).

// Fiber

// File Type Box (https://en.wikipedia.org/wiki/ISO_base_media_file_format)

// Fill artist using artists source

// Fill artists using artist source

// Fill content if the modal has never opened before and

// Filled using alternative tags

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

// Final check, assuring Pickle/ASAR format

// Finally call hover on all matching targets.

// Finally remove the element data if there is no data left

// Finally, replace the plugin name on the player with a new factory

// Finally, we flush all the warnings

// Finally, we need to push the host context to the stack.

// Find all `Emulation Prevention Bytes`

// Find the best position for a cue box, b, on the video. The axis parameter

// Find the last region we parsed with the same region id.

// Find the percentage of the area that this box is overlapping with another

// Find the segment containing currentTime

// Find the segment containing the end of the buffer

// Finish decoding the stream.

// FireFox implements `key` but returns `MozPrintableKey` for all

// Firefox and Chrome report correctly

// Firefox can dispatch this event in an infinite loop

// Firefox creates a click event on right mouse clicks. This removes the

// Firefox creates a keypress event for function keys too. This removes

// Firefox doesn't support selectionchange, so check selection status

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox returns false for event.hasOwnProperty('type') and other props

// Firefox won't drag without setting data

// First clear any existing content.

// First convert cue time to TS time using the timestamp-map provided within the vtt

// First look for lanes that are completely unclaimed, i.e. have no

// First parse all WavPack blocks

// First pass: Destroy stale passive effects.

// First replay discrete events.

// First update the playlists in playlist list

// First, Legacy Mode has different semantics for backwards compatibility. The

// First, invoke content if it is a function. If it produces an array,

// First, invoke value if it is a function to produce a new value,

// First, let's check if we're in an unusual parsing mode...

// First, validate keys.

// First, we have to build the index from byte locations to

// Fix button for mouse clicks:

// Fixes bug on Android & iOS where when tapping progressBar (when control bar is displayed)

// Flag interpretation

// Flag the module as loaded

// Flag this event loop as needing state restore.

// Flags that we're not actually blocked on anything as far as we know.

// Flash likes to die and reload when you hide or reposition it.

// Flatten children. We'll warn if they are invalid

// Flip backward selections, so we can set with a single range.

// Flow does not allow string concatenation of most non-string types. To work

// Flow knows about invariant, so it complains if I add a break

// Flow needs the return null here, but ESLint complains about it.

// Flush any pending passive effects before deciding which lanes to work on,

// Flush page segments

// Flush the immediate callbacks that were scheduled during this batch

// Flush the immediate callbacks that were scheduled during this batch.

// Flush the queue in the next tick, at the earliest.

// Flush the synchronous work now, unless we're already working or inside

// Focused number inputs synchronize on blur. See ChangeEventPlugin.js

// Focusing a node can change the scroll position, which is undesirable

// For HLS master playlists, even though certain attributes MUST be defined, the

// For HLS media playlists, m3u8-parser does not attach an attributes object to the

// For HTML, certain tags should omit their close tag. We keep a list for

// For IE8 and IE9.

// For WebVTT, set the new text track in the segmentloader

// For all non-delegated events, apart from scroll, we attach

// For all other deleted properties we add it to the queue. We use

// For any other property we always add it to the queue and then we

// For as long as the they are touching the device or have their mouse down,

// For each Frame..

// For each Gop..

// For each NAL..

// For each root with pending discrete updates, schedule a callback to

// For each wakeable, attach a listener so that when it resolves, React

// For example, "undefined" or "of type array"

// For example, SuspenseList coordinates when nested content appears.

// For example, when unhiding a hidden tree, we include all the lanes

// For hydration we reuse the update path but we treat the oldProps

// For input and textarea we current always set the value property at

// For media playlists, m3u8-parser does not have access to a URI, as HLS media

// For now, the "id" of stateful hooks is just the stateful hook index.

// For now, we use the same heuristic as in the old ExpirationTimes model:

// For number inputs, the display value loses trailing decimal points. For email inputs,

// For other native event types, do nothing.

// For other targets, ask IE

// For reasons explained above, we are also unable to use `setImmediate`

// For simplicity, reapply `defaultValue` if `multiple` is toggled.

// For some cases, we're specific, everything else falls to `video/mp4` with `mp4` extension.

// For text content children we compare against textContent. This

// For the last frame, use the duration of the previous frame if we

// For the native GeneratorFunction constructor, the best we can

// For those exceptions where entanglement is semantically important, like

// Force a re-render if the implementation changed due to hot reload:

// Force the parsed captions to be dispatched

// Force value to between 0 and 1

// Forks can return `false` if this isn't desirable.

// Fortunately this only impacts DEV builds.

// ForwardRef is special because its resolved .type is an object,

// Found a CUE-IN so end the cue

// Found a pending lane with no expiration time. If it's not suspended, or

// Found audio:

// Found it!

// Found the nearest boundary.

// Found the pat and pmt, we can stop walking the segment

// Found video:

// Fragmented mp4 playback

// Frame length is a 13 bit integer starting 16 bits from the

// Frames-of-silence to use for filling in missing AAC frames

// Freeze the next style object so that we can assume it won't be

// From here on we know that loadstart already fired and we missed it.

// From the CEA-608 spec:

// From the H 222.0 MPEG-TS spec

// Front of queue

// Function that determines whether or not to exclude an element from

// G(9): Padding bit

// GenStateExecuting and loop back for another invocation.

// General encapsulated object

// Get ID from options or options element if one is supplied

// Get a reference to a bound version of the quality change function

// Get an object that represents the box's position without anything extra.

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get dimension value from style

// Get only the techs specified in `techOrder` that exist and are supported by the

// Get rid of the original video tag reference after the first tech is loaded

// Get tag children settings

// Get the box position again after we've applied the specified positioning

// Get the draggable source

// Get the source client offset

// Get timescale for this specific track. Assume a 90kHz clock if no timescale was

// Give the component that originally created this child.

// Given a DOM node, return the closest HostComponent or HostText fiber ancestor.

// Grab `persistTextTrackSettings` from the player options if not passed in child options

// Grab tech-specific options from player options and add source and parent element to use.

// Group cues by their startTime value

// Group-ID

// Guard against Fiber being unmounted.

// Guard against cases where we're not getting track info at all until we are

// H(8): Private bit

// H264

// HAVE_MASTER or HAVE_METADATA depending on if the loader has loaded a media

// HLS is a source handler, not a tech. Make sure attempts to use it

// HLS manifests can go by many mime-types

// HLS with multiple-audio tracks must always get an audio codec.

// HLS' externally requested playlists), then the content is demuxed.

// HLSe playback

// HOWEVER, we also want to make sure it fires before loadedmetadata

// HTML

// HTML and attributes. Ideally we should preserve structure but it's

// HTML parsing normalizes CR and CRLF to LF.

// Handle key presses

// Handle listeners that are on HostComponents (i.e. <div>)

// Handle mouse position

// Handle object types

// Handle the case where we have both buffers and create an

// Handle top level unkeyed fragments as if they were arrays.

// Handle which other element the event is related to

// Have to check for false as an empty string is a legal value.

// Have to check for false because the setting an be an empty string.

// Having an element is not required

// Helper aliases

// Helper for defining the .next, .throw, and .return methods of the

// Helper function to parse input into groups separated by 'groupDelim', and

// Helper to allow strings to be decoded instead of the default binary utf8 data.

// Helper to call a given function, only once

// Helpers to patch console.logs to avoid logging during side-effect free

// Here we check for 8859-1 printable characters (for simplicity, it's a mask which also catches one non-printable character).

// Here we check to see if the defaultValue has actually changed, avoiding these problems

// Here we slice on off so that the loop in trigger

// Hide any links within the video/audio tag,

// Hide any scroll bars

// Hide controls and note if they were enabled.

// Highest possible so the first thing we get is better.

// Hold our own reference to fullscreen api so it can be mocked in tests

// Hold the reference to the parent component via `addChild` method

// Holds callback info that gets queued when playback rate is zero

// Hook up CEA-608/708 caption stream

// Horizontal box orientation; textPos is the distance from the left edge of the

// Host root, text node or just invalid type.

// HostRoot back. To get to the HostRoot, you need to pass a child of it.

// Hot reloading is disabled.

// How much of the buffer must be filled before we consider upswitching

// However, `act` uses `batchedUpdates`, so there's no way to distinguish

// However, `flush` does not make any arrangements to be called again if an

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, since the HostRoot starts out with an alternate it might

// However, since this timer gets frequently dropped in Firefox

// However, since we're going to remain on the fallback, we no longer want

// However, the "included" lanes could be mutated in between updates in the

// However, this probably won't happen, and if it does it can be handled then.

// However, we already warn about bad casing elsewhere.

// However, we can't just call getRootHostContext() and push it because

// I(7,6): Channel Mode

// I.e. if we had null values before, then we want to defer this

// ID so client and server IDs match and throws to rerender.

// ID will now reference player box, not the video tag

// ID3 reports the tag size excluding the header but it's more

// ID3-meta-data

// ID3v1.1 separator for track

// ID3v2 flags

// ID3v2 versionIndex

// ID3v2/file identifier   "ID3"

// ID_ALT_TRAILER: maybe used to embed original ID3 tag header

// ID_BLOCK_CHECKSUM

// ID_DSD_BLOCK

// ID_DUMMY: could be used to pad WavPack blocks

// ID_MD5_CHECKSUM

// IE 11 has a different user agent string than other IE versions

// IE 11 parses & normalizes the style attribute as opposed to other

// IE 11 uses modern selection, but doesn't support the extend method.

// IE 8 has a broken Object.defineProperty that only works on DOM objects.

// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)

// IE does not have innerHTML for SVG nodes, so instead we inject the

// IE doesn't support MIME types in setData

// IE fires the `keypress` event when a user types an emoji via

// IE if a "è" is desired, you'll always receive "eè"; non-compliant

// IE must die

// IE reports that it supports removeSourceBuffer, but often throws

// IE requires this to fire dragover events

// IE specific).

// IE will error if Windows Media Player not installed #3315

// IE with no Media Player is a LIAR! (#984)

// IE without MediaPlayer throws an error (#519)

// IE. This event does not support bubbling or cancelling, and

// IE10-specific (2012 flex spec), available for completeness

// IE11 logs "[object object]" and required you to expand message to see error object

// IE11 throws an InvalidStateError if you try to set currentTime while the

// IE8 (and 9?) Fix

// IE8 Doesn't like when you mess with native event properties

// IE8 and below

// IE8 does not implement `charCode`, but `keyCode` has the correct value.

// IE8 protocol relative urls will return ':' for protocol

// IE9 adds the port to the host property unlike everyone else. If

// IE9 claims to support the input event but fails to trigger it when

// IE9 must have onprogress be set to a unique function.

// IF both items add an event listener with the same function, then you try to remove just one

// INFORMATION SEPARATOR ONE, inclusive:

// ISO/IEC 14496-3, AudioSpecificConfig

// Ideally this should reset to previous but this shouldn't be called in

// Ideally, this would happen immediately on parsing captions,

// Ideally, this would happen immediately on parsing the tag,

// If ' FLAC' in header  https://xiph.org/flac/faq.html

// If ' theora' in header.

// If '\x01video' in header.

// If '\x01vorbis' in header

// If 'defaultKey' is passed then 'dflt' is assumed to be an object with

// If A is deeper, crawl up.

// If B is deeper, crawl up.

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If Scheduler runs in a non-DOM environment, it falls back to a naive

// If `artwork` is not given, create it using `poster`.

// If `outerNode` has children, this is always the second time visiting

// If `rootNode.form` was non-null, then we could try `form.elements`,

// If a bitmask is set

// If a component has string refs, we will assign a different object later.

// If a component throws an error, we replay it again in a synchronously

// If a controlled event was fired, we may need to restore the state of

// If a matching sample cannot be found, use the last

// If a name wasn't used to create the component, check if we can use the

// If a paste event occurs after a keypress, throw out the input

// If a rejected Promise was yielded, throw the rejection back

// If a rendition switch happens during a playback stall where the buffer

// If a scheduler task throws, exit the current browser task so the

// If a sourceset happens before a `loadstart`, we reset the state

// If a task throws an exception, `flush` ensures that its state will remain

// If a type was provided we should rely on that

// If a valid header was not found,  jump one forward and attempt to

// If additional passive effects were scheduled, increment a counter. If this

// If all lanes have pending work, look for a lane that isn't currently

// If all the default lanes are already being worked on, look for a

// If an EOC is received while in paint-on mode, the displayed caption

// If an SVG prop is supplied with bad casing, it will

// If an append errors, we can't recover.

// If an audio group has a URI (the case for HLS, as HLS will use external playlists),

// If an empty string is given, reset the dimension to be automatic

// If an error occurred during hydration,

// If an event name was passed as a string, creates an event out of it

// If an exception is thrown from innerFn, we leave state ===

// If an update was already in progress, we should schedule an Update

// If another track is showing, disable this menu button

// If any of the inputs to useMutableSource change, reading is potentially unsafe.

// If at the top of the DOM, triggers the default action unless disabled.

// If attribute type is boolean, we know for sure it won't be an execution sink

// If audio is not disabled, the main segment loader is responsible for updating

// If both copies of the parent fiber point to the same child, we can

// If by this time no drag source reacted, tell browser not to drag.

// If change and propertychange bubbled, we'd just bind to it like all the

// If changes to the hydrated node need to be applied at the

// If child drag source refuses drag but parent agrees,

// If child is a string, create component with options

// If completing this work spawned new work, do that next. We'll come

// If component has display:none, offset will return 0

// If componentDidCatch is the only error boundary method defined,

// If composition event is available, we extract a string only at

// If computed line position returns negative then line numbers are

// If console.error is overridden, or logCapturedError() shows a dialog that throws,

// If context.method was "throw" but the delegate handled the

// If controlled, assign the value attribute to the current value on blur

// If current time is at the end of the final buffered region, then any playback

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

// If document doesn't exist we know for sure we will crash in this method

// If either the source or the subscription have changed we can't can't trust the update queue.

// If empty string, make it a parsable json object.

// If enqueue has been called before, then we want to wait until

// If error unknown, just log and throw

// If everything is being worked on, pick any lane. This has the

// If getAttribute isn't defined, we need to wait for the DOM.

// If greater than 1, we combine multiple

// If header doesn't equal `buf` with bits masked off

// If hours are showing, we may need to add a leading zero.

// If inserting before a component, insert before that component's element

// If it is @initialization we convert it to an object since this is the format that

// If it is not host node and, we might have a host node inside it.

// If it was the primary children that just suspended, capture and render the

// If it's a spacebar character, assume that we have already handled

// If it's already playing we want to trigger a firstplay event now.

// If it's not a container, we check if it's an instance.

// If it's not ready yet, call method when it is

// If it's safe to read from this source during the current render,

// If language is not set, get the closest lang attribute

// If layout work was scheduled, flush it now.

// If maybeInvokeDelegate(context) changed context.method from

// If more than one finger, don't consider treating this as a click

// If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc

// If new component APIs are defined, "unsafe" lifecycles won't be called.

// If no Emulation Prevention Bytes were found just return the original

// If no async work was scheduled for this interaction,

// If no characters are being inserted, no BeforeInput event should

// If no event plugins have been injected, we are in a server environment.

// If no events exist, nothing to unbind

// If no handlers exist, nothing to unbind

// If no listener was provided, remove all listeners for type

// If no state update is scheduled then the boundary will swallow the error.

// If no type, fall back to checking 'video/[EXTENSION]'

// If none of the children had any work, that means that none of

// If nothing suspended before and we're rendering the same children,

// If nothing threw a Promise or all the same fallbacks are already showing,

// If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //

// If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.

// If passed a ReactElement, clone it and attach this function as a ref.

// If passive option is not supported, then the event will be

// If props or context changed, mark the fiber as having performed work.

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If shouldComponentUpdate returned false, we should still update the

// If something asked for a stack inside a fake render, it should get ignored.

// If something inside a portal is clicked, that click should bubble

// If something threw an error, try rendering one more time. We'll render

// If something throws, leave the remaining callbacks on the queue.

// If something was in fallback state last time, and we have all the

// If that inner render function is different, we'll build a new forwardRef type.

// If the `error` was generated by the playlist loader, it will contain

// If the bandwidth number is unchanged from the initial setting

// If the boundary is outside of blocking mode, we should *not*

// If the buffer contains a whole packet when we are being flushed, emit it

// If the buffer is empty, clear it and return

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the closing tag matches, move back up to the parent node.

// If the controls were hidden we don't want that to change without a tap event

// If the current segment is a discontinuity then we know exactly where

// If the current timestamp value is greater than our reference timestamp and we detect a

// If the date string does not specifiy a timezone, we must specifiy UTC. This is

// If the delegate iterator has a return method, give it a

// If the direct event target isn't a React owned DOM node, we need to look

// If the discrete updates scheduled passive effects, flush them now so that

// If the dispatched exception was caught by a catch block,

// If the document is no longer attached to the dom, the defaultView of the document will be null.

// If the error is a ParsingError then report it to the consumer if

// If the event can be delegated (or is capture phase), we can

// If the first frame of this fragment is not a keyframe we have

// If the first starttime attribute is specified

// If the getSnapshot function changed, we also shouldn't rely on the update queue.

// If the initial master playlist has playlists wtih segments already resolved,

// If the inline option is passed, we want to use different styles altogether.

// If the instance does not exist yet, we will push null at first,

// If the left or right node is smaller, swap with the smaller of those.

// If the listener entry is empty or we should upgrade, then

// If the necessary class operation matches the current state of the

// If the new child is undefined, and the return fiber is a composite

// If the next entry is a media source entry (uses multiple source buffers), block

// If the number of arguments is less than 3, the target is always the

// If the object is an opaque reference ID, it's expected that

// If the offset is >= the length of the packet, then the packet contains no data

// If the original tag is still there, clone and remove it.

// If the passed element has a dispatcher, executes the established handlers.

// If the player is disposed, dispose the plugin.

// If the player is paused, make sure we display the correct time on the seek bar.

// If the player isn't paused, ensure that the segment loader is running

// If the player isn't paused, ensure that the segment loader is running,

// If the player was playing, pause it and take note of its previously

// If the player/tech is ready and we have a source, we can attempt playback.

// If the playlist does not have sync information yet, record that information

// If the playlist is live, then we want to not take low water line into account.

// If the prop isn't in the special list, treat it as a simple attribute.

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the root is not a host container, we're in a disconnected tree. I.e.

// If the root or lanes have changed, throw out the existing stack

// If the segment loader prepares to load a segment, but does not have enough

// If the source mutated between render and now,

// If the specified intial position is greater then the max position then

// If the state is APPENDING, then aborts will not modify the state, meaning the first

// If the string already is bytes, we don't have to do this

// If the subscriber throws, rethrow it in a separate task

// If the sync-point is beyond the start of the playlist, we want to subtract the

// If the tail is hidden there might not be an Suspense boundaries

// If the target changes position as the result of `dragenter`, Firefox

// If the target node is part of a hydrated or not yet rendered subtree, then

// If the text differs, mark it as an update. All the work in done in commitWork.

// If the top level item is an array, we treat it as a set of children,

// If the track from the text tracks list is not of the right kind,

// If the update payload indicates that there is a change or if there

// If the user state was inactive, set the state to active

// If the value is an error, call this function immediately after it is thrown

// If there *are* pending mutations, we may still be able to safely read

// If there are bytes remaining from the last segment, prepend them to the

// If there are errors, we have to abort any outstanding requests

// If there are higher priority lanes, we'll include them even if they

// If there are no cues, we also do not have enough information to figure out

// If there are no passive effects, then we can complete the pending interactions.

// If there are no pending mutations, then `root.mutableReadLanes` will be

// If there are no sources when the player is initialized,

// If there are passive effects, schedule a callback to flush at

// If there are pending passive effects unmounts for this Fiber,

// If there is a duration, use it, otherwise use the given duration of the source

// If there is a playlist that has the same uri as this audio variant, assume

// If there is a ref on a host node we need to schedule a callback

// If there is more work to do in this returnFiber, do that next.

// If there is no alternate, then we only need to check if it is mounted.

// If there is no alternate, this might be a new tree that isn't inserted

// If there is no behavioral change don't add/remove listeners

// If there is no current playlist, then an error occurred while we were

// If there is no data then we won't decode it, but will just try to parse

// If there is no sync point for this playlist, switching to it will require a

// If there is some text before the next tag, return it, otherwise return

// If there was no ID from the options, generate one

// If there was some data left over at the end of the segment that couldn't

// If there's a current queue, and it's different from the base queue, then

// If there's ambiguity due to batching it's resolved in preference of:

// If there's anything in the call queue, then this data came later and should be

// If there's more work, schedule the next message event at the end

// If there's no .player_, this is a player

// If there's no audio or video timing information, then the timestamp offset

// If there's no bar...

// If there's no console then don't try to output messages, but they will

// If there's no match, maybe there will be one further down in the child tree.

// If there's no parent, we're at the root.

// If there's no poster source we should display:none on this component

// If there's no remaining work, we can clear the set of already failed

// If there's no version, then this is the first time we've read from the

// If there's still work at the current priority,

// If they don't match there's a potential tear and a full deopt render is required.

// If they were previously forced into fallbacks, they may now be able

// If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,

// If this boundary has already errored, then we had trouble processing

// If this boundary just timed out, schedule an effect to attach a

// If this boundary just timed out, then it will have a set of wakeables.

// If this doesn't spawn new work, complete the current work.

// If this happens during a replay something went wrong and it might block

// If this is a controlled radio button group, forcing the input that

// If this is a fresh new component that hasn't been rendered yet, we

// If this is a newly suspended tree, it might not get committed as

// If this is a plain function component without default props,

// If this is an allowed frame, keep it and record it's Dts

// If this is an aria-* attribute, but is not listed in the known DOM

// If this is an initial render of a new tree of Suspense boundaries and

// If this is an over event with a target, we might have already dispatched

// If this is being made closeable and has no close button, add one.

// If this is being made uncloseable and has a close button, remove it.

// If this object is disposed, remove the listener.

// If this object is listening to another evented object.

// If this subtreee is running in blocking mode we can suspend,

// If this text track is the component's track and it is not showing,

// If this update was processed eagerly, and its reducer matches the

// If this was a boolean, it doesn't matter what the value is

// If this was the last scheduled async work for any of them,

// If two of the same component are used, different names should be supplied

// If we already have a queue of discrete events, and this is another discrete

// If we already suspended with a delay, then interrupting is fine. Don't

// If we are already rebuffering, increase the amount of variance we add to the

// If we are currently composing (IME) and using a fallback to do so,

// If we are currently inside another batch, we need to wait until it

// If we are currently parsing a cue, report what we have.

// If we are in safe append mode, then completely overwrite the gop buffer

// If we are only accumulating events for the target, then we don't

// If we are using the legacy FB support flag, we

// If we aren't running in "pure" mode, we don't want to memoize values.

// If we call `asap` within tasks scheduled by `asap`, the queue will

// If we can't hydrate this instance let's try the next one.

// If we can't parse the tag, skip to the next tag.

// If we captured an error, but getDerivedStateFromError is not defined,

// If we didn't find a candidate gop fall back to keyframe-pulling

// If we didn't find any host children, fallback to closest host parent.

// If we didn't find anything, let's try the next sibling.

// If we didn't hit the root, that means that we're in an disconnected tree

// If we don't find a Fiber on the comment, it might be because

// If we don't have a child, try the siblings instead.

// If we don't have any more available playlists, we don't want to

// If we don't have any more existing children we can choose a fast path

// If we don't have enough data to actually finish this ADTS frame, return

// If we don't use mutation we drill down into portals here instead.

// If we encounter an escaped % then don't increase the array index

// If we encounter useOpaqueReference's opaque object, this means we are hydrating.

// If we find that "rootContainer", we find the parent fiber

// If we get an event (ex: img onload) before committing that

// If we get here, we have somehow become de-synchronized and we need to step

// If we get updated because one of our children updated, we don't

// If we got a new source or subscribe function, re-subscribe in a passive effect.

// If we had a single constructor, it would be megamorphic and engines would deopt.

// If we had additional state updates during this life-cycle, let's

// If we have a line number to align the cue to.

// If we have a mismatch, it might be caused by that.

// If we have a percentage line value for the cue.

// If we have already queued this exact event, then it's because

// If we have an alternate, that means this is an update and we need

// If we have an alternate, that means this is an update and we need to

// If we have any remaining hydratable nodes, we need to delete them now.

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we have players that were disposed, then their name will still be

// If we have two possible branches, we'll walk backwards up to the root

// If we haven't fully disabled javascript: URLs, and if

// If we haven't seen a timeupdate, we need to check whether playback

// If we haven't yet selected a playlist, wait until then so we know the

// If we hit a "Delayed" case, such as when we'd switch from content back into

// If we hydrated, then we'll need to schedule an update for

// If we ingested the player div, we do not need to move the media element.

// If we pause the loader before any data has been retrieved, its as if we never

// If we pop out of the root or hit the parent the fiber we are the

// If we previously appended a segment that ends more than 3 targetDurations before

// If we previously forced a fallback, we need to schedule work

// If we the instance doesn't have any children, then there can't be

// If we unwrapped and compared the inner types for wrappers instead,

// If we use mutation we drill down into portals using commitUnmount above.

// If we're about to return the first line, and the control is also on the same

// If we're already in the middle of a render, switching lanes will interrupt

// If we're already showing a fallback and it gets "retried", allowing us to show

// If we're already showing a fallback, there are cases where we need to

// If we're currently hydrating, try to hydrate this boundary.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// If we're not currently hydrating but we're in a hydration context, then

// If we're not subscribed to the store, nothing to do here

// If we're outside the container box less then we were on our last try

// If we're recovering from an error, reconcile without reusing any of

// If we're suspended with delay, or if it's a retry, we'll always suspend

// If we're switching from a direct text child to a normal child, or to

// If we've flushed, parsed, and we're still on the INITIAL state then

// If you call unmountComponentAtNode twice in quick succession, you'll

// Ignore NOTE blocks.

// Ignore Space or Enter key operation, which is handled by the browser for

// Ignore chunk-data + CRC

// Ignore data block

// Ignore it and don't print the stack addendum.

// Ignore the finally entry if control is not jumping to a

// Ignore.

// Implementation of the Advanced Systems Format (ASF)

// Implicit key determined by the index in the set

// Important!

// In <timeout> milliseconds, if no more activity has occurred the

// In Chrome, assigning defaultValue to certain input types triggers input validation.

// In Chrome, the Array#sort function is not stable so add a

// In DEV mode, we swap out invokeGuardedCallback for a special version

// In Fiber this, is just the state node right now. We assume it will be

// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the

// In IE9+, we have access to composition events, but the data supplied

// In IE9, propertychange fires for most input events but is buggy and

// In PROD (or in packages without access to React internals),

// In React, we let users pass `true` and `false` even though technically

// In V8, the first line is describing the message but other VMs don't.

// In Video.js we slice listener functions

// In VolumeBar init we have a setTimeout for update that pops and update

// In a future version we should default target to `this`

// In a resume, we'll already have an instance we can reuse.

// In a web browser, exceptions are not fatal. However, to avoid

// In addition to normal timeline changes, these rules also apply to the start of a

// In both cases, we need to throw away pending updates (since they are no longer relevant)

// In case isDSD, these values will ne set in ID_DSD_BLOCK

// In case of an error ignore rest of the cue.

// In certain cases the outter div will be slightly larger then the sum of

// In eager mode, we attach capture listeners early, so we need

// In either case, we don't want to call the event handler if the value

// In environments where Uint8Array is undefined (e.g., IE8), skip set up so that we

// In legacy mode, SuspenseList doesn't work so we just

// In legacy mode, we commit the primary tree as if it successfully

// In legacy sync mode, don't defer the subtree. Render it now.

// In order to capture, the Suspense component must have a fallback prop.

// In order to provide relevant values for the player times, base timing info on the

// In order to set the duration on the media source, it's necessary to wait for all

// In order to support media playlists passed in as vhs-json, the case where the uri

// In order to support react-lifecycles-compat polyfilled components,

// In profiling mode, resetChildExpirationTime is also used to reset

// In some cases the user may want to override this behavior, e.g.

// In such a case, we directly return the `char` property instead of

// In tests, we want to enforce a mocked scheduler.

// In that case, if the source is mutated between the first and second renderer,

// In that case, reset the loader state so that we try to use any information gained

// In that case, throw the error from here so it doesn't get lost.

// In the case where we receive a flush without any data having been

// In the event that there are partial segment downloads, each will try to update the

// In the full segment transmuxer, we don't yet have the ability to extract a "proper"

// In the initial pass we might need to construct the instance.

// In the live case, we need to ignore the very first `seeking` event since

// In the middle of an update, it is possible to have multiple checked.

// In the second pass, we mount the new children. The trick here is that we

// In these cases the object methods go away and we get errors.

// In this case we should get the average line height and use that. This will

// In this case we should still schedule an update with React.

// In this case, call the opaque object's toString function which generates a new client

// In this case, vnd stands for vendor, video.js for the organization, VHS for this

// In which case– leave pending interactions until the subsequent render.

// Include the time spent working on failed children before continuing.

// Included control sets

// Included for completeness

// Incorrect MIME-type, Chrome, in Web API File object

// Increase its priority.

// Increase sample size from 12 to 256.

// Increase sample size from 256 to 512

// Increase the priority of this boundary to unblock

// Increases the priority of thennables when they resolve within this boundary.

// Indicate un-selected state to screen reader

// Infinity), and as long as the native media source duration value is greater than

// Infinity, as any other value will be less than this

// Inform the triggerer if the default was prevented by returning false

// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

// Init debugEnabled_

// Init segments for audio and video only need to be appended in certain cases. Now

// Init state hasStarted_

// Init state userActive_

// Initial mount

// Initial mount should not be batched.

// Initialize CaptionParser if it hasn't been yet

// Initialize signed bit sum

// Initialize tech instance

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Initializing the fields below to smis and later updating them with

// Initially, Tech.el_ is a child of a dummy-div wait until the Component system

// Inject data generated from fallback path into the synthetic event.

// Inner memo component props aren't currently validated in createElement.

// Inner propTypes will be validated in the function component path.

// Inner props are checked in the reconciler.

// Inner props for memo are validated later.

// Inner rounds. Cribbed from OpenSSL.

// Inputs and textareas should be selectable

// Inputs matching these types will still trigger hotkey handling as

// Insert

// Instance

// Instantiate twice to help detect side-effects.

// Instead of committing the fallback immediately, wait for more data

// Instead of mutating we could clone the event.

// Instead, use the element's ownerDocument instead of the global document.

// Instead, we periodically shift 1024 tasks off the queue.

// Intentional fallthrough

// Intentionally camelCase

// Intentionally create event lazily.

// Intentionally fall through to the next case, which handles both

// Intentionally inside to avoid triggering lazy initializers:

// Intentionally not named imports because Rollup would use dynamic dispatch for

// Intentionally pushing one by one.

// Intentionally unsound. Pending updates form a circular list, but we

// Intentionally use the original name.

// Interaction threads are unique per root and expiration time.

// Interactions "stack"–

// Internal invariant that should never happen, but feasibly could in

// Internal pointer to the current implementation.

// Internet Explorer and Edge do not support colors.

// Interpolate

// Introduced in DOM Level 2:

// Introduced in DOM Level 3:

// Invalid chunk length

// Invented by us

// Invoke the function an extra time to help detect side-effects.

// Invokes the mount life-cycles on a previously never rendered instance.

// Invokes the update life-cycles and returns false if it shouldn't rerender.

// Involved people list

// Is firebug? http://stackoverflow.com/a/398120/376773

// Is firefox >= v31?

// Is webkit? http://stackoverflow.com/a/16459606/376773

// It also can turn \u0000 into \uFFFD inside attributes.

// It also neatly avoids a situation where render() returns null

// It has only been added in Fiber to match the (unintentional) behavior in Stack.

// It is handled by React separately and shouldn't be written to the DOM.

// It is important to unwind the context in the reverse order.

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// It is possible (and probable) that this case will never be reached for many

// It is possible for codecs to be specified on the audio media group playlist but

// It may be required if the current component is an error boundary,

// It returns false if the boundary is already hidden.

// It will get deleted.

// It's also safe to do for updates too, because current.child would only be null

// It's also worth noting that control codes, and _only_ control codes,

// It's important that ALL pending passive effect destroy functions are called

// It's not required to be first, but it's recommended to be. Almost all ISO base media files start with `ftyp` box.

// It's okay to replace the initial doubles with smis after initialization.

// It's possible that the underlying source was mutated between the when the last "change" event fired,

// It's possible that we caught an error due to a bad mapState function, but the

// It's safe to read if the store hasn't been mutated since the last time

// It's still possible that we'll need to rebase this update later,

// It's unlikely their type would change as usually you define them inline.

// Iterate through the list of updates to compute the result.

// Iterator interface in terms of a single ._invoke method.

// Iterator will provide entry [k,v] tuples rather than values.

// Its effect list is no longer valid.

// Its name will be periodically randomized to break any code that

// Its name will be periodically randomized to break any code that depends on

// J(5,4): Mode extension (Only used in Joint stereo)

// JPEG

// JPEG-2000 family

// JavaScript can max read 6 bytes integer

// Jump to ID3 header

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Just set it using the onclick property so that we don't have to manage any

// K(3): Copyright

// Keep a maximum of 6 GOPs in the cache

// Keep both the (mapped) and old keys if they differ, just as

// Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.

// Keep reading until EOF if the file size is unknown.

// Keep rendering in a loop for as long as render phase updates continue to

// Keep scanning and use the map to restore deleted items as moves.

// Keep the same volume as before

// Keep this check inline so it only runs on the false path:

// Keep this code in sync with handleError; any changes here must have

// Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

// Keep track of when *all* of the requests have completed

// KeyPress is deprecated, but its replacement is not yet final and not

// Keyboard Events

// Kill reference to this player

// Kind of like an array of portions of the video that have been downloaded.

// Known attributes should match the casing specified in the property config.

// L(2): Original

// Label is an override for the [track] off label

// Last round.

// Layout effects have the same constraint.

// Lazy component props can't be validated in createElement

// Lazy may contain any component type so we recursively resolve it.

// Learn more about this here:

// Left and Down Arrows

// Left shift by 2

// Legacy Interface

// Legacy hook: remove it

// Length of assigned value in bytes

// Let componentDidMount fire to initialize the collected state

// Let components know the poster has changed

// Let the ARIA attribute hook validate ARIA attributes

// Let the consumer know we have finished flushing the entire pipeline

// Let's get the fiber associated with the SuspenseComponent

// Let's try everything again

// Lets us know when the VTTCue's data has changed in such a way that we need

// List of events that need to be individually attached to media elements.

// List of playlists for the current group ID that have a matching uri with

// List of playlists that have an AUDIO attribute value matching the current

// Listen for keyboard navigation

// Listen to all HTML5-defined events and trigger them on the player

// Listen to loadstart because the player duration is reset when a new media element is loaded,

// Listener(s) to notify when interactions begin and end.

// Live Region Attributes

// LiveTracker does not need an element

// Load entry module

// Load plugins

// Local file header signature

// Look for a pair of start and end sync bytes in the data..

// Look for the start of an ADTS header..

// Look if the tech found a higher resolution poster while loading

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Loop through each playback technology in the options order

// Loop through playback technologies (HTML5, Flash) and check for support.

// Loop through the updates and clone them.

// M(3): The original bit indicates, if it is set, that the frame is located on its original media.

// MEDIA_ERR_NETWORK

// MPEG 1 or 2 Layer 3 header

// MPEG program stream (PS or MPEG-PS)

// MPEG-4 and AAC Audio Types

// MPEG-PS, MPEG-2 Part 1

// MS Office, OpenOffice and LibreOffice may put the parts in different order, so the check should not rely on it.

// Main loader should wait for the audio loader if audio is not pending a timeline

// Make `instanceof Error` still work for returned errors.

// Make a copy of prototype.options_ to protect against overriding defaults

// Make player easily findable by ID

// Make player findable on elements

// Make sure all player-specific document listeners are unbound. This is

// Make sure element exists

// Make sure such renderers get scheduled for later work.

// Make sure tag ID exists

// Make sure that vttjs has loaded, otherwise, wait till it finished loading

// Make sure the contentEl is defined AFTER any children are initialized

// Make sure the function has a unique ID

// Make sure the touch was less than the threshold to be considered a tap

// Make sure this player hasn't already been set up.

// Make sure to not insert the original video element if using Html5

// Make sure to remove all the previous listeners in case we are called multiple times.

// Make sure we track the playlist that we last used for the init segment, so that

// Make sure we're on the second pass, i.e. the primary child fragment was

// Make this an evented object and use `el_` as its event bus.

// Make this an evented object and use `el_`, if available, as its event bus

// Make this object evented, but remove the added `trigger` method so we

// Manages the tracking and generation of sync-points, mappings

// Manually shift all values starting at the index back to the

// Manually track progress in cases where the browser/flash player doesn't report it.

// Manually track timeupdates in cases where the browser/flash player doesn't report it.

// Map each cue group's endTime to the next group's startTime

// Map each cue's endTime the next group's startTime

// Mark any Suspense boundaries with fallbacks as having work to do.

// Mark anything that was blocked on this as no longer blocked

// Mark each child as hydrating. This is a fast path to know whether this

// Mark that the fiber performed work, but only if the new state is

// Mark that the root has a pending update.

// Mark the current commit time to be shared by all Profilers in this

// Mark the current render as suspended so that we switch to working on

// Mark the parent fiber as incomplete and clear its effect list.

// Mark the updated lanes on the list, too.

// Mark them as completed.

// Mark this subtree context as having at least one invisible parent that could

// Match production behavior more closely:

// Match! Schedule an update on this fiber.

// Math.pow(2, 30) - 1

// Matroska segments

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.

// Maximum request length on read-stream operation

// May also be .mpg, .m2p, .vob or .sub

// May also be .ps, .mpeg

// May be 0 to imply the value is not known.

// May be turned back on by HTML5 tech if nativeControlsForTouch is true

// Maybe the source changed in a way that the old subscription ignored but the new one depends on.

// Meaning that newly traced interactions are appended to the previously active set.

// Media Information Atom

// Media Segment that appears after it in the Playlist until the next EXT-X-MAP tag

// Media Source actions require both source buffers, so if the media source action

// Media atom

// Media header atom

// Media source queue entries don't need to consider whether the source updater is

// MediaLoader has no element

// MediaSource duration starts as NaN

// Memo may contain any component type so we recursively resolve it.

// Memoize state using the values we just used to render.

// Memoize the check that determines which context instance we should use.

// Memoize using the boundary fiber to prevent redundant listeners.

// Memoize using the thread ID to prevent redundant listeners.

// MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)

// MenuItem is selectable

// Merge parent and own context.

// Merge the partial state and the previous state.

// Merge the pending queue and the base queue.

// Merges additional math functionality into the defaults.

// Meta Seek Information

// Meta-data block

// Metadata Atom, ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW8

// Microdata

// Microsoft

// Microsoft Edge browser sends "undefined" when send is called with undefined value.

// Might think we should do this after embedding in container so .vjs-tech class

// Mobile Safari does not fire properly bubble click events on

// Mode Implementations

// Mode, SuspenseList can also trigger this scenario, but this is a legacy-

// Modern event system doesn't use pooling.

// Modified in DOM Level 2:

// Modify options for parent MenuItem class's init.

// Most children are components, but the video tech is an HTML element

// Mount

// MouseTimeDisplay tooltips should not be added to a player on mobile devices

// Move a StyleBox to its specified, or next best, position. The containerBox

// Move based on index

// Move position to the next header if found, skip the whole buffer otherwise

// Move the box along a particular axis. Optionally pass in an amount to move

// Move the box to the specified position. This may not be its best

// Move the cue div to it's correct line position.

// Moved outside to ensure DCE works with this flag

// Moving from `node` to its first child `next`.

// Moving from `node` to its next sibling `next`.

// Moving to a node from outside the window.

// Mozilla

// Multiple actions are dispatched here, which is why this doesn't return an action

// Musepack, SV7

// Musepack, SV8

// Music CD identifier

// Musician credits list

// Must be (ADTS) MPEG-4

// Must not discard the (non-)printable Enter-key.

// Must use `global` or `self` instead of `window` to work in both frames and web

// Mutation mode

// MutationObservers are desirable because they have high priority and work

// MutationObservers, so we don't need to fall back in that case.

// NB: In an Electron preload script, document will be defined but not fully

// NOTE - Fallback to bandwidth sort as appropriate in cases where multiple renditions

// NOTE: Intentionally unsound cast. All that matters is that it's a number

// NOTE: This only applies to SimpleMemoComponent, not MemoComponent,

// NOTE: This should be removed when proper caption positioning is

// NOTE: We cannot mutate the deferred array itself as all clones

// NOTE: if Decorated is a Function Component, decoratedRef will not be populated unless it's a refforwarding component.

// NOTE: packet.type is the CEA608 field

// NOTE: this is only used for the alt/video.novtt.js build

// NOTE: this.cache_.lastPlaybackRate is set from the tech handler

// Native Symbol.

// Native browser on some Samsung devices throws for transferables, let's detect it

// Necessary since the default button type is "submit"

// Need to be before the `zip` check

// Need to check if the tree still needs to be deferred. This is

// Need to restore state now that no activity is happening

// Needed because Blocks store data on type.

// Needed in the case where multiple objects might share the same prototype

// Needs a placement effect because the parent (the Suspense boundary) already

// Needs to be before `ogg` check

// Neither alternate was updated, which means the rest of the

// Neither child is smaller. Exit.

// NetworkState is set synchronously BUT loadstart is fired at the

// Never force flush in production. This function should get stripped out.

// Never forget.

// New behavior only for users of `prop-types` package

// New page

// New rows can't be content rows.

// Next replay any continuous events.

// Next up, normalize to an array, so one or many items can be normalized,

// Next we find the first one that isn't the same which should be the

// Next we need to figure out if the node that skipped past is

// Next we'll drill down this component to find the first HostComponent/Text.

// Next we're going to render the tail.

// Next we're simply going to delete all insertions after the

// No DevTools

// No PlaylistLoader is required for Closed-Captions because the captions are

// No UTCTiming element found in the mpd. Use Date header from mpd request as the

// No boundary was found. Fallthrough to error mode.

// No change

// No change. Bailout early if children are the same.

// No child. Traverse to next sibling.

// No effects.

// No implementation differences.

// No more siblings. Traverse up.

// No need to perform any operation.

// No need to subscribe a static component to theme changes, it won't change anything

// No px so using % or no style was set, so falling back to offsetWidth/height

// No special behavior since these rules fall back to "in body" mode for

// No videos were found, so keep looping unless page is finished loading.

// No-flex/table-cell mode requires there be some content

// Node Types

// Non-destructive resync

// Non-standard

// Noop.

// Normalise player option languages to lowercase

// Normalize SVG <use> element events #4963

// Normalize inconsistent values reported by browsers due to

// Normalizes the event properties.

// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`

// Normally portals handle their own events all the way down to the root.

// Normally the dispatch function for a state hook never changes,

// Normally we'd only need to check one of the fibers because if it

// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug

// Not AIFF format

// Not RIFF format

// Not currently showing content. Consult the Suspense context.

// Not setting a value, so getting it

// Not sure about the optimal order of these conditions:

// Note also that the overrideCheck property is set to true. This is because

// Note that simple async functions are implemented on top of

// Note that the "rows" will be workInProgress, but any nested children

// Note that the call to setup is asynchronous, as other sections of VHS may assume

// Note that the start time returned by the probe reflects the baseMediaDecodeTime, as

// Note that the state isn't changed from loading to appending. This is because abort

// Note that this only happens when part of the tree is rendered

// Note that this will happen even if batchedUpdates is higher up

// Note that this would throw on non-element objects.

// Note that we apply entanglements *after* checking for partial work above.

// Note that we can't detect if JAWS is being used, but this ARIA attribute

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// Note the use of `==` which checks for null or undefined.

// Note: A seek forwards or back that is greater than the RO_THRESH (2^32, ~13 hours) will

// Note: At a later stage we can optimize this function as right now a hsl

// Note: During these life-cycles, instance.props/instance.state are what

// Note: It doesn't matter whether the component that suspended was

// Note: Memo only checks outer props here.

// Note: The following is done to avoid a v8 performance cliff.

// Note: These happen to have identical begin phases, for now. We shouldn't hold

// Note: This currently assumes there are no passive effects on the root fiber

// Note: We currently do not parse the sample table as well

// Note: We don't actually use flexBasis (or flexOrder), but it's one of the more

// Note: We don't reset the actualTime counts. It's useful to accumulate

// Note: ["return"] must be used for ES3 parsing compatibility.

// Note: `option.selected` is not updated if `select.multiple` is

// Note: if you create something draggable, be sure to

// Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.

// Note: memo() and forwardRef() we'll compare outer rather than inner type.

// Note: there is a special case that prevents it from being written to the DOM

// Note: these two variables *must* always be updated together.

// Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

// Note: we cannot null out sibling here, otherwise it can cause issues

// Nothing

// Nothing changed.

// Nothing has actually changed. This can happen because track change events can fire

// Nothing to do for these component types

// Nothing to do here. This is terminal. We'll do the completion step

// Nothing to hydrate. Make it an insertion.

// Noticeable Difference.

// Notify subscribers that it's completed.

// Now find the sync-point that is closest to the currentTime because

// Now flush the immediate queue.

// Now push the new context and mark that it has changed.

// Now that a timescale and trackId is set, parse cached segments

// Now that all that's done, we can finally try to actually render the child component.

// Now that the end of the segment has been reached, we can set the end time. It's

// Now that the timestamp offset should be set, we can append any waiting ID3 tags.

// Now that we know this function doesn't throw, replace it.

// Now that we've validated casing, do not validate

// Now we need to find it's corresponding host fiber in the other

// Now we need to remove `args[index]` since it's inlined in the `format`

// Null out the callback to indicate the task has been canceled. (Can't

// Number of Tracks per output segment

// Numbers

// OK, the next part is confusing. We're about to reconcile the Suspense

// OR by the two LSBs

// Object.observe() (also not present on iOS7), it's not

// Observe all updates.

// Offscreen doesn't have the first render pass).

// Offset calculated as follows:

// Ogg/Opus

// Ogg/Speex

// Ogg/Theora

// Ogg/Vorbis

// Old behavior for people using React.PropTypes

// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support

// On android seekableEnd can be Infinity sometimes,

// On some platforms, in particular some releases of Android 4.x,

// On the first segment we trim AAC frames that exist before the

// On the iPhone video will break if you move the element,

// On the selectionchange event, the target is just document which isn't

// On-demand load.

// Once a flush has been requested, no further calls to `requestFlush` are

// Once the distance begins to increase, or if distance is 0, we have passed

// Once the distance begins to increase, we have passed

// Once the update queue is empty, persist the derived state onto the

// One case that can be ignored for now is audio only with alt audio,

// Only APEv2 tag has tag item headers

// Only IE requires us to explicitly say

// Only accept the first assignment to any key.

// Only attempt to create the source buffer if none already exist.

// Only bother fetching default value if we're going to use it

// Only called if handling partial data

// Only consider GOPS that start before the nal unit and end within

// Only consider aborting early if the estimated time to finish the download

// Only create an element when ResizeObserver isn't available

// Only decrement the outstanding interaction counts once.

// Only decrement the pending interaction count if we're done.

// Only emit `done` if all tracks have been flushed and emitted

// Only fire when selection has actually changed.

// Only keep unique values

// Only log here if componentDidCatch is the only error boundary method defined

// Only monitor this failure once because there tends to be a lot of the

// Only parse video data for the chosen video track

// Only pass fullscreen options to requestFullscreen in spec-compliant browsers.

// Only proceed if we have not handled it already.

// Only remove a class if there is a current breakpoint.

// Only reset the updates from the queue if it has a clone. If it does

// Only set node.value if textContent is equal to the expected

// Only specific source buffer actions must wait for async updateend events. Media

// Only the main loader needs to listen for pending timeline changes, as the main

// Only trigger "statechange" if there were changes AND we have a trigger

// Only true when this component is being hot reloaded.

// Only updates at user-blocking priority or greater are considered

// Only upgrade once. This works even inside the render phase because

// Only warn for user-defined components, not internal ones like Suspense.

// Optionally adjust the time so the first segment starts at zero.

// Options for this object are defined below.

// Or it may be because it's older React where they're the same thing.

// Organize the raw nal-units into arrays that represent

// Original props are copied

// Original tag settings stored in options

// Otherwise B has to be current branch.

// Otherwise effects in sibling components might interfere with each other.

// Otherwise just ignore the end tag.

// Otherwise reset hydration state in case we aborted and resumed another

// Otherwise, deliver the complete AAC frame

// Otherwise, discard it

// Otherwise, everything is ready just continue

// Otherwise, put this component's subscription instance into context, so that

// Otherwise, return to the parent

// Otherwise, the value attribute is synchronized to the property,

// Otherwise, there's nothing to wait for, since audio would be muxed into the main

// Otherwise, we'll wait until after the passive effects are flushed.

// Otherwise, we're going to have to hide content so we should

// Our goal should be to get the custom controls on mobile solid everywhere

// Our heuristic for that is whenever we enter a concurrent work loop.

// Our re-subscribe logic only runs when the store/subscription setup changes

// Overrides the flags for the first sample only. The order of

// Overwrite the plugin function so that we can correctly cleanup before

// PCM-data

// PES header

// PES packet fragments

// PES packets may be annotated with a PTS value, or a PTS value

// PES packets until one has been parsed

// PMTs can be sent ahead of the time when they should actually

// PNG

// PROGRAM-DATE-TIME is a media-segment tag, but for backwards

// PSI packets may be split into multiple sections and those

// PTS and DTS are normally stored as a 33-bit number.  Javascript

// PTS/DTS may not be available. Simply *not* setting

// Padding

// Pair up each traf with a mdat as moofs and mdats are in pairs

// Parse  Vorbis common header

// Parse Opus ID Header

// Parse atom header

// Parse block data

// Parse common header of the ASF Object (3.1)

// Parse content into a document fragment.

// Parse data part of the ASF Object

// Parse options JSON

// Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will

// Parse payload size

// Parse payload type

// Parse the HTML and read it back to normalize the HTML string so that it

// Parser could not be determined on MIME-type or extension

// Parser found, execute parser

// ParsingError metadata for acceptable ParsingErrors.

// Partial state object

// Partially-apply the enableFunction to create a playlist-

// Pass in the width/height/aspectRatio options which will update the style el

// Pass keydown handling up for unsupported keys

// Pass keydown handling up for unused keys

// Pass keypress handling up for unsupported keys

// Pass the vertical option down to the VolumeBar if

// Passing ["+x", "-x"] will move the box first along the x axis in the positive

// Pattern for numbers

// Pause and remove current playback technology

// Per spec (5.3.9.2.1) no way to determine segment duration OR

// Perform work until Scheduler asks us to yield

// Periods after first

// Placement

// Playback rate API is implemented in Android Chrome, but doesn't do anything

// Playback stalls should not be detected right after seeking.

// Player hotkeys.

// Playlist has stopped updating and we're stuck at its end. Try to

// PlaylistLoader should be used.

// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'

// Pop a row.

// Pop provider fiber

// Pop-on Mode

// Popularimeter

// Portal will bubble through to us.

// Portals are special because we don't append the children during mount

// Post process metadata

// Postfix always has precedence over any operator that follows after it

// Prefix to avoid chaos with special keys.

// Prepend any data in the buffer to the input data so that we can parse

// Prevent bailout if the implementation changed due to hot reload.

// Prevent clicks from bubbling up. Needed for Menu Buttons,

// Prevent default "drop and blow away the whole document" action.

// Prevent leaking memory for long chains of recursive calls to `asap`.

// Prevent re-entrancy.

// Prevent redundant selected() calls because they may cause

// Previously we only returned data on data events,

// Previously, we changed the timestampOffset if the start of this segment was less than

// Primary timing goes by video, and audio is trimmed in the transmuxer, meaning that

// Primitive types

// Priority is insufficient. Skip this update. If this is the first

// Probably in the "in body" parsing mode, so we outlaw only tag combos

// Proceed only if the touchmove/leave/cancel event didn't happen

// Proceed under the assumption that this is a class instance

// Proceed under the assumption that this is a function component

// Process line as start of a cue.

// Process this update.

// Promote the fiber to a class and try rendering again.

// Prop type validation may throw. In case they do, we don't want to

// Propagate any mapState/mapDispatch errors upwards

// Props should take precedence over ThemeProvider, which should take precedence over

// Protect against breakage in non-browser environments and check global autoSetup option.

// Protect against re-entrancy.

// Protect against the case where the inactivityTimeout can trigger just

// Provide explicit error message when production+profiling bundle of e.g.

// Proxy assignment of some properties to the master playlist

// Pull data from the store after first render in case the store has

// Push context providers early to prevent context stack mismatches.

// Push current root instance onto the stack;

// Push onto existing queue. Don't need to schedule a callback because

// Push the final frame

// Push this callback into an internal queue. We'll flush these either in

// Put another way, there is no way to have a video-only multiple-audio HLS!

// Put read data back to peek buffer

// QLCM, QCP file

// Queue the event to be replayed later. Abort dispatching since we

// RFC 2616, Clause 14.35.1

// RFC 4337

// RFC 5574

// RFC 6716

// RFC 7845

// RIFF file format which might be AVI, WAV, QCP, etc

// Rather than returning an object with a next method, we keep

// RawTasks are recycled to reduce GC churn.

// Re-create this selector whenever the store changes.

// Re-emit any data coming from the coalesce stream to the outside world

// Re-enables event dispatching.

// Re-inject the re-filled content element.

// React DevTools reads this flag.

// React Refresh

// React currently throws a warning when using useLayoutEffect on the server.

// React nodes in the future. We need to check this first because

// React v16.11 and below

// React v16.12 and above

// React$ElementType

// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,

// ReactFiberContext usually updates this cache but can't for newly-created instances.

// Read block header

// Read sum in header

// Read the input stream and detect the filetype

// Read this again, since an effect might have updated it

// Rearrange xs and ys so that xs is sorted

// Rec. ITU-T H.264, Annex B

// Received a ping at the same priority level at which we're currently

// Receiving a mouse event in the middle of a dragging operation

// Record a pending mutable source update with the same expiration time.

// Record start time so we can detect a tap vs. "touch and hold"

// Record the change if the value is different from what's in the

// Record the characters to be added to the DOM.

// Record the component responsible for creating this element.

// Record the render duration for the fiber that errored.

// Record the time spent rendering before an error was thrown. This

// Recursively delete all host nodes from the parent.

// Ref: https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35

// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416

// Refs should update even if shouldComponentUpdate returns false

// Regardless of whether this script is executing as a CommonJS module

// Register pending interactions on the root to avoid losing traced interaction data.

// Register the native source handler

// Register the region.

// Regular boundaries always capture.

// Reject Gops that would require a negative baseMediaDecodeTime

// Reject Gops with different SPS or PPS

// Relationship Attributes

// Relies on `updateStylesByID` not mutating `styleUpdates`.

// Remaining cases are all treated as empty.

// Remaining properties are added to a new props object

// Remaining timers are pending.

// Remember the VTTRegion for later in case we parse any VTTCues that

// Remember the computed div so that we don't have to recompute it later

// Remember the original input if we need to throw an error.

// Remember the parent context so we can merge with it later.

// Removal of these path segments is performed iteratively,

// Remove (native) tracks that are not used anymore

// Remove all previous children.

// Remove any effects that were appended after this point.

// Remove any overlapping cue

// Remove element from DOM

// Remove fullscreen styles

// Remove nextEffect pointer to assist GC

// Remove once that deprecated behavior is removed.

// Remove our event listeners

// Remove the addEventListener alias before calling Events.on

// Remove the addEventListener aliasing Events.on

// Remove the dispose listener on this evented object, which was given

// Remove the events object if there are no types left

// Remove the events of a particular type if there are none left

// Remove the finished frame from the buffer and start the process again

// Remove the first GOP

// Remove the meta-handler from the element

// Remove this position index

// Remove those targetIds that don't match the targetType.  This

// Remove time stamp from input.

// Remove width/height attrs from tag so CSS can make it 100% width/height

// Removes undefined fields for cleaner css object.

// Renderers may schedule work to be done after host components are mounted

// Rendering at offscreen, so we can clear the base lanes.

// Replace the child/sibling pointers above it.

// Replace the dot at the beginning of the passed extension if one exists

// Replace the old (or empty) context with the new one.

// Replaygain

// Represents the co-ordinates of an Element in a way that we can easily

// Represents whether effect should fire.

// Requested time is before stream start.

// Require an opening parenthesis

// Requires a buffer size of 512 bytes

// Requires options['kind']

// Rerender

// Rerender the whole list, but this time, we'll force fallbacks

// Reserved names are extracted

// Reset Ready Queue

// Reset a workInProgress child set to prepare it for a second pass.

// Reset couldBeTap tracking

// Reset effect durations for the next eventual effect phase.

// Reset module-level state that was set during the render phase.

// Reset page segments

// Reset regular expression object

// Reset stored captions since we added parsed

// Reset stream state

// Reset the activity tracker

// Reset the base row to the bottom row when switching modes

// Reset the box position to the specified position.

// Reset the child fibers to their original state.

// Reset the durations from the first pass so they aren't included in the

// Reset the effect list before doing the second pass since that's now invalid.

// Reset the effect list to what it was before we rendered this

// Reset the effect tag but keep any Placement tags, since that's something

// Reset the effect tag.

// Reset the memoizedState to what it was before we attempted

// Reset the profiler timer.

// Reset the text content of the parent before doing any insertions

// Reset the work-in-progress list

// Reset this to null before calling lifecycles

// Reset to createFiber's initial values.

// Reset to the "together" mode in case we've started a different

// Reset to the cloned values that createWorkInProgress would've.

// Resets the replaying for this type of continuous event to no event.

// Resetting context._sent for legacy support of Babel's

// Resize the box, controller, and poster to original sizes

// Resolve default props

// Resolve default props. Taken from ReactElement

// Resolve parser based on MIME-type or file extension

// Resolved (SimpleMemoComponent has no defaultProps)

// Resolved for outer only

// Resolved props

// Restart from the root.

// Restart work from the new fiber.

// Restarting too aggressively is also not good because it starves out any

// Restore the context.

// Restore the original properties of the fiber.

// Resume execution at the desired location (see delegateYield).

// Resume flushing in the next tick

// Resuse an existing track with a CC# id because this was

// Retain init segment information

// Retain source duration from initial master manifest parsing

// Retaining it forever may interfere with GC.

// Rethrow this error instead of the original one.

// Retry if any event replaying was blocked on this.

// RetryLane even if it's the one currently rendering since we're leaving

// Return DocType

// Return NaN if playback has not started and trigger a durationupdate once

// Return an iterator with no values.

// Return because we haven't received a flush from a data-generating

// Return early if no video data has been observed

// Return early so that the menu isn't focused

// Return so it can stored on parent object if desired.

// Return the exports of the module

// Return the line we found.

// Return the value for a key, or a default value.

// Return to the normal work loop.

// Return until we have enough tracks from the pipeline to remux (if we

// Return whether there's additional work

// Returns a string that is postfixed to a warning about an invalid type.

// Returns class name of the object, if any.

// Returns fixed-up instance

// Returns the SuspenseInstance if this node is a direct child of a

// Returns whether passive effects were flushed.

// Reuse previous dependencies

// Revert the select back to its default unselected state.

// Right now, the currentTime is not _really_ cached because it is always

// Roll-up Mode

// Root element: EBML

// Rough & quick check Pickle/ASAR

// Run Auto-load players

// Run base component initializing with new options

// Run beginWork again.

// Run these checks in production only if the flag is off.

// Run through the CaptionParser in case there are captions.

// Runs the processing model over the cues and regions passed to it.

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// SUSPENSE_x_START_DATA. Otherwise, null.

// SVG

// SVG-related properties

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.3 warns you if you try to copy deprecated layerX/Y

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Safari may fire events on text nodes (Node.TEXT_NODE is 3).

// Safari still uses the old middle value and won't accept center

// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:

// Safe because if current fiber exists, we are reconciling,

// Same as above

// Same with creating the element

// SameValue algorithm

// Sample description size

// Sample rate in Hz. Though 20 bits are available,

// SampleEntry, ISO/IEC 14496-12

// Satisfies linter.

// Save references to the new child props.  Note that we track the "child props from store update"

// Save some state so that in the future anything waiting on first append (and/or

// Save the current text tracks so that we can reuse the same text tracks with the next tech

// Schedule a Ref effect

// Schedule a callback to attempt replaying as many events as are

// Schedule a discrete update but only if it's not Sync.

// Schedule a force update on the work-in-progress.

// Schedule a host callback, if needed. If we're already performing work,

// Schedule a new callback.

// Schedule a placeholder to display after a short delay, using the Just

// Schedule a timeout.

// Schedule an effect to clear this container at the start of the next commit.

// Schedule other updates after in case the callback is sync.

// Schedule the nearest Suspense to re-render the timed out view.

// Schedule this fiber to re-render at offscreen priority. Then bailout.

// Search for APE footer header at the end of the file

// Search for a candidate Gop for gop-fusion from the gop cache and

// Search for a gop for fusion from our gopCache

// Search for future discontinuities that we can provide better timing

// Search for header should be in first 1KB of file.

// Search for ranges that match the predicate

// Search for the GOP nearest to the beginning of this nal unit

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// Search parent A's child set

// Search parent B's child set

// Second is hydration. During hydration, the Suspense fiber has a slightly

// Second pass: Create new passive effects.

// Secondary renderers store their context values on separate fields.

// See #2176

// See ParsingError.Errors below for acceptable errors.

// See `createPrimitiveTypeChecker`.

// See `requestUpdateLane` for explanation of `currentEventWipLanes`

// See discussion in https://github.com/facebook/react/pull/10676.

// See discussion in https://github.com/facebook/react/pull/6896

// See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.

// See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.

// See https://github.com/FreedomScientific/VFO-standards-support/issues/78

// See https://github.com/facebook/react/issues/11807

// See https://github.com/facebook/react/issues/12995

// See https://github.com/facebook/react/issues/13222

// See https://github.com/facebook/react/pull/19216.

// See https://github.com/facebook/regenerator/issues/274 for more details.

// See https://github.com/naugtur/xhr/issues/100.

// See https://github.com/videojs/video.js/issues/2772

// See rules for 'li', 'dd', 'dt' start tags in

// See the discussion in https://github.com/facebook/react/pull/11157.

// See:

// Seek Table

// Seek Table Offset

// Seems redundant, but it changes the type from a single lane (used for

// Seems to be broken in Chromium/Chrome && Safari in Leopard

// Segment Information

// Segment loader knows more about segment timing than the transmuxer (in certain

// Segment loader will be started after `loadedmetadata` or `loadedplaylist` from the

// SegmentLoader requires a MediaSource be specified or it will throw an error;

// SegmentURLs for).

// Select a new playlist

// Send the typed-array of data as an ArrayBuffer so that

// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.

// Session to Application

// Set ARIA label and region role depending on player type

// Set Options

// Set `diff` timestamp

// Set `workInProgress` to null. This represents advancing to the next

// Set a horizontal or vertical class on the slider depending on the slider type

// Set controls

// Set focus back to the menu button's button

// Set isAudio based on whether or not an audio tag was used

// Set lang attr on player to ensure CSS :lang() in consistent with player

// Set name through options

// Set new time (tell player to seek to new time)

// Set of currently traced interactions.

// Set or create the eventBusEl_.

// Set poster

// Set property names to bar to match with the child Slider class is looking for

// Set the class list (as a list of classes, separated by space).

// Set the dispatcher in DEV because this might be call in the render function

// Set the new bar width or height

// Set the remaining expiration time to be whatever is remaining in the queue.

// Set the return pointer of the child to the work-in-progress fiber.

// Set the return pointer of the sibling to the work-in-progress fiber.

// Set the source if one is provided

// Set title attribute if only an icon is shown

// Set to zero if null or literally NaN (NaN !== NaN)

// Set up output stream

// Set up phony URIs for the media group playlists since playlists are referenced by

// Set up phony URIs for the playlists since playlists are referenced by their URIs

// Set up refs to coordinate values between the subscription effect and the render logic

// Set up the Suspense Context to force suspense and immediately

// Set up the final part of the audio pipeline

// Set up the final part of the video pipeline

// Setting a size greater than 1 causes a select to behave like `multiple=true`, where

// Setting context._sent for legacy support of Babel's

// Setting src through `src` instead of `setSrc` will be deprecated

// Setting to null was causing an error with data.handlers

// Setting userActivity=true now and setting the interval to the same time

// Shallow cloning props works as a workaround for now to bypass the bailout check.

// Shift down to normal priority

// Shorthands for all valid HTML Elements

// Should always be set

// Should be handled by findRetryLane instead

// Should be handled by findTransitionLane instead

// Should be tested. Also something has to read the actual current time or the cache will

// Should probably be moved to an external track loader when we support

// Should this check be gated by parent namespace? Not sure we want to

// Shouldn't need to use inProgress interval because of key repeat

// Show user-specified drop effect.

// Silently steal the ref from the parent.

// SimpleMemoComponent codepath doesn't resolve outer props either.

// Since PSSH values are interpreted as initData, EME will dedupe any duplicates. The

// Since a manifest object was passed in as the source (instead of a URL), the first

// Since nothing actually suspended, there will nothing to ping this

// Since nothing actually suspended, there will nothing to ping this to

// Since primary timing goes by video, only the audio loader potentially needs to wait

// Since source updater could call back synchronously, do the increments first.

// Since the audio loader will wait for the main loader to load the first segment,

// Since the cues will span for at least the segment duration, adding a fudge

// Since the main loader is responsible for setting the timestamp offset for both

// Since the old fiber is disconnected, we have to schedule it manually.

// Since the segment.start value is determined from the buffered end or ending time

// Since the transmuxer is using the actual timing values, but the buffer is

// Since the very first frame is expected to be an keyframe

// Since the very first nal unit is expected to be an AUD

// Since these are SVG attributes, their attribute names are case-sensitive.

// Since this is a VOD video, it is safe to rely on the media source's duration (if

// Since this is conceptually a new fiber, schedule a Placement effect

// Since this is not a typical seek, we avoid the seekTo method which can cause segments

// Since this wasn't the direct target of the event, we might have

// Since we already found a match, we can stop traversing the

// Since we don't keep a stack of them, we will search for it.

// Since we know we're in a React event, we can clear the current

// Since we yield every frame regardless, `requestPaint` has no effect.

// Since we're mapping we should get rid of any blank segments (in case

// Since we're not hidden anymore, reset the state

// Since we're on the final non-blacklisted playlist, and we're about to blacklist

// Since we're restarting, remove anything that is not a host effect

// Size

// Size of padding

// Skip ID3 header until the header size

// Skip both NoWork and PerformedWork tags when creating the effect

// Skip componentresize listeners on width for optimization

// Skip key warning if the type isn't valid since our key validation logic

// Skip non-hydratable nodes.

// Skip past all nodes within this suspense boundary.

// Skip portals because commitUnmount() currently visits them recursively.

// Skip the primary children, and continue working on the

// Skip this byte

// Skip this if we're not updating due to sCU.

// Skipping one frame that we assume is the frame that calls the two.

// Slicing the arguments on every invocation of this method

// So at this point we know loadstart may have already fired or is

// So if there are interleaved updates, they get pushed to the older queue.

// So we can clear these now to allow a new callback to be scheduled.

// So we can't tell if the event name is correct for sure, but we can filter

// So we have to create a brand new element.

// So we preemptively throw with a better message instead.

// So we push an empty value first. This lets us safely unwind on errors.

// So we should be able to stop now. However, we don't know if this portal

// So we want to continue to update that they are active

// So we'll skip the misleading extra mismatch warning in this case.

// So we'll throw out the current work and restart.

// So, display the preferredTrack before the first default track

// So, if we moved only a small distance, this could still be a tap

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do

// Some convenience functions

// Some devices will throw touchmoves for all but the slightest of taps.

// Some environments might not have setTimeout or clearTimeout.

// Some gops were trimmed. clear dts info so minSegmentDts and pts are correct

// Some live playlists may have a shorter window of content than the full allowed back

// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.

// Some of these attributes can be hard to find. This list was created by

// Something in the return path also threw.

// Something in this boundary's subtree already suspended. Switch to

// Something might get unblocked by state updates or retries in the

// Something should be setting the props in the constructor.

// Something suspended. Re-render with the fallback children.

// Something went really wrong, and our event was not dispatched.

// Sometimes the player can stall for unknown reasons within a contiguous buffered

// Sometimes, the same segment # will be downloaded twice. To stop the

// Sony DSD Stream File (DSF)

// Sort ascending by bitrate

// Sort by bandwidth DESC

// Sort startTimes by ascending order

// Sound Data Chunk

// Sound Sample Description (Version 0)

// Source actions process synchronously. Therefore, both audio and video source

// Source: http://jsfiddle.net/vWx8V/

// Source: https://github.com/garycourt/murmurhash-js/blob/master/murmurhash2_gc.js

// Space for nal unit size

// Spec says something about storing a list of markers, but it sounds

// Spec says to wipe memories when switching to roll-up

// Special case: Sync React callbacks are scheduled on a special

// Special case: There's nothing to work on.

// Special cases

// Specifically flag key frames for ease of use later

// Split on 'aud'-type nal units

// Stack implementation injected by the current renderer.

// Standardize on Infinity for signaling video is live

// Start at the top of the pipeline and flush all pending work

// Start listening for breakpoints and set the initial breakpoint if the

// Start over from the beginning of the list

// Start walking from end of segment to get last audio packet

// Start walking from end of segment to get last video packet

// Start walking from start of segment to get first audio packet

// Start walking from start of segment to get first video packet

// Stash the eagerly computed state, and the reducer used to compute

// Stash the promise on the boundary fiber. If the boundary times out, we'll

// State object

// Stategy "Discontinuity": We have a discontinuity with a known

// Stategy "Playlist": We have a playlist with a known mapping of

// Stategy "ProgramDateTime": We have a program-date-time tag in this playlist

// Stategy "Segment": We have a known time mapping for a timeline and a

// Stategy "VOD": Handle the VOD-case where the sync-point is *always*

// Step 7.  Otherwise, the embedded URL inherits the <net_loc>

// Still haven't timed out. Continue rendering the children, like we

// Stop event propagation to prevent double fire in progress-control.js

// Stop parsing after the third frame

// Stop the default browser action

// Stop the event from bubbling

// Stop the event from bubbling and executing other handlers

// Stop the interval that maintains activity if the mouse/touch is down

// Stop the mouse events from also happening

// Store control codes

// Store drag source node so we can check whether

// Store the current set of interactions on the FiberRoot for a few reasons:

// Store the original tag used to set options

// Store the tag attributes used to restore html5 element

// Store the unwrapped component in the type.

// Storing original doc overflow value to return to when fullscreen is off

// Stream End

// Stream Header

// Strictly speaking, seeing an <option> doesn't mean we're in a <select>

// String SVG attributes with the xlink namespace.

// String SVG attributes with the xml namespace.

// String.prototype.fromCharCode does not supports

// Submit/reset inputs need the attribute removed completely to avoid

// Support DevTools editable values for useState and useReducer.

// Support DevTools props for function components, forwardRef, memo, host components, etc.

// Support Space or Enter key operation to fire a click event. Also,

// Support for module components is deprecated and is removed behind a flag.

// Support may be a bit trickier than with full segment appends, as GOPs may be split

// Support old behavior of techs being registered as components.

// Support providing the `stateUpdates` state as a function.

// Suppress the error. It will throw again in the render phase.

// Suppress the first error message for no compatible source until

// Suspense Heuristics

// SuspenseInstance. I.e. if its previous sibling is a Comment with

// SuspenseList doesn't actually catch anything. It should've been

// SuspenseList so that it can retry if they resolve.

// Swallow

// Sync on Stream-Properties-Object (B7DC0791-A9B7-11CF-8EE6-00C00C205365)

// Sync the values needed by our subscription handler after each commit.

// Synchronously dispatch our fake event. If the user-provided function

// Synthesize the end of the current cue or region.

// THIS FILE IS AUTO GENERATED

// TIFF, big-endian type

// TIFF, little-endian type

// TODO (bvaughn) Replace this behavior with an invariant() in the future.

// TODO Clear this data once all pending hydration work is finished.

// TODO GOP alignment support

// TODO Ignore this error? Rethrow it?

// TODO Right now in the playlists array there are two references to each playlist, one

// TODO This is only a temporary bandaid for the old reconciler fork.

// TODO We're reading the store directly in render() here. Bad idea?

// TODO added for LHLS, make sure this is OK

// TODO handle error

// TODO handle special cases, e.g., muxed audio/video but only audio in the segment

// TODO improve muted icon classes

// TODO minor, but for partial segment downloads, this can be done earlier to save

// TODO possibly move gopBuffer and timeMapping info to a separate controller

// TODO should this move into this.checkForAbort to speed up requests post abort in

// TODO since the source buffer maintains a queue, and we shouldn't call this function

// TODO this check was added to maintain backwards compatibility (particularly with

// TODO verify this behavior

// TODO:

// TODO: Add more comments

// TODO: Because we don't have a work-in-progress, this will add the

// TODO: Better heuristic.

// TODO: Clean this up once we turn on the string ref warning for

// TODO: Consider calling `unwindWork` to pop the contexts.

// TODO: Consider not doing this for input and textarea.

// TODO: Consider removing this in future major version

// TODO: Consider unifying this with how the root works.

// TODO: Consider warning about bad polyfills

// TODO: Consider warning in this path if a fallback timer is not scheduled.

// TODO: Create a new event on the PlaylistLoader that signals

// TODO: Deactivate button on player emptied event.

// TODO: Defer siblings if we're not at the right index for this slot.

// TODO: Disabled elements should not respond to mouse events

// TODO: Distinguish by namespace here -- for <title>, including it here

// TODO: Does this work for all element types? What about MathML? Should we

// TODO: Don't need to accumulate this. Instead, we can remove

// TODO: Don't need to accumulate this. Instead, we can remove renderLanes

// TODO: Drop this when these are no longer allowed as the type argument.

// TODO: Ensure that an update gets scheduled if any of the special props

// TODO: Expiration heuristic is constant per lane, so could use a map.

// TODO: Figure out what we should do in Blocking mode.

// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.

// TODO: Find a more efficient way to do this.

// TODO: For the shouldClone case, this could be micro-optimized a bit by

// TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.

// TODO: Handle wasCustomComponentTag

// TODO: How to handle this type of discontinuity

// TODO: I found and added this missing line while investigating a

// TODO: I think this is now always non-null by the time it reaches the

// TODO: If deps are provided, should we skip comparing the ref itself?

// TODO: If key === null and child.key === null, then this only applies to

// TODO: If this is a HostRoot we might want to bail out.

// TODO: If this is the first discrete event in the queue. Schedule an increased

// TODO: If we're rendering sync either due to Sync, Batched or expired,

// TODO: If workInProgress.child is null, we can continue on the tail immediately.

// TODO: Is the JND optimization worth the added complexity? If this is

// TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s

// TODO: Lol maybe there's a better way to factor this besides this

// TODO: Make sure that we check isMounted before firing any of these events.

// TODO: Make sure this doesn't override pings that happen while we've

// TODO: Make sure we check if this is still unmounted or do any clean

// TODO: Make this check be performed again when the window switches between monitors

// TODO: Make this smarter. Toggle user state between touching/mousing

// TODO: Might be better if `flushPassiveEffects` did not automatically

// TODO: Move createInstance to beginWork and keep it on a context

// TODO: Move out of the loop. This only happens for the first run.

// TODO: Move the reset at in beginWork out of the common path so that

// TODO: Move this and createInstance step into the beginPhase

// TODO: Move this check out of the hot path by moving `resetChildLanes`

// TODO: Move this out of the hot path using a dedicated effect tag.

// TODO: Not sure if this is the desired semantics, but it's what we

// TODO: Once it's just Fiber we can move this to node._wrapperState

// TODO: Only do this for the relevant Safaris maybe?

// TODO: Only ignore them on controlled tags.

// TODO: Only schedule updates if these values are non equal, i.e. it changed.

// TODO: Pass `current` as argument

// TODO: Possibly defer this until the commit phase where all the events

// TODO: Previous comment: No longer appears to be used. Can probably be removed.

// TODO: Probably best to create a whitelist of event props

// TODO: Probably should inline this back

// TODO: Probably should refactor `beginWork` to split the bailout

// TODO: Remove support for `selected` in <option>.

// TODO: Remove this dependency on the Scheduler priority.

// TODO: Replace using timeout with a boolean indicating whether this playlist is

// TODO: Reset this somewhere else? Lol legacy mode is so weird.

// TODO: Restructure so we never read values from the instance.

// TODO: Scheduler no longer requires these methods to be polyfilled. But

// TODO: Should be able to flush inside batchedUpdates, but not inside `act`.

// TODO: Should not remove render lanes that were pinged during this render

// TODO: Should probably move the bulk of this function to commitWork.

// TODO: Should warn in effects and callbacks, too

// TODO: Should we use domElement.firstChild.nodeValue to compare?

// TODO: Special case idle priority?

// TODO: Split the update API as separate for the props vs. children.

// TODO: Temporary. We're removing the concept of discrete updates.

// TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.

// TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.

// TODO: The Profiler fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

// TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.

// TODO: Theoretically, any update to any lane can unblock any other lane. But

// TODO: These should not need a type.

// TODO: This assumes that we're about to evaluate the component and process

// TODO: This breaks on empty slots like null children. That's

// TODO: This cast may not be sound for SVG, MathML or custom elements.

// TODO: This function shares a lot of logic with attemptToDispatchEvent.

// TODO: This gets called every time we yield. We can optimize by storing

// TODO: This is related to `act`, not events. Move to separate key?

// TODO: This prevents the assignment of defaultValue to regular

// TODO: This should match all unicode type B characters (paragraph

// TODO: This will still suspend a synchronous tree if anything

// TODO: This wrapper is incorrect! It should only

// TODO: Type this specific to this type of component.

// TODO: Update to use `emptied` event instead. See #1277.

// TODO: Upgrade this definition once we're on a newer version of Flow that

// TODO: Use an effect tag.

// TODO: Use invariant so the message is stripped in prod?

// TODO: Use symbols?

// TODO: Warn if _enabled is false.

// TODO: Warn if there is more than a single textNode as a child.

// TODO: Warn in a future release.

// TODO: Warn in strict mode if getDerivedStateFromError is

// TODO: Warn, we didn't find the end comment boundary.

// TODO: Warn.

// TODO: We can probably just avoid popping it instead and only

// TODO: We could fast path by just rendering the tail now.

// TODO: We should also handle ts init segments here, but we

// TODO: We should probably always mark the root as suspended immediately

// TODO: We should use the HTTP Expires header to invalidate our cache per

// TODO: Why `default` not results `1` but `''`?

// TODO: Without `any` type, Flow says "Property cannot be accessed on any

// TODO: a string of 1of1 would fail to be converted

// TODO: add a more generic warning for invalid values.

// TODO: can we stop exporting these?

// TODO: consider adding dummy URIs in mpd-parser

// TODO: deprecated, controlsvisible does not seem to be fired

// TODO: do we need to reload the current playlist?

// TODO: figure out the API for cross-renderer implementation.

// TODO: findDOMNode doesn't rely on this any more but isMounted does

// TODO: handle display:none and no dimension style using px

// TODO: handle multiperiod where representation sets are not the same

// TODO: ideally, we'd eventually add all events from

// TODO: ideally, we'd eventually apply the same logic to all

// TODO: if it was but can no longer be simple,

// TODO: if we ever make a react-native version of this,

// TODO: is there an issue for this against chrome?

// TODO: log warning

// TODO: overwrite in-place instead of remove+create?

// TODO: pass ReactDOM portal implementation as third argument

// TODO: popHydrationState

// TODO: remove top-level side effect.

// TODO: replaying capture phase events is currently broken

// TODO: requestUpdateLanePriority also reads the priority. Pass the

// TODO: reset sidxMapping between period changes

// TODO: revisit this when we implement resuming.

// TODO: should this be done for metadata too? for now maintain behavior of

// TODO: should we exclude audio tracks rather than main tracks

// TODO: should we select a new playlist if this blacklist wasn't for the currentPlaylist?

// TODO: show a warning that we couldn't parse the codec

// TODO: this is special because it gets imported during build.

// TODO: this seems like it could cause a DEV-only throw for hydration

// TODO: throw or warn if we couldn't hydrate?

// TODO: we can support this by removing the

// TODO: we should remove the concept of a "SimpleEventPlugin".

// TODO: when using the muxer shouldn't we just return

// TODO: which is better?

// TODO: why is this nullable in the types but we read from it?

// TODO: wire options into createSourceConnector

// TS packet, and to specify some forms of timing and control data

// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context

// Tab or newline are defined as \r\n\t:

// Tag is either LegacyRoot or Concurrent Root

// Tag the fiber with an update effect. This turns a Placement into

// Tagging

// Tags

// Take output from multiple

// Taken from https://github.com/facebook/react/blob/b87aabdfe1b7461e7331abb3601d9e6bb27544bc/packages/react-dom/src/shared/dangerousStyleValue.js

// Targeting another evented object.

// Targeting this evented object.

// Tech is seeking or already waiting on another action, no action needed

// Tech is seeking or bad seek fixed, no action needed

// Tech that can be registered as a Component.

// Technically we are retrying a playlist, in that we are simply retrying a previous

// Technically we should be OK appending the init segment separately, however, we

// Technically, because the duration value is only an estimate, the time may still

// Technically, instead of waiting to load a segment on timeline changes, a segment

// Tell Scheduler to yield at the end of the frame, so the browser has an

// Temporarily disables event dispatching on the target as we have already executed the handler.

// Test Worker capabilities

// Test for A's keys different from B.

// Test if fixing up is needed

// Text nodes are leaf nodes.

// Text nodes don't have keys. If the previous node is implicitly keyed

// TextTrackMenuItem, but this will remain for backwards compatibility

// Thanks to ReactDOMFactories for this handy list!

// That happens in the completeWork phase without going back to beginWork.

// That indicates that we are waiting for suspense data.

// That is depending on if we want nested subtrees (layers) to bubble

// That would cause this tear check to throw again and eventually be visible to the user.

// That's probably okay; we don't support it just as we don't support

// The "shared" type is used in cases where a stream will contain muxed

// The ._invoke method unifies the implementations of the .next,

// The @duration attribute will be used to determin the playlist's targetDuration which

// The Browser also has localStorage in the global context.

// The ChangeEventPlugin registers a "propertychange" event for

// The Common Chunk

// The Movie Atom: contains other atoms

// The PTS and DTS values are based on the actual stream times from the segment,

// The Sample Table Atom

// The Suspense Context is split into two parts. The lower bits is

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol

// The Util Chunk, non-PCM Formats

// The VTT segment will have its own time mappings. Saving VTT segment timing info in

// The `start` method can be stored on a ref, since `setPending`

// The actual logic for this is spread out in different places.

// The actual meaning of the value depends on the users' keyboard layout

// The algorithm for assigning an update to a lane should be stable for all

// The alternative is to track the namespace in a few places which is convoluted.

// The aspect ratio is either used directly or to calculate width and height.

// The assumption is that this is usually faster.

// The attribute name is case-sensitive in SVG so we can't just use

// The base Tech class needs to be registered as a Component. It is the only

// The below logic attempts to work out if we need to change

// The best thing to do here is to get the kind of sync-point data by

// The boundary fiber (a Suspense component or SuspenseList component)

// The browsers will use the image intrinsic size under different conditions.

// The callback errored, but the error event never fired.

// The child props selector needs the store reference as an input.

// The close button should be a child of the modal - not its

// The commit phase is broken into several sub-phases. We do a separate pass

// The component might be the player itself and we can't pass `this` to super

// The context might have changed so we need to recalculate it.

// The context value changed. Search for matching consumers and schedule

// The context.catch method must only be called with a location

// The control is textual, not just an icon

// The correct way to remove a poster is to set as an empty string

// The current breakpoint did not change, nothing to do.

// The current composition is stored statically and must not be

// The current task was canceled. Exit. We don't need to call

// The current tree is not already showing a fallback.

// The current, flushed, state of this fiber is the alternate. Ideally

// The default reveal order is the same as not having

// The default skin has a gap on either side of the `SeekBar`. This means

// The delegate iterator is finished, so forget it and continue with

// The distance between the end of the gop and the start of the nalUnit

// The docx, xlsx and pptx file types extend the Office Open XML file format:

// The drag preview may either be attached via ref or connect function

// The drop target may either be attached via ref or connect function

// The effect list is no longer valid.

// The effect list of the backwards tail will have been added

// The enter-key is technically both printable and non-printable and can

// The error is recoverable and was silenced.

// The event occurred on this element

// The existing first child is not a text node so we need to create one

// The expected duration of the segment in seconds

// The fallback fiber was added as a deletion effect during the first pass.

// The final "%c" is somewhat tricky, because there could be other

// The final test is by tag name. These tags will be excluded entirely.

// The first and easiest test is for `contenteditable` elements.

// The first pass splits the children fibers into two sets. A head and tail.

// The first phase a "before mutation" phase. We use this phase to read the

// The first segment can and should be loaded immediately so that source buffers are

// The firstplay event relies on both the play and loadstart events

// The flush function processes all tasks that have been scheduled with

// The following attributes have these uses:

// The following is disabled because it does not pass videojs-standard

// The following operations are

// The following switch statement is only concerned about placement,

// The id is simply the ordinality of the media playlist

// The initial playlist was a master manifest, and the first media selected was

// The initial state of paused should be true (in Safari it's actually false)

// The inner type can have defaults too

// The instance needs access to the fiber so that it can schedule updates

// The last rebase update that is NOT part of the base state.

// The list is as followed

// The list is as followed:

// The list is as follows:

// The logic below for Context differs depending on PROD or DEV mode. In

// The main loader only listens on pending timeline changes, but the audio loader,

// The main loader only needs to wait for timeline changes if there's demuxed audio.

// The masterPlaylistLoader will be created with a string

// The maximum block size (in samples) used in the stream.

// The maximum frame size (in bytes) used in the stream.

// The message channel technique was discovered by Malte Ubl and was the

// The minimum block size (in samples) used in the stream.

// The minimum frame size (in bytes) used in the stream.

// The module cache

// The most significant bit of each byte is dropped and the

// The multiplier of STEP_SECONDS that PgUp/PgDown move the timeline.

// The new fiber is a work in progress, but if there exists a

// The next one that isn't the same should be our match though.

// The next phase is the layout phase, where we call effects that read

// The next phase is the mutation phase, where we mutate the host tree.

// The number of streams cannot change

// The old behavior was using the priority level of the Scheduler.

// The only potentially counter-intuitive thing here is the `instance` in

// The only remaining work is Idle.

// The options argument overrides options set in the video tag

// The other readyState events aren't as much of a problem if we double

// The parent is larger. Swap positions.

// The parent is smaller. Exit.

// The pending lanes were cleared at the beginning of beginWork. We're

// The pending queue is circular. Disconnect the pointer between first

// The plugin is replaced by a function that returns the current instance.

// The preferredTrack matches the user preference and takes

// The previous group had a playlist loader but the new active group does not

// The primary child fragment does not have pending work marked

// The primary children do not have pending work with sufficient

// The primary children have pending work. Use the normal path

// The priority changed. Cancel the existing callback. We'll schedule a new

// The priority hasn't changed. We can reuse the existing task. Exit.

// The probe doesn't provide the segment end time, so only callback with the start

// The props argument to `createWorkInProgress` is `any` typed, so we use this

// The protection skip bit tells us if we have 2 bytes of CRC data at the

// The queue doesn't persist past this render pass.

// The queue is currently empty, which means we can eagerly compute the

// The queue of discrete events to be replayed.

// The react-debug-hooks package injects its own implementation

// The regex here verifies that the `type` contains at least one non-

// The render included lanes that were updated during the render phase.

// The render is suspended, it hasn't timed out, and there's no

// The request was aborted and the SegmentLoader has already been reset

// The require function

// The resolved type is set if we know what the final type will be. I.e. it's not lazy.

// The rest are treated as attributes with special cases.

// The rest of this function is a fork of `updateClassComponent`

// The result can be nullish if a mock or a custom function is used.

// The return pointer of A and the return pointer of B point to different

// The return pointers point to the same fiber. We'll have to use the

// The rightmost point in the dataset should give an exact result

// The root already suspended with a delay, which means this render

// The root entry object (effectively a try statement without a catch

// The root previous suspended and scheduled a timeout to commit a fallback

// The same thing applies to Suspense boundaries.

// The second renderer don't know that it needs to reset the WIP version during unwind,

// The setSource tech method was added with source handlers

// The source fiber did not complete.

// The source fiber did not complete. Mark it with Sync priority to

// The source type check not only determines whether a special DASH playlist loader

// The spec states that track run samples contained within a `traf` box are contiguous, but

// The srcUrl here *may* need to pass through handleManifestsRedirects when

// The start of a segment should be the start of the first full frame contained

// The suspended lanes are no longer CPU-bound. Clear their expiration times.

// The tap listener needs to come after the touchend listener because the tap

// The target is a portal, but it's not the rootContainer we're looking for.

// The target timestampOffset for this segment when we append it

// The theory is that a person can't tell the difference between small differences in time.

// The time is within or beyond the last segment.

// The time it took to render last row is greater than the remaining

// The time requested is beyond the stream end.

// The timeline that the segment is in

// The timestamp offset needs to be regenerated, as the buffer most likely

// The trick we use is to cache the first of each of these inputs within an

// The validation flag is currently mutative. We put it on

// The value actually changed, set it.

// The wakeable resolved, so we no longer need to memoize, because it will

// The way Mp3Tags stores ID3 meta-data

// The way Picard, FooBar currently stores, ID3 meta-data

// The whole list is part of the tail.

// The work completed. Ready to commit.

// The work expired. Commit immediately.

// The work loop is an extremely hot path. Tell Closure not to inline it.

// The work-in-progress fiber. I've named it differently to distinguish it from

// The work-in-progress queue is the same as current. This happens when

// The work-in-progress tree is now the current tree. This must come after

// Then byte-shift to the left and OR with char1 so we can pass the

// Then load the best source.

// Then update media group playlists

// Then we can remove this special list.

// There are no base updates.

// There are working polyfills for <dialog>. Let people use it.

// There is no alternate. This is an unusual case. Currently, it only

// There is no effect on the root.

// There might be multiple of these in the list but since we're

// There might be nested nodes so we need to keep track of how

// There were render phase updates. These are only valid for this render

// There's a partial tree, and at least one of its lanes has expired. Finish

// There's additional work on this root.

// There's already a work-in-progress. Reuse it.

// There's no logic for PAC -> row mapping, so we have to just

// There's no need to check for keys on text nodes since we don't have a

// There's no need to search deeper because for the purpose of giving

// There's potentially an issue where we could double add metadata if there's a muxed

// Therefore we need to go through the whole tail to find if

// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable

// Therefore, the next segment should be used to set the timestamp offset.

// Therefore, we have to finish this group of requests immediately after the first

// These are "enumerated" HTML attributes that accept "true" and "false".

// These are "enumerated" SVG attributes that accept "true" and "false".

// These are HTML attributes that are "overloaded booleans": they behave like

// These are HTML attributes that must be numbers.

// These are HTML attributes that must be positive numbers.

// These are HTML boolean attributes.

// These are circular

// These are reserved SVG and MathML elements.

// These are reset during render to allow the DevTools commit hook a chance to read them,

// These are set right before calling the component.

// These are the few React props that we set as DOM properties

// These are top level properties that can be updated

// These attribute exists both in HTML and SVG.

// These effects should only be committed when components are first mounted,

// These particular numbers are vague estimates. We expect to adjust them based on research.

// These props are reserved by React. They shouldn't be written to the DOM.

// These set relatedTarget to null because the replayed event will be treated as if we

// These tags are only valid with a few parents that have special child

// These values may change as we process the queue.

// These will be overridden during the parent's reconciliation

// They all can have MIME `video/mp4` except `application/mp4` special-case which is hard to detect.

// They are implemented in all modern browsers.

// Third, even if you set all that aside, Suspense is like error boundaries in

// This API will tag the children with the side-effect of the reconciliation

// This CANNOT use `classList` internally because IE11 does not support the

// This Fiber's initial properties will always be overwritten.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This allows us to reset root when portals are popped.

// This also trims any offset from 0 at the beginning of the media

// This approach works across all browsers, whereas `change` does not fire

// This avoids unnecessarily recomputing memoized values.

// This behavior/bug has something to do with Object.preventExtension().

// This boundary already captured during this render. Continue to the next

// This branch is reachable if the render phase is impure.

// This can be replaced with a WeakMap once they are implemented in

// This can end up rendering this component multiple passes.

// This can happen if flush is called when no

// This can happen if you passed a class to function component, or non-function.

// This can happen when we abort work.

// This can lead to tearing in the first renderer when it resumes,

// This can result in Infinity if stats.roundTripTime is 0 but that is ok

// This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'

// This causes problems for elements in iframes.

// This check uses currentHook so that it works the same in DEV and prod bundles.

// This code also runs wherever getComputedStyle doesn't exist.

// This code is DEV-only so size is not a concern.

// This commit has passive effects. Stash a reference to them. But don't

// This component has already been unmounted.

// This container might be used for a portal.

// This could change in the future.

// This could only happen with fmp4 segments, but

// This could've been outside the flag but I put it inside to reduce risk.

// This couples React to the Scheduler internals, so we're replacing it

// This dispatcher does that.

// This dispatcher handles an edge case where a component is updating,

// This element was passed in a valid location.

// This enables DevTools to start capturing timing at any point–

// This enables us to pop only Fibers that provide unique contexts.

// This ensures that the version used for server rendering matches the one

// This entry module used 'exports' so it can't be inlined

// This environment has a native %IteratorPrototype%; use it instead

// This error was thrown as a convenience so that if you enable

// This error was thrown as a convenience so that you can use this stack

// This extracts the first frame from the sample that isn't also in the control.

// This fiber did not complete because something threw. Pop values off

// This fiber does not have any pending work. Bailout without entering

// This fiber doesn't have work, but its subtree does. Clone the child

// This finds the most significant non-zero bit.

// This first principle is that if we're going to suspend when we complete

// This function detects when a Suspense boundary goes from visible to hidden.

// This function is fork of reconcileChildren. It's used in cases where we

// This function is not recursive.

// This function is used both for updates and for re-renders triggered by a

// This gets reset before we yield back to the browser.

// This handles more types than `getPropType`. Only used for error messages.

// This handles the case of React rendering into a container with previous children.

// This handles the special case of a mutable source being shared between renderers.

// This happens after the mixing-in because we need to replace the `state`

// This happens if `finalizeInitialChildren` returns `true` (which it

// This has now been refined to a text node.

// This has now been refined to an element node.

// This has the downside of resetting values for different priority renders,

// This hash maps non-ASCII, special, and extended character codes to their

// This helps us achieve a neat API where user doesn't even know that refs

// This hook exists purely for testing purposes.

// This hook is normally a no-op.

// This implies that the base row is incorrectly set.

// This is a CPU-bound tree. Skip this tree and show a placeholder to

// This is a breaking change that can wait until React 18.

// This is a constructor function, rather than a POJO constructor, still

// This is a consumer

// This is a delayed task.

// This is a exponential search for each boundary that commits. I think it's

// This is a fork of `requestUpdateLane` designed specifically for Suspense

// This is a fork of runWithPriority, inlined for performance.

// This is a known bug.

// This is a lazy pooled frozen object, so we need to initialize.

// This is a legacy edge case. The initial mount of a ReactDOM.render-ed

// This is a list of all SVG attributes that need special casing, namespacing,

// This is a list of all the Unicode characters that have a strong

// This is a mapping from React prop names to the attribute names.

// This is a move.

// This is a new mount or this boundary is already showing a fallback state.

// This is a new mount. Change the tag so it's not mistaken for a

// This is a polyfill for %IteratorPrototype% for environments that

// This is a re-render. Apply the new render phase updates to the previous

// This is a render phase update. Stash it in a lazily-created map of

// This is a sidx box without actual segment information

// This is a special case that only exists for legacy mode.

// This is a special case. If any listener updates we need to ensure

// This is a transition, so we should exit without committing a

// This is a wakeable.

// This is also needed for IE8 because the anchor loses its

// This is also our approach for IE handling, for the reason above.

// This is always exactly one child

// This is always non-null on a ClassComponent or HostRoot

// This is an OGG container

// This is an array for better minification.

// This is an insertion or in-progress hydration. The nearest possible

// This is an insertion.

// This is because in LIVE, the player plays 3 segments from the end of the

// This is because we only process these plugins

// This is because we only process this plugin

// This is called right before React yields execution, to ensure `readContext`

// This is done manually in addControlsListeners

// This is due to a browser bug that causes issues if we remove to Infinity.

// This is exported in FB builds for use by legacy FB layer infra.

// This is for `asap.js` only.

// This is going to find the last row among these children that is already

// This is guaranteed to yield a script element.

// This is handy for testing error boundaries without noise.

// This is in postMount because we need access to the DOM node, which is not

// This is inlined manually because closure doesn't do it for us.

// This is intentionally a factory so that we have different returned constructors.

// This is intentionally an invariant that gets caught. It's the same

// This is intentionally written as a list of all properties.

// This is just a cumulative moving average calculation:

// This is kind of an edge case.

// This is maintained with a counter, because the size of the priority queue

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is not a transition, but we did trigger an avoided state.

// This is not likely to be a video segment

// This is not replayable so we'll invoke it but without a target,

// This is only necessary when a select in "single selection mode".

// This is probably a native item type we don't understand.

// This is resolved in the spec by https://github.com/w3c/media-source/pull/92,

// This is simpler for the single child case. We only need to do a

// This is so gross but it's at least non-critical and can be removed if

// This is split into a separate function so we can mark a fiber with pending

// This is the basic functionality of the event system. All

// This is the beginning of the main content.

// This is the entry point for every concurrent task, i.e. anything that

// This is the entry point for synchronous tasks that don't go

// This is the first dependency for this component. Create a new list.

// This is the first hook in the list

// This is the first hook in the list.

// This is the first update since React yielded. Compute a new start time.

// This is the first update. Create a circular list.

// This is the logByType helper that the logging methods below use

// This is the private tracking variable for logging level.

// This is the reason such behavior is strictly opt-in.

// This is the result of a discrete event. Track the lowest priority

// This is the rootContainer we're looking for and we found it as

// This is the same implementation as reconcileChildrenArray(),

// This is the space left of the `seekBarPoint` available within the bounds

// This is the space right of the `seekBarPoint` available within the bounds

// This is used by DevTools to force a boundary to suspend.

// This is used for mediaSequence

// This is used to create an alternate fiber to do work on.

// This is used to make sure we don't warn about the same

// This is useful to prevent an error thrown in a task from stalling the event

// This is why we ensure that non React root containers have inline onclick

// This isn't a real property on the hook, but it can be set to opt out

// This isn't directly used but is handy for debugging internals:

// This lane expired

// This latter part coincides with the load order

// This leads to an ambiguity between <>{[...]}</> and <>...</>.

// This likely occurs when you have an non-timed ID3 tag like TIT2,

// This line contains HLS X-TIMESTAMP-MAP metadata

// This matches Android Major.Minor.Patch versions

// This matches the property of native CompositionEventInterface.

// This may be because it's a Context (rather than a Consumer).

// This may be unset if the props are determined to be equal later (memo).

// This may change in the future with e.g. nested hooks.

// This may not be fast enough to stop HTML5 browsers from reading the tags

// This may trigger infinite loops if componentWillReceiveProps calls setState.

// This means both of them need to be registered to preserve state.

// This means that if a lane is entangled during an interleaved event while

// This method assumes all samples are uniform. That is, if a

// This method must not throw, or React internal state will get messed up.

// This method works as follows:

// This might have been modified.

// This might seem like it belongs on progressedFirstDeletion. However,

// This mirrors the code path above, but runs for hydration too.

// This module is forked in different environments.

// This module should not be running in strict mode, so the above

// This needs to be fixed in getComponentName so that it relies on the tag

// This pattern differentiates ARW from other TIFF-ish file types:

// This prevents one segment playlists (single vtt or single segment content)

// This prevents time from endlessly accumulating in new commits.

// This prevents:

// This render only included retries, no updates. Throttle committing

// This requirement means that video will not cross a timeline until the audio is

// This resets the Fiber to what createFiber or createWorkInProgress would

// This returns the highest priority pending lanes regardless of whether they

// This returns the priority level computed during the `getNextLanes` call.

// This should be fine because the only two other things that contribute to

// This should never happen. (Would happen if the anchor/focus nodes aren't

// This should only be reachable if we're suspended

// This should throw.

// This shouldn't be reachable, but as a fallback, return the entire bitmask.

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This shouldn't happen, something went wrong but to avoid blocking

// This tag allow us to uniquely identify this as a React Portal

// This tag allows us to uniquely identify this as a React Element

// This tag is not present in non Electron environments such as JSDom which

// This target container was successfully dispatched. Try the next.

// This this to be replayed later once the target is available.

// This tracks which mutable sources need to be reset after a render.

// This tree has been unmounted already. Dispatch without a target.

// This triggers data on the H264Stream

// This update does have sufficient priority.

// This update is going to be committed so we never want uncommit

// This used to be called during player init, but was causing an error

// This variable holds currently-applied formatting

// This warning would fire if you read context inside a Hook like useMemo.

// This will be the props with resolved defaultProps,

// This will filter out updated sidx info from the mapping

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// This will make sure that the element is indeed in the dom of that document.

// This will restart the begin phase with a new fiber.

// This will throw if radio buttons rendered by different copies of React

// This will trigger loadedplaylist

// This won't trigger the performance cliff mentioned above,

// This would be a good time to rethrow if any of the event handlers threw.

// This wrapper function gets inlined. Only exists so to communicate that it

// Throw away nalUnits at the start of the byte stream until

// Throw out any hooks that were used.

// Throws if storage is full (e.g., always on iOS 5+ Safari private mode, where

// Time tooltips should not be added to a player on mobile devices

// Timed out.

// Timeline mappings should only be saved for the main loader. This is for multiple

// Timer fired. Transfer to the task queue.

// Timer was cancelled.

// Times out immediately

// Timestamp offset should be updated once we get new data and have its timing info,

// Timestamps are lead nodes as well.

// To Sure if these (REPLAYGAIN_MINMAX, REPLAYGAIN_ALBUM_MINMAX & REPLAYGAIN_UNDO) are used for Vorbis:

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// To avoid creating an additional object, we just hang the .value

// To avoid side effects (such as losing text selection), only set value if changed

// To avoid undefined reference errors through the project, and make the code easier

// To check for this issue, we see if there is a gap that starts somewhere within

// To do that, we're replacing it with an update lane priority.

// To do this, we're going to go through the reconcile algorithm twice. In

// To ensure consistency across multiple updates in the same event, this should

// To figure out which ancestor instance we should use, we traverse

// To get SEI NAL units

// To get around it, we can conditionally useEffect on the server (no-op) and

// To get the samples

// To handle partial appends, there won't be a done function passed in (since

// To maintain the wrapperProps object reference, memoize this destructuring.

// To make comparing ReactElements easier for testing purposes, we make

// To preserve the expected "Pause on exceptions" behavior, we don't use a

// To preserve the preexisting retry behavior of error boundaries,

// To recreate the original typed-array, we need information

// To understand how the responseURL below is set and generated:

// To use getAttributeNS we need the local name which we don't have

// To work around this, initialize the fields below with doubles.

// ToDo

// ToDo before

// ToDo: ???

// ToDo: In same sequence as defined at http://id3.org/id3v2.4.0-frames

// ToDo: be more strict on 'YYYY...'

// ToDo: check me

// ToDo: don't read, but skip data

// ToDo: extended stream header properties are ignored

// ToDo: promise duration???

// ToDo: register bytes pad

// ToDo: register warning

// ToDo: second factor should be read from DSD-metadata block https://github.com/dbry/WavPack/issues/71#issuecomment-483094813

// ToDo: take ID3v1 into account

// ToDo: trigger metadata event

// ToDo: use ignore type

// ToDo?

// Total samples in stream.

// Touch keyboard of Windows.  In such a case, the `char` property

// Track

// Track row and column for proper line-breaking and spacing

// Track the context and the Fiber that provided it.

// Track the current IME composition status, if any.

// Track the input node that has focus.

// Track the start time so we can determine how long the touch lasted

// Track whether we've ever handled a keypress on the space key.

// Tracks components we have already warned about.

// Tracks when a tech changes the poster

// Tracks will load on-demand.

// Transfer time spent rendering these children so we don't lose it

// Transition to the next state.

// Translate ID3 frame PTS times into second offsets to match the

// Translate caption PTS times into second offsets into the

// Translate caption PTS times into second offsets to match the

// Transport Stream

// Tricky logic here:

// Trigger a cue point that captures the current state of the

// Trigger a special error so that it can be handled separately from normal,

// Trigger durationchange for genuinely live video

// Trigger progress watching when a source begins loading

// Trim gops to align with gopsToAlignWith

// Trust the developer to only use possibleRegistrationNames in true

// Try to construct an element, and ignore the tag if we couldn't.

// Try to decode the data that we received.

// Try to find a sync-point in by utilizing various strategies...

// Try to find next header manually when current one is corrupted

// Try to parse input as a time stamp.

// Try to read the APEv2 header using just the footer-header

// Try to search down until we find one.

// Try to unify them. It's a bit tricky since it would require two return

// Try/catch helper to minimize deoptimizations. Returns a completion

// Turn off API access because we're loading a new tech that might load asynchronously

// Turn off any manual progress or timeupdate tracking

// Turn on component tap events only if not using native controls

// Turns 0b1000 into 0b0111

// Two elements created in two different places should be considered

// Type definitions taken from https://github.com/gcanti/flow-static-land/blob/master/src/Fun.js

// Typically this will be the root most one. However, stack frames may be

// UNSAFE_ ones before the deprecated ones, since they'll be 'louder'

// URI reference added for backwards compatibility

// URIs

// URL (if any) and

// URL (if any) and we skip to step 7.

// USed to localise captions/subtitles

// UTF-8: Without any count or NULL terminator

// Under normal playback conditions fetching is a simple walk forward

// Unfortunately it makes React unusably slow for some applications.

// Unhide scroll bars.

// Unknown attributes should have lowercase casing since that's how they

// Unknown: Found in m4b in combination with a '©gen' tag

// Unless explicitly stopped or the event does not bubble (e.g. media events)

// Unless the render was suspended or cascading work was scheduled,

// Unlike the class check below, it's not enforced in production for perf.

// Unmount

// Unmount should not be batched.

// Unmount the root by rendering null.

// Unofficial ID3 tag support

// Unpress the associated MenuButton, and move focus back to it

// Unsafe lifecycles should not be invoked for components using the new APIs.

// Unset styles on `lastProp` but not on `nextProp`.

// Unsuspend any update at equal or lower priority.

// Unsynchronisation

// Until a time when the duration of the media source can be set to infinity, and a

// Unwind the failed stack frame

// Update

// Update Supported Languages

// Update after calling subscribers in case of error.

// Update checked *before* name.

// Update controls className. Can't do this when the controls are initially

// Update current language

// Update pending async counts for all wrapped interactions.

// Update render duration assuming we didn't error.

// Update specific tag settings, in case they were overridden

// Update styles that changed since `lastProp`.

// Update tag id/class for use as HTML5 playback tech

// Update the child lanes of all the ancestors, including the alternates.

// Update the duration

// Update the duration if available

// Update the existing instance's state, props, and context pointers even

// Update the fiber if the keys match, otherwise return null.

// Update the first and last pending times on this root. The new first

// Update the next thing we're working on in case something throws.

// Update the pending async work count for previously unscheduled interaction.

// Update the pending async work count for the current interactions.

// Update the props handle so that we know which props are the ones with

// Update the remaining priority in the queue.

// Update the source fiber's lanes

// Update the wrapper around inputs *after* updating props. This has to

// Updated options with supplied options

// Updating the metadeta cues so that

// Use any height that's been specifically set

// Use any width that's been specifically set

// Use custom drag image if user specifies it.

// Use defaults or player configured option unless passed directly to this method.

// Use the INIT state to determine if playback has started, as the playlist sync info

// Use the `click` event to detect changes to checkbox and radio inputs.

// Use the accurate transmuxedPresentationEnd value if it is available, otherwise fall

// Use the fastest means possible to execute a task in its own turn, with

// Use the first video track only as there is no

// Use the latest known implementation.

// Use the same function ID as the listener so we can remove it later

// Use the same function ID as the listener so we can remove it later it

// Use the sample rate from the track metadata, when it is

// Use the setter to prevent deletion from uglify (pure_getters rule)

// Use this function to schedule a task for a root. There's only one task per

// Use this to detect multiple renderers using the same context

// Use this to track whether the error event is ever called.

// Use well-known-type table

// Used as a getter.

// Used by getHighestPriorityLanes and getNextLanes:

// Used by persistent updates

// Used by renderers to avoid bundling object-assign twice in UMD bundles:

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Used for hot reloading:

// Used for stashing WIP properties to replay failed work in DEV.

// Used to check if !event.stopPropagation instead of isPropagationStopped

// Used to detect multiple renderers using the same mutable source.

// Used to reuse a Fiber for a second pass.

// Used to track how many concurrent renderers this context currently

// User defined atom

// User-originating errors (lifecycles and refs) should not interrupt

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an

// Using `eval` to work around issues when bundling with Webpack

// Usually the current owner is the offender, but if it accepts children as a

// Usually we want to publish it in the next tick so that browser

// Utility function

// V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.

// VHS.

// VOD videos/live streams with large windows, as the buffer may end up overfilled and

// VTT Segment Loader doesn't need to do anything but in the regular SegmentLoader,

// VTT can't handle partial data

// VTT or other segments that don't need processing

// VTTRegion in Node since we likely want the capability to convert back and

// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface

// Validate that the properties correspond to their expected values.

// Verify deps, but only on mount to avoid extra checks.

// Very common

// Video

// Visit children because portals might contain host components.

// Visit children because they may contain more composite or host nodes.

// Visit children because we may find more host components below.

// Visit this fiber.

// W-Frames:

// WAITING state indefinitely.

// Wait at least 1 second since the first byte of data has been received before

// Wait to do this until after remaining work has been scheduled,

// Wait until we have some video data so that caption timing

// Walk backward from startIndex in the playlist, adding durations

// Walk backward until we find the latest segment with timeline

// Walk forward from startIndex in the playlist, subtracting durations

// Walk forward until we find the earliest segment with timeline

// Walk in lockstep until we find a match.

// Walk the parent path to the root and update the child expiration time.

// Warn about invalid children here so that client and hydration are consistent.

// Warn about these lifecycles if they are present.

// Warn about using Maps as children

// Warn when a known attribute is a bad type

// Warn when passing the strings 'false' or 'true' into a boolean prop

// Was setting these once outside of this function, but containing them

// We aborted the requests we were waiting on, so reset the loader's state to READY

// We add this to every single emitted segment even though we only need

// We allow auto-mocks to proceed as if they're returning null.

// We already got the duration, stop processing MPEG stream any further

// We already have an alternate.

// We already have an existing node so let's just update it and delete

// We also can't rely on the ready state of the XHR, since the request that

// We also need to do another copy of this.options_ so we don't end up with

// We also skip portals because they are not part of this host tree.

// We also want to pass the original player options

// We also want to pass the original player options to each component and plugin

// We are done parsing self cue.

// We are done with the effect chain at this point so let's clear the

// We are out of possible candidates so load the last one...

// We aren't actually adding an update to the queue,

// We assign the `code` property manually because native `MediaError` objects

// We assume pendingProps, index, key, ref, return are still untouched to

// We assume that prepareToHydrateHostTextInstance is called in a context where the

// We avoid inlining this to avoid potential deopts from using try/catch.

// We can accumulate the flags, and the targetContainers, and

// We can always overwrite an existing timestamp because we prefer the most

// We can assume the previous dispatcher is always this one, since we set it

// We can avoid this infinite loop by explicitly marking the source as dirty.

// We can delete this special case once the new fork is merged.

// We can re-use it in hot functions like performConcurrentWorkOnRoot()

// We can reset these now that they are finished.

// We can reuse the existing object from previous renders.

// We can use any RetryLane even if it's the one currently rendering

// We can't parse a line until we have the full line.

// We can't rely on the event system being injected on the server.

// We can't schedule any follow up work for the root because the fiber is already unmounted,

// We can't start parsing until we have the first line.

// We check for window.hasOwnProperty('event') to prevent the

// We construct a 31-bit value using bitwise operators over the 31

// We construct a different control for this case to include any extra

// We could also eagerly patch the method.

// We could check it early to avoid scheduling an unnecessary callback.

// We could have created a separate document here to avoid

// We could move it there, but we'd still need this for lazy code path.

// We could update instance props and state here,

// We could've passed this the first time

// We create tags in the namespace of their parent container, except HTML

// We currently set sibling to null and index to 0 here because it is easy

// We did miss the original loadstart. Make sure the player

// We did miss the original native loadstart. Fire it now.

// We didn't find a boundary that could handle this type of exception. Start

// We dispatch a timeout with a specified delay of 0 for engines that

// We do an initial pass to gather component names

// We do this because a rendition change that also changes the timescale for captions

// We do this for the case where there is an audio and video track in the

// We don't currently have a way to increase the priority of

// We don't do anything in this mode.

// We don't expect any of the above to throw, but better to be safe.

// We don't have to traverse to the children of the list since

// We don't mind this list too much because we expect it to never grow.

// We don't need to recompute the cues' display states. Just reuse them.

// We don't need to request the master manifest again

// We don't process these events unless we are in the

// We don't support rendering Generators because it's a mutation.

// We don't want a click to trigger playback when controls are disabled

// We don't want exception behavior to differ between dev and prod.

// We don't want to fire loadstart prematurely here and cause a

// We don't want to just use `this.off()` because there might be other needed

// We eagerly listen to this even though we haven't committed yet.

// We either have an infix or postfix operator (they should be mutually exclusive)

// We expect at least one stack frame to be shared.

// We explicitly want to coerce to number here if possible.

// We first render the head. If anything is in fallback state, we do another

// We found a packet

// We found a packet so emit it and jump one whole packet forward in

// We found a spot where we aren't overlapping anything. This is our

// We found a suspense instance. That means that we haven't

// We get the current "Player" component here in case an integration has

// We got a match.

// We got what we want, stop further processing of chunks

// We had an attribute but shouldn't have had one, so read it

// We have a match. This only drills down to the closest host components.

// We have a queue to process.

// We have already passed our CPU deadline but we still have rows

// We have an acceptable loading state. We need to figure out if we

// We have new updates that haven't been processed yet.

// We have no life-cycles associated with portals.

// We have now passed our CPU deadline and we'll just give up further

// We have successfully injected, so now it is safe to set up hooks.

// We have the master playlist at this point, so

// We have to make sure both x and y parse, so use a temporary

// We have two approaches to repairing this situation:

// We immediately remove the callback from event listeners so that

// We include captions and ID3 tags for backwards compatibility,

// We initialize the default updater but the real one gets injected by the

// We intentionally don't use spread (or .apply) directly because it

// We intentionally fallthrough here if enableBlocksAPI is not on.

// We intentionally reset, rather than copy, actualDuration & actualStartTime.

// We just rendered the head.

// We listen to these events in case to ensure emulated bubble

// We listen to this event in case to ensure emulated bubble

// We look for:

// We manually clear out the old buffer to ensure

// We matched the next one, we'll now assume that the first one was

// We matched the slot, but we didn't reuse the existing fiber, so we

// We may still have similar intermediate frames from the construct call.

// We memoize the elements for the rendered child component as an optimization.

// We might bail out of the loop before finding any but that

// We must pre-set some of the values on the Gop since we

// We must update the syncinfo to recalculate the seekable range before

// We must wait for the active audio playlist loader to

// We need a place to store all our handler data

// We need a try/catch here because Safari will throw errors when attempting

// We need this to execute synchronously every time we re-render. However, React warns

// We need to check all keys in case some are required but missing from

// We need to check the direct prototype for the case where subclasses

// We need to clear only if we didn't queue because

// We need to delete the row we just rendered.

// We need to make sure this check is only done if Tech has been registered.

// We need to temporarily unset name to avoid disrupting radio button groups.

// We need to wait before we start listening for mousemove events.

// We need to wrap this in a timeout to give folks a chance to add error event handlers

// We need update the tracked value on the named cousin since the value

// We no longer need to track the active instance fiber

// We now have a consistent tree. Because this is a sync render, we

// We now have a consistent tree. The next step is either to commit it,

// We only are interested in the *last* %c

// We only do this deeper than head and body since they tend to have random

// We only expect a wrapped function to be executed once,

// We only have the top Fiber that was created but we need recurse down its

// We only have the top Fiber that was deleted but we need to recurse down its

// We only have the top Fiber that was inserted but we need to recurse down its

// We only stop propagation here because we want unhandled events to fall

// We only support CEA608 captions for now, so ignore anything that

// We only use a Fiber to ensure the same hidden class so DEV isn't slow.

// We only want to warn if we're sure it's a new React.

// We originally were accepting both properties and attributes in the

// We perform this translation at the end of the event loop so that we

// We pick a train model where the next boundary commits at a consistent schedule.

// We push the context as early as possible to ensure stack integrity.

// We record this information as an expando on the error.

// We scheduled a timeout but it's no longer needed. Cancel it.

// We should have a handler that fetches the number of bytes required

// We should have already attempted to retry this tree. If we reached

// We should never have an alternate for any mounting node. So the only

// We should not delegate these events to the container, but rather

// We should only process this nativeEvent if we are processing

// We should only use this function for:

// We should prefer to render the fallback of at the last

// We show the whole stack but dedupe on the top component's name because

// We special case a direct text child of a host node. This is a common

// We still have tail rows to render.

// We still need to give the player time to add event listeners

// We successfully dispatched this event.

// We suspended during the head. We want to show at least one

// We treat the ambiguous cases above the same.

// We tried to use Object.assign() instead but this is called in

// We trigger the "beforepluginsetup" and "pluginsetup" events on the player

// We unshift audio and push video because

// We use a double buffering pooling technique because we know that we'll

// We use a throwing setter instead of frozen or non-writable props

// We use the prefix to ensure our stacks line up with native stack frames.

// We use these fields to store the result.

// We use this as a heuristic. It's based on intuition and not data so it

// We use this when assigning a lane for a transition inside

// We used to always prepend init segments for video, however, that shouldn't be

// We want to capture the wrapper props and child props we used for later comparisons

// We want to ensure that a "busy" state doesn't get force committed. We want to

// We want to match the production code behavior (which will use HooksDispatcherOnMount),

// We warn in this case but don't throw. We expect the element creation to

// We warn when you define propTypes on lazy()

// We were unable to find a good segment within the playlist

// We weren't previously hidden, and we still aren't, so there's nothing

// We will always choose the last track as our chaptersTrack

// We will assume that they are, so we only need the first to calculate start time.

// We will invalidate the child context in finishClassComponent() right after rendering.

// We will need to recalculate the earliest segment Dts

// We will reassign it back when we pop the portal on the way up.

// We will still patch up in this case but not fire the warning.

// We wrap tasks with recyclable task objects.  A task object implements

// We'd like to remove this but it's not clear if this is safe.

// We'll add them to the base queue.

// We'll check if this is a container root that could include

// We'll do the same for `currentEventPendingLanes` below.

// We'll get a different iterator later for the main pass.

// We'll have to wait for @3x to see if this is entirely correct

// We'll need a host callback the next time work is scheduled.

// We'll update the source buffer's timestamp offset once we have transmuxed data, but

// We're about to bail out, but we need to push this to the stack anyway

// We're assuming if you set an aspect ratio you want fluid mode,

// We're at the root.

// We're back to the root of this subtree. Exit.

// We're blocked on hydrating this boundary.

// We're deeper than the current hydration context, inside an inserted

// We're done seeking and the time has changed.

// We're done.

// We're going to commit this fiber even though it didn't complete.

// We're going to find the first row that has existing content.

// We're going to render them separately later.

// We're going to search forward into the tree until we find a sibling host

// We're not blocked on anything.

// We're not inside React, so we may be in the middle of a browser event.

// We're only removing a single handler

// We're running in the default, "independent" mode.

// We're still blocked.

// We're still blocked. Try again later.

// We're unblocked.

// We've determined that A is the current branch.

// We've determined that B is the current branch.

// We've got an indent level code. Each successive even number

// We've just hydrated. No need to hydrate again.

// We've reached the end of the new children. We can delete the rest.

// We've reached the root.

// We've received the last duplicate packet, time to start processing again

// We've started getting older data, so set the flag.

// We've successfully replayed the first event. Let's try the next one.

// WebKit

// Webkit offers a very useful `textInput` event that can be used to

// What we need to determine is if there are any hooks that already

// When a checked radio tries to change name, browser makes another radio's checked false.

// When a method isn't available on the object it throws a TypeError

// When a segment expires from the playlist and it has a start time

// When a store is created, an "INIT" action is dispatched so that every

// When a yielded Promise is resolved, its final value becomes

// When adding attributes to the HTML or SVG allowed attribute list, be sure to

// When adding attributes to this list, be sure to also add them to

// When adding new symbols to this file,

// When an interaction goes out of scope, the previous set (if any) is restored.

// When any evented object is disposed, it removes all its listeners.

// When blurring, set the value attribute for number inputs

// When breakpoint definitions change, we need to update the currently

// When building additional tech libs, an expected method may not be defined yet

// When controls are disabled a click should not toggle playback because

// When in roll-up mode, the index of the last row that will

// When legacyFBSupport is enabled, it's for when we

// When no options are passed, use the hook directly

// When passed a node, call the hook straight away.

// When startIndex is negative, we first walk forward to first segment

// When suspending, we should always exclude lanes that were pinged or (more

// When syncing the checked attribute, both the checked property and

// When syncing the checked attribute, it only changes when it needs

// When syncing the value attribute, the value comes from a cascade of

// When syncing the value attribute, the value property should use

// When that happens we'll catch the errors and inform tech that it's not ready any more.

// When the player is first initialized, trigger activity so components

// When the syncPoint is null, there is no way of determining a good

// When the touch ends, measure how long it took and trigger the appropriate

// When there's no audio or video data in the segment, there's no audio or video

// When this becomes current, the previous queue and dispatch method will be discarded,

// When this gets resolved in ALL browsers it can be removed

// When using a custom drag layer, the only way to prevent

// When video emits timelineStartInfo data after a flush, we forward that

// When we go into a portal, it becomes the parent to remove from.

// When we go out of the portal, we need to restore the parent.

// When we have not seen a PMT yet, defer further processing of

// When we have track info, determine what media types this loader is dealing with.

// When we try rendering again, we should not reuse the current fiber,

// Whenever we seek internally, we should update the tech

// Whether or not it would crash later, we want to show a good message in DEV first.

// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.

// Whichever timer succeeds will cancel both timers and

// While we have enough data for a packet

// While we're inside a removed host node we don't want to call

// Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf

// Widget Attributes

// Will calculate duration based on the file size

// Windows Media Player

// With opts.alwaysNormalize = false (default, spec compliant)

// With opts.alwaysNormalize = true (not spec compliant)

// With that in mind, we ignore any data between an XDS control code and a

// Within the body of any async function, `await x` is transformed to

// Without some nodes in the tree having empty base times.

// Without sync-points, there is not enough information to determine the expired time

// Without this first invariant, passing a non-DOM-component triggers the next

// Work around @2x coordinate discrepancies in browsers

// Work around Safari 8 positioning bug

// Work in progress (ex: onload events in incremental mode).

// Work in progress.

// Workaround for #4583 (JAWS+IE doesn't announce BPB or play button), and

// Worst case the selector will throw again and then an error boundary will handle it.

// Would be something like media().id !=== currentPlaylist.id and we  would need something

// Would the 2 gaps be included in the time duration calculations resulting in

// Wrap native boolean attributes with getters that check both property and attribute

// Wrap native boolean attributes with setters that set both property and attribute

// Wrap native properties with a getter

// Wrap native properties with a setter in this format:

// Wrap video tag in div (el/box) container

// XHR binary charset opt by Marcus Granado 2006 [http://mgran.blogspot.com]

// XMLHttpRequest spec says to pass null as body to indicate no body

// XOR with the IV, and restore network byte-order to obtain the

// XXX (@Qix-) should we be logging these?

// XXX Temporary. Will be removed in the next major release.

// Yield after `yieldInterval` ms, regardless of where we are in the vsync

// Yielding to the browser will give it a chance to paint, so we can

// You have to wait at least once in case this script is loaded after your

// Zip-based file formats

// \

// ^

// ^ sync point        ^ i

// _

// `Events.trigger`. Right now the default `target` will be

// `SeekBar` before hitting the `seekBarPoint`

// `act` testing API

// `autoplay` has to be *last* so that `muted` and `playsinline` are present

// `button` and `buttons` equal to 0

// `call`, just like a function.

// `charCode` is the result of a KeyPress event and represents the value of

// `classList` will be used by the add/remove functions.

// `count` is set to zero that current value of `rate` isn't included

// `document` due to the `Event.fixEvent` call.

// `done` events.

// `ensureRootIsScheduled` because the check above implies either that

// `expectedStyle` to a temporary DOM node to read its `style` attribute

// `flushDiscreteUpdates` starts a useless render pass which may cancels

// `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which

// `form.getElementsByName`, but that will only return direct children

// `free`

// `ftyp` box must contain a brand major identifier, which must consist of ISO 8859-1 printable characters.

// `hasOwn.call(value, "__await")` to determine if the yielded value is

// `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.

// `isInputPending` is not available. Since we have no way of knowing if

// `keyCode` is the result of a KeyDown/Up event and represents the value of

// `mdat` MJPEG

// `moov`

// `mouseup` event on a single left click has

// `mov` format variants

// `nativeEventTarget` is probably a window object.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

// `pipe` function above.

// `preventDefault()` in window `error` handler.

// `process.on("uncaughtException")` or by a domain.

// `raf` is here just to keep all the raw image detectors together.

// `rawAsap` unless and until one of those tasks throws an exception.

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `requestUpdateLane`. We assume it's the same as the root being updated,

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// `src` or `controls` that were set via js before the player

// `this` in selectPlaylist should be the VhsHandler for backwards

// `this` is `parent`

// `toString`ed by IE8/9.

// `which` is an alias for either `keyCode` or `charCode` depending on the

// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test

// a 'shared' variable that changes when act() opens/closes in tests.

// a 3 second range (3 seconds +/- 1 second) back from our current time.

// a NAL unit boundary

// a PlacementAndUpdate.

// a batch. This is intentionally inside scheduleUpdateOnFiber instead of

// a better way to communicate whether this was a miss or null,

// a boundary.

// a button - though not for its super class, ClickableComponent. Also,

// a child. Since we want to append the update only to the work-in

// a compiler or we can do it manually. Helpers that don't need this branching

// a fallback, then we should always suspend/restart. Transitions apply

// a global event handler. But because the error happens in a different

// a half-second of the nal unit

// a host component or host text.

// a list of other boxes that the styleBox can't overlap with.

// a map-specified init segment takes priority over any transmuxed (or otherwise

// a match looks like this:

// a nested suspense boundary within it. So we can use this as a fast

// a new mount, even though an empty version of it already committed.

// a non-delegated event.

// a number of possible default values as properties where 'defaultKey' is

// a packet

// a parent of the Portal. That means we can ignore it because the

// a playlist

// a playlist (e.g., in case the playlist errored and we re-requested it).

// a playlist cannot be reincluded if it wasn't excluded to begin with.

// a port identifier is added for standard ports, strip it.

// a problem since MSE (on Chrome) requires a leading keyframe.

// a property called "_context", which also gives us the ability to check

// a push/pop misalignment.

// a reasonable estimate.

// a root other than sync.

// a root, then we should also restart if we get an update or ping that

// a scheduled timeout.

// a segment boundary, we need to make sure we *don't* ignore the packets

// a setAutoplay call on tech ready. We do this because the

// a single value.

// a stack.

// aac frames the cross a PES packet boundary

// abort a request early due to insufficient bandwidth

// abort outstanding playlist requests

// abort these steps." (source: https://www.w3.org/TR/media-source/#attributes).

// aborts are not a true error condition and nothing corrective needs to be done

// about to bail out, but there might be other lanes that weren't

// about to cross to it, so that way audio and video will always cross the timeline

// about to fire, and either way the player hasn't seen it yet.

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// about what portion of the ArrayBuffer it was a view into

// above.

// accidentally pass it on to the delegate.

// accounting for timestamp offset. For example, if the timestamp offset is -100 and

// accurate for the segment.

// accurate timing values.

// achromatic

// across periods

// act as getter, if we have no request to change

// active and not passive.

// activity

// activity. Making it impossible to go into inactive mode. Specifically

// acts like a "thread ID" here).

// actual time across multiple render passes.

// actual work. These are provided by the prototype as a sort of no-op

// actually display captions. If a caption is shifted to a row

// actually inside the passed-in node.)

// add an entry that maps the elementary_pid to the stream_type

// add child elements to represent the individual buffered time ranges

// add master playlist controller options

// add namespace for current node		

// add that onto bytes

// add the url to an anchor and let the browser parse the URL

// add the vjs-error classname to the player

// add this chunk to the data we've collected so far

// add this to every single emitted segment even though it's only needed for the first

// add to the end of the list

// add unique class to each language text track & add settings styling if necessary

// added in that step.

// added to the body, and an innerHTML is needed to trigger the parsing

// added to the playlist to prevent undefined references, issue a warning to fix the

// adding target durations. If we "run out of time" before getting to

// additional mappings:

// additional work on this root is scheduled.

// adjusted by the timestamp offset, the value must be adjusted.

// adjusted by the timestamp offset, we must adjust the value here

// adjusted by the timestmap offset, we must adjust the value here

// advance past the frame header

// advance the frame start past the extended header

// advance the offset to the first entry in the mapping table

// advance the sync point to a NAL start, if necessary

// affecting the algorithms where its used. Here I'm using

// after 10 possibly stalled appends with no reset, exclude

// after `endOfStream` has been called (in response to a seek for instance)

// after all players have been disposed or before any were created.

// after each key entry. The selection changes after keydown and before

// after first render to prevent infinite render phase updates.

// after we rerender. This is used as a helper in special cases

// again and the nodes are still in the host tree so these will be

// again. This is the same as context updating.

// ahead is roughly the minimum that will accomplish this across a variety of content

// aka when there is no current/alternate.

// alert components that the poster has been set

// align index

// all SC-specific things should not be hoisted

// all appending cases?

// all buffers should have been flushed from the muxer, so start processing anything we

// all except special table nodes which cause bad parsing behavior anyway.

// all lifecycle effect tags.

// all pending updates are included. If it still fails after the second

// all previous Promises have been resolved before calling invoke,

// all subsequent samples.

// all the same keys later.

// all tracks and track listeners are removed on

// allow <SVG> or <mATH>.

// allow detectFactoryAndVerify to get ownProps

// allow empty arrays to be passed to clear out GOPs

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// allows the video to catch up to the audio position without losing any audio

// almost identical to the logic used in the normal update path,

// already available as a parsed manifest object). However, if the manifest object

// already cloned. In legacy mode, the only case where this isn't true is

// already have an existing method we want to call, so there's no need

// already started rendering.

// already updated the timestamp offset for this segment

// also add them to this module to ensure casing and incorrect name

// also ensures that the minifier will not anonymize the function.

// also have been non-React nodes. We need to answer which one.

// also provided (in the form of a resolved playlist object) as part of the

// also, this causes the CPU to spike and eventually crash the page on IE11.

// also, tracking when the document is hidden can

// alt audio doesn't manage timestamp offset

// alternate audio track

// alternate_group

// although responseText "should" exist, this guard serves to prevent an error being

// although the VTT segment loader bandwidth isn't really used, it's good to

// although the segment loader is an audio segment loader, call the setAudio

// always clean up auto-text tracks

// always receive the correct fiber here

// amendments. These decisions, particularly to marginalize MessageChannel and

// an array of source objects

// an empty segment.

// an error occurred from the active pendingSegment_ so reset everything

// an event 20 times per second until it succeeds.

// an external backing store so that we can freeze the whole object.

// an immutable object with a single mutable value

// an infinite loop.

// an initial media as the playlist selectors do not consider browser support

// an invalid or unchanged value

// an isolated frame and process.

// ancestor components re-render before descendants

// ancestor path already has sufficient priority.

// and .done properties off the next function object itself. This

// and a DTS value. Determine what combination of values is

// and a handler for that event throws. We should be resilient to most of

// and a seek is happening

// and any newline or tab are filtered out as if they're not part of the URL.

// and apply the stashed updates on top of the work-in-progress hook.

// and are using the default

// and attempt to resync when the post-update seekable window and live

// and audio timelines change together. For more details, see the

// and both offsets 0, in which case we will have handled above.

// and conservatively guess

// and definitely preferable to a crash with TypeError...

// and delete the existing ones.

// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240

// and don't track value will cause over reporting of changes,

// and eligible for a replay.

// and empty the buffer. Otherwise hold onto the data because it may be

// and have the same names are omitted, just like in the HTML attribute filter.

// and height. In this case, though, returning null from render()

// and https://github.com/facebook/react/issues/14239

// and improve init perf of processing this array, as it will

// and instead is just adaption field stuffing bytes

// and isMounted is deprecated anyway so we should be able to kill this.

// and it is guaranteed to be the work-in-progress version.

// and it represents a batch of work. Could make a helper function instead,

// and it simplifies other profiler code (including DevTools).

// and keeps track of it for later closing

// and last so that it's non-circular.

// and multiplying by 4.

// and nobody should be using this in existing code.

// and not all tags know about these attributes, so, we still want to check them manually

// and one of its descendants throws while unmounting a passive effect.

// and only round to four decimal places, as we round to two below

// and prepare a fresh one. Otherwise we'll continue where we left off.

// and processed in a more granular fashion

// and replace it on the stack later when invalidating the context.

// and set it synchronously if possible (#2326)

// and should be reset before starting a new render.

// and shouldn't be increasing the number of class names

// and switch to a different tree. Like a try/catch block. So we have to track

// and the components are attached to dnd-core

// and the left edge of the `SeekBar` and add the number of pixels in the

// and the next loop, and fire it if not.

// and the same name are rendered into the same form (same as #1939).

// and the subtitles/captions track before the descriptions track

// and there for cut off earlier. So we should find the root most frame in

// and track definitions

// and treat reading from the source as we do in the mount case.

// and values needed to control behavior (forwarded refs, alternate context instances).

// and volume is changed with a native mute button

// and wait for more data

// and we are done.

// and we want to check the offset values.

// and we want to make sure that the `video-js` class doesn't get lost

// and we will likely need to adjust the mediaIndex

// and we won't require Trusted Type here.

// and webkitMovementX/Y

// and when the current render (with the new getSnapshot function) is processed.

// and with only the default shallow comparison, we upgrade it

// and won't include inputs that use the HTML5 `form=` attribute. Since

// and... yikes.

// annotate with encryption information, if necessary

// annotate with initialization segment information, if necessary

// annoying workaround for a double BOM issue

// another audio track is enabled, disable it

// another exception occurred so enter BADCUE state.

// another level, but there's still an inner boundary that would show a fallback,

// another request. this can happen when the timeout for an aborted

// another video track is enabled, disable it

// any SourceBuffer in sourceBuffers, then throw an InvalidStateError exception and

// any data from the segment

// any format flags (for future use)

// any in-flight request is now finished

// any match is supported.

// any necessary setup in a predictable way. This predictability

// any references to cancelBubble throw "Member not found".  A

// any time an update finishes and the last segment is in the

// anything before them are not considered for collapsing.

// anyway so the error gets fired.

// anywhere in the tree. This effectively throttles progressive loading into a

// api or blacklisted temporarily due to playback errors.

// appears to fire in all of the remaining cases so we catch those and

// append +suffix

// append WebVTT line terminators to the media initialization segment if it exists

// append init segments

// append is "done" instantly with no data.

// append parameters

// appended in its place.

// appends are working

// appends.

// appendsdone can cause an abort

// apply sbox

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// are being used under the hood.

// are displayed

// are no interleaved events.

// are remuxing audio and video into a single MP4)

// are suspended.

// are the non-standard ASCII characters, which simply map the CEA608 byte

// are the same, the old child is unmounted and a new child is created.

// area to the left edge of the box and cue.size is the distance extending to

// argument that corresponds to a known catch block.

// arguments passed either before or after the %c, so we need to

// aria-* attributes should be lowercase; suggest the lowercase version.

// aria-checked isn't fully supported by browsers/screen readers,

// around this limitation, we use an opaque type that can only be obtained by

// array

// array based heap, only the first one.)

// array might include canceled tasks.

// as 200. However, since we report duration separate from the media source (as

// as a let here

// as a public API.

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// as an error.

// as an option. novtt builds will turn the above require call into an empty object

// as any to override readonly

// as appropriate.

// as before. We can fast bail out.

// as it is possible that it was temporarily stopped while waiting for

// as of Chrome 75 when switching from

// as of video.js 7

// as one do not cause exceptions.

// as provided, otherwise use the resolved URI to load the playlist

// as target duration

// as that can trigger a `sourceset` when the media element

// as the activityCheck interval (250) should ensure we never miss the

// as the deepest instance.

// as the frame duration, starting pts, etc.

// as the newProps. The updatePayload will contain the real change in

// as the object returned is readonly. All co-ordinate values are in reference

// as the trun. It's possible some sources will require this.

// as they should always display the changed duration as

// as we don't yet have proper support for that.

// as we use the start of the segment to offset the best guess (playlist provided)

// as well so they don't need to reach back into the player for options later.

// ascending numbers so we can compare them like numbers. They start at 90 to

// aspects), so make any changes required for a more accurate start time.

// assemble the PPSs

// assemble the SPSs

// assert.equal(size, 0);

// assigning it a key.

// assignment should always work unless something is misconfigured. Just

// assignment step above.

// assignment to a specific key.

// associated track's mode changes. Without something like

// assume ISO/IEC 14496-12 AudioSampleEntry default of 16

// assume `{}` or `{ src }`

// assume a 90kHz clock if no timescale was specified

// assume that the child is current. This happens when we bailout on low

// assuming 10s segments, that would be about 1300 years

// assuming playlist IDs are the same across periods

// assuming that after the first child we've already added everything.

// async functions in terms of async generators, it is especially

// asynchronous operation, so keep a record that this source buffer type is in use

// at 10.006677, but next call mediaTime is 10.003332 )

// at the beginning of the render phase and there's no re-entrancy.

// at the next level instead of this one, because the child props

// at-rule

// attach another listener to flip the boundary back to its normal state.

// attached to each React Root and React Portal Root. Together,

// attempt to prime the video element for programmatic access

// attempt, we'll give up and commit the resulting tree.

// attempts to re-render the boundary in the primary (pre-timeout) state.

// attempts to render the main content and only render fallbacks.

// attribute are assigned at the same time using defaultChecked. This uses:

// attributeName

// attributeNamespace

// attributes on `select`s needs to be added before `option`s are inserted.

// audio

// audio and video data to determine whether to create audio/video source buffers, and

// audio and video, the main loader must wait for audio to be about to change to its

// audio buffer:   0 => 20

// audio data from the muxed content should be removed

// audio has been processed. This should be an

// audio only content will not have video underflow :)

// audio tracks and no audio present in the main TS segments.)

// audio tracks require less metadata

// audio/video source with a metadata track, and an alt audio with a metadata track.

// autoplay happens after loadstart for the browser,

// autoplay option will be passed in the constructor and we

// available to work with.

// available until after the component has mounted.

// available). If it's not available, fall back to a playlist-calculated estimate.

// available, otherwise a store update may happen between render and the effect,

// avc1 codecBox

// avgBitrate

// avoid clashing with Scheduler's priorities.

// avoid doing another reconciliation.

// avoids allocating another HostText fiber and traversing it.

// avoids inaccurate Profiler durations in the case of a

// back here again.

// back into ASAP proper.

// back onto the queue.

// back to an estimate based on the manifest derived (inaccurate) segment.duration, to

// back to the browser.

// backspace the "e" and insert "è".

// backwards-compatibility

// backwards-compatibility with 4.x. check to make sure the

// bailout. Most of the time, when people add non-React children to

// bails out of the update without touching the DOM.

// balance, 0 means centered

// base state.

// base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)

// baseMediaDecodeTime

// baseMediaDecodeTime and the DTS and PTS durations of the segment.

// baseMediaDecodeTime must not become negative

// based on https://github.com/styled-components/styled-components/blob/fcf6f3804c57a14dd7984dfab7bc06ee2edca044/src/utils/error.js

// batch. This enables them to be grouped later.

// be a case where audio loads two segments without saving a mapping (thus leading

// be a pure function, so that it always returns the same lane for given inputs.

// be core the to event system. This would potentially allow

// be fired.

// be necessary but unfortunately many code paths reads from the workInProgress

// be pure function, so that it always returns the same lane for given inputs.

// be scheduled. Use a counter to prevent infinite loops.

// be set to Infinity (even though this would be expected for a live playlist), since

// be successfully parsed from HTML, but will produce a mismatch

// be the case if a cue's state has been changed since the last computation or

// be used to map the start of a segment with a real world time).

// because IE doesn't hide them completely from screen readers.

// because a MemoComponent fiber does not have hooks or an update queue;

// because focus will move elsewhere

// because in an ideal world we would not emulate and use

// because in fixed mode you could calculate width and height yourself.

// because it's guaranteed to have already run when movementX

// because that won't throw in a non-strict mode function.

// because the player is going to handle autoplay on `loadstart`

// because the playlists are internal to the manifest, load should either load the

// because the root is not part of its own effect list.

// because there is no update we can add for useReducer hooks that won't trigger an error.

// because there's no ancestor that can handle it; the root is

// because these events do not consistently bubble in the DOM.

// because they're only guaranteed to be resolved here.

// because this is a particularly subtle form of timestamp alteration.

// because we assume its namespaced name is the same as our config.

// because we bailout on the primary tree completely and leave it in its old

// because we can only blacklist a playlist and abort requests

// because we only want the contents of the modal in the contentEl

// because we should only use bandwidth stats on progress to determine when

// because we used to do it during top-level native bubble handlers

// because you think you might want to restart before committing. However,

// been played before relax for awhile

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// before ANY passive effect create functions are called.

// before a user can receive them so we can update isFullscreen appropriately.

// before declaring it ts

// before inserting the WebVTT script

// before the next rerender (including event handlers attached to ancestor

// before the next user activity is picked up by the activity check loop

// before the second keystroke). Other input methods (e.g., paste) seem to

// began before this component started tracking. This can happen commonly

// begin flushing on the next task the task throws an error.

// begin phase by the time we start processing the queue, so we've already

// beginning of the queue.

// behavior as without this statement except with a better message.

// behavior, especially around long running live streams.

// behavior. Status 206 may be used in response to byterange requests.

// being called "element".

// being worked on.

// belong to the child set of A.return, and B must belong to the child

// best position.

// best to wait until all appends are done so we're sure that the primary media is

// between a time in the display time and a segment index within

// between events.

// big endian

// binary

// binary (probably artwork)

// bit_depth_chroma_minus8

// bit_depth_luma_minus8

// bitmap value, we remove the secondary effects from the effect tag and

// bits per sample)-1.

// blacklist it and switch to another playlist in the hope that that

// blacklist. This allows other playlists to be attempted in case any have been

// blacklisted instead of the currently selected playlist which is likely

// blank-text buttons.

// blue case

// bookkeeping for it. Not sure if we need to clear it when the listener is

// boolean

// boolean, undefined, etc.

// booleans, but can also accept a string value.

// both npm's request and jquery 1.x use this kind of timeout, so this is being consistent

// both the main and audio segment loaders loading the same audio segments

// bother waiting until the root is complete.

// bottom->up. Top->down is faster in IE11.

// boundary or suspense list.

// boundary's children. This involves some custom reconcilation logic. Two

// boundary.

// box (sdtp)

// box's positions are in reference to the viewport origin, whereas, CSS

// box.

// breaks IE9: https://github.com/facebook/react/issues/13610

// browser API methods

// browsers for all cases.

// browsers typically do this as necessary, jsdom doesn't.

// browsers. It adds spaces and sorts the properties in some

// bubble up contentProtection, this assumes all DRM content

// buffer

// buffer and a very conservative "garbage collector"

// buffer audio data until end() is called

// buffer characters

// buffer incoming captions until the associated video segment

// buffer incoming id3 tags until the final flush

// buffer this fragment until we are sure we've received the

// buffer underflow/underrun -- in that case the video will stop as soon as it

// buffer video until flush() is called

// buffer, end the stream. this ensures the "ended" event will

// buffer. For these playlists, don't save content that's no longer within the window.

// bufferSizeDB

// buffered data instead of waiting for me

// buffered end can be bigger than duration by a very small fraction

// buffering now

// buffers are now clear to process the next queue entries.

// buffers.

// build traf boxes for each track fragment

// bump the sequence number for next time

// but

// but I won't :)

// but at commit. Therefore we need to track insertions which the normal

// but do not collect the line as we need to process the current

// but have not loaded yet and we set it to true before the inject so that

// but instead we rely on them being set during last render.

// but it triggers a bug in IE11 and Edge 14/15.

// but it's better then a hard failure

// but it's possible that we only have its inner render function in the map.

// but matters for <fbt>).

// but meh this is fine for now.

// but no stateful hooks have been used.

// but now we use different bubble and capture handlers.

// but since JS is single=threaded, we can rely on that to ensure

// but that sometimes behaves strangely in IE8. We could also try using

// but the durationchange on the user agent will not fire.

// but there's nothing we can do about that (short of throwing here and refusing to continue the render).

// but this hook recreates the queue in certain cases  to avoid updates from stale sources.

// but using the iterator instead.

// but we can still call the log-only boundary so the error isn't swallowed.

// but we need to ensure that video data is sent back first

// but we really don't want to return that.

// but with the extra DEV validation to ensure hooks ordering hasn't changed.

// by a pixel or two. This adds insurance to these calculations.

// by calls to these methods by a Babel plugin.

// by codec after trackinfo triggers.

// by default, patch the media element

// by the end of this loop, we still want to append gops that come after this

// by the native compositionend event may be incorrect. Japanese ideographic

// by the user through the representations api. In this case, ignore blacklisting and

// by zero in the case where the throughput is ridiculously high

// byteLength will be used for throughput, and should be based on bytes receieved,

// byterange should be inclusive according to

// bytes

// bytes that were pushed in

// cache last currentTime and return. default to 0 seconds

// calculate an end value.

// calculate duration in seconds

// calculate the text track in-band metadata track dispatch type

// calculate the total duration based on the segment durations

// calculate the total size we need to allocate

// call `rawAsap.requestFlush` if an exception is thrown.

// call anyway. We also want to call componentWillUnmount on all

// call invoke immediately, without waiting on a callback to fire,

// call it on both `mousedown` and `mousemove` event,

// call the old function with a sourceset if a source

// call the user-provided callback.

// callback that happens should reset the state to READY so that loading can continue.

// calls are equivalent because they wrap the same Foo function.

// camel case the techName for use in techOrder

// can add a significant amount of overhead. Avoid the

// can adjust our quality selection quickly

// can be adjusted by the timestamp offset

// can be performed regardless of the field and data channel on which the

// can be requested and downloaded and only wait before it is transmuxed or parsed.

// can be returned directly

// can be used for comparison.

// can continue using it's old reference to loop without

// can get iOS ~6.1 devices into a play/pause loop

// can likely be removed for 7.0.

// can reliably accommodate that request. This will usually be snapped

// can't be adjusted to the appropriate value for the transmuxer and source

// can't do anything if the media source / source buffer is null

// can't fall before 0 and 0 seekable start identifies VOD stream

// can't forsee right now.

// cancel outstanding requests so we begin buffering at the new

// cannot be called outside the render phase.

// canplay: newly increased to HAVE_FUTURE_DATA (3) or greater

// canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)

// caption data from being processed twice, we track the latest dts we've

// caption. Because of that, we should explicitly switch back to pop-on

// caption.stream is actually a track name...

// captions

// captions and subtitles. videoElement.textTracks

// captions to a text track at this point

// capture cc data when cc_valid is 1

// capture values if possible.

// case wait for that action to process first.

// case where the player might be stuck and looping through "dead" playlists.

// case. We won't handle it as a reified child. We will instead handle

// cases are invalid.

// cast ArrayBuffer to TypedArray

// catch any error that may otherwise arise. See

// caught by a nested boundary. If not, it should bubble through.

// cause an incorrect adjustment.

// cause the CPU to spike and eventually crash the page on IE11.

// causes a codec change to an unsupported codec.

// causing a flicker

// certain that all streams will provide it.

// chance to clean up.

// change events whenever the controls modify the mode.

// change the button text to "Pause"

// change the button text to "Play"

// change the button text to "Replay"

// change to the current timeline.

// changed

// changed since the function was added to the queue. This is expected, as the

// changed since we began.

// changed.

// channelcount

// character code was received.

// character codes, but have their MSB bitmasked with 0x03 so that a lookup

// chars. Paste events should not lead to BeforeInput events.

// cheap lodash replacements

// check aliases

// check codes

// check for exitFullscreen function

// check for gap

// check for known booleans

// check framesize

// check if any calls were waiting on the timing info

// check if any calls were waiting on the track info

// check if codec switching is happening

// check if the content is encrypted for Widevine

// check if we need to do something special with common tag

// check plugins

// check pre-conditions

// check that there is enough stream data to fill the packet

// check the call queue directly since this function doesn't need to deal with any

// check the first 376 bytes for two matching sync bytes

// checks peppered around the code.

// child. The nested children have already appended themselves.

// children and the parent.

// children to find all the terminal nodes.

// clamp end to duration if we need to remove everything.

// clamp progress between 0 and 1

// clamp remove range start to 0 index

// clamp the box to the amount of steps it would take for the box to

// cleaned up.

// clear existing audio tracks and add the ones we just created

// clear media request

// clear out all tracks because we can't reuse them between techs

// clear out any cues that start and end at the same time period for the same track.

// clear out inactive rows

// clear out module-level references

// clear out the bottom row

// clear out the segment being processed

// clear play terminatedQueue since we finished a real play

// clear the active encryption key

// clear the loader's request reference

// clear this in flushPassiveEffects.

// clears fmp4 captions

// clears remembered formatting

// clip any padding off the end

// clone object

// clone, or a work-in-progress hook from a previous render pass that we can

// closure.

// code in video.js but is required because play() must be invoked

// code path that might call `prepareFreshStack`.

// code we must have exited earlier.

// codec

// codec should be the same for all playlists within the audio type

// codingname

// collect the entire frame so it can be parsed

// collect the rendition metadata

// color looks like "#f0e"

// color looks like "#f604e2"

// color would be parsed converted to rgb values and converted back to hsl.

// column position by bit-shifting to the right (to get n/2)

// combine the individual segments into one large typed-array

// combined audio/video or just video when alternate audio track is selected

// comments are not important for playback

// commit phase. Consider removing the type check.

// commit-phase we mark this as such.

// commitRoot never returns a continuation; it always finishes synchronously.

// committed.

// committed. Disconnect the alternate pointers.

// committed. If it's sync, we still want to yield so that it can be

// common flex features that we can rely on when checking for flex support.

// commonly used development environments.

// compare the value of each element in the array

// compare with 2nd byte of 0x1

// compare with 2nd byte of 0x100

// compare with 2nd byte of 0x200

// compare with 2nd byte of 0x4

// compare with 2nd byte of 0x400

// compare with 2nd byte of 0x800

// compatibility with < v2

// compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag

// complete path segment not equal to "..", are removed.

// complete path segment not equal to "..", that

// complete payload

// complete.

// completed class component. For example, we should not call

// completed work in order to do it.

// completed, even though it's in an inconsistent state.

// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this

// component (i.e. when processing the update queue). But since since

// component class can be instantiated.

// component's mount, ignore it for now (that is, treat it as if it was an

// component, throw an error. If Fiber return types are disabled,

// componentWillUnmount if it is deleted.

// componentWillUnmount, but before the layout phase, so that the finished

// components don't work properly in conjunction with event bubbling because

// composed of the nal units that make up that frame

// composites before this host node is removed from the tree. Therefore

// compositionevent, otherwise extract it at fallback events.

// compressorname

// compute things with such as if it overlaps or intersects with another Element.

// concatenate the audio data to constuct the mdat

// concurrent tree, in an inconsistent state. We want to treat it like

// concurrently. If the whole tree is rendered synchronously, then there

// config changes)

// configurationVersion

// connected descendants won't update until after this component is done

// connected to the store via props shouldn't use subscription from context, or vice versa.

// conservative segment index to fetch from

// consider the playlist unchanged if the number of segments is equal, the media

// consistent and will resume where it left off when called again.

// consistent train of commits. This also gives us an opportunity to restart to

// console.log("  %s[%s] = %s", tagKey, header.name, mean.name);

// console.log("  %s[data] = %s", tagKey, genreStr);

// console.log("  %s[data] = %s/%s", tagKey, num, of);

// console.log("Ignore ASF-Object-GUID: %s", header.objectId.str);

// const _offset = position ? position : this.position;

// const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);

// constants

// constraint_set[0-5]_flag

// consume peeked data first

// contain that track. However, best practices mean looping through the

// contains hooks.

// contains the DOM rendered by the server.

// content element, so temporarily change the content element.

// content post discontinuity should line up with the buffered end as if it were

// context.dispatchException(context.arg) call above.

// context.method was "next", forget context.arg since it has been

// continue reading from stream if required

// continue regardless of error

// continue to propagate through the React fiber tree to find other

// continue with next buffer

// control value.

// controlBar would no longer be hidden by default timeout.

// control_: char0 for control codes, except byte-shifted to the

// controller. Using a custom property for backwards compatibility

// controls on touch enabled laptops like the Chrome Pixel

// convenient for our comparisons to include it

// conversion to ArrayBuffer happens later

// convert base time to seconds

// convert big-endian (network order) words into little-endian

// convert string into object

// convert the playlists to an intermediary representation to make comparisons easier

// convert to video TS since we prioritize video time over audio

// converts 1/10 to no : 1, of : 10

// copy all of the nodes created by the innerHTML on dummy

// copy the guid to the new function so it can removed using the original function's ID

// copy the payload into the result

// corresponding changes there.

// could alter all these plugins to work in such ways, but

// could be problematic, if we're not inside `Scheduler.runWithPriority`,

// couldn't process yet (because one or both source buffers are busy), block other

// crc for actual decoded data

// create logger

// create the TextTrackList if it doesn't exist

// createConnect with default args builds the 'official' connect behavior. Calling it with

// created together (before appending). Source buffer creation uses the presence of

// created when timing info is not exact (e.g. cue start time initialized

// created.

// creation_time

// crossed one. Logic may be implemented to handle the startup as a special case, but

// ctrlKey && altKey is equivalent to AltGr, and is not a command.

// current example is the case of fmp4), so use the rough duration to calculate an

// current gop starts before the current gop we want to align on. so increment gop

// current iteration.

// current logging level.

// current platform

// current reducer, we can use the eagerly computed state.

// current state.

// current time: 13

// current, that means that we reused the fiber. We need to delete

// currentParentIsValid.

// currentTime and can stop looking for better candidates

// currentTime is usually enough to kickstart the player. This checks that the player

// currentTime when scrubbing, but may not provide much performance benefit afterall.

// currentTimeline starts at -1, but we shouldn't end the timeline switching to 0,

// currently used in text tracks

// custom audio track change event handler for usage event

// cut off due to maximum stack limits. In this case, one maybe cut off

// cycle. This means there's always time remaining at the beginning of

// data for a specific dts can be split across packets on either side of

// data stored directly on the videojs object may be

// data takes precedence.  Do not do this if keepOriginalTimestamps is set,

// data types for reserved props

// data, and can continue even if the source buffers are not set up and we didn't get

// data.handlers[type] = null;

// data_reference_index

// dealt with the props. Context in components that specify

// debug(`Reading next token on offset=${offset}...`); //  buf.toString('ascii')

// debug(`ignore ${this.position}...${this.position + length - 1}`);

// debug(`peek ${_offset}...${_offset + length - 1}`);

// debug(`readBuffer ${_offset}...${_offset + length - 1}`);

// declare as variables so they are properly available in timeout function

// decode MusicBrainz Recording Id

// decode Windows Media Player

// decode the base64-encoded PSSH box

// decoders are supposed to drop the "è", while compliant decoders

// decoding).

// decrypt four word sequences, applying cipher-block chaining (CBC)

// decrypt the block

// deep merge tracks and null out player so no circular references

// deep we are and only break out when we're back on top.

// default code is zero, so this is a custom error

// default inactivity timeout

// default isFullscreen_ to false

// default playback rates

// default the container to mp4

// default the whole argument to an empty object if nothing was passed in

// default to 0

// default to Infinity

// default to live edge

// default to video type

// default used.

// default value provided by the browser. See: #12872

// default, slow path: scan the child sets of each parent alternate to see

// defaultProps, but React automatically puts defaultProps on props.

// defaultValue property -- do we need this?

// default_sample_description_index

// default_sample_duration

// default_sample_size

// defaults

// define __esModule on exports

// define getter functions for harmony exports

// defined.

// defined. The sample rate can be parsed out of an ADTS header, for

// definitely won't finish. Since we have a new update, let's mark it as

// definitively know the main segment loader contains video, then we need to wait

// degradation priority, a hint about the importance of this sample

// delegate iterator, or by modifying context.method and context.arg,

// deleting text, so we ignore its input events.

// deletion, so don't let them throw. Host-originating errors should

// deletions from hidden tree. In Concurrent Mode, it's much simpler,

// deletions, so we can just append the deletion to the list. The remaining

// deliberately set

// deliver the NAL unit

// deliver the NAL unit if it isn't empty

// deliver the last buffered NAL unit

// delta_pic_order_always_zero_flag

// demux the streams

// dependency list.

// depends on its existence.

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// deprecation

// deprecation warning

// depth = 24

// destructive reset

// destructure the input into an object with a track argument, defaulting to arguments[0]

// determine frame clock duration based on sample rate, round up to avoid overfills

// determine if native controls should be used

// determine the number of bytes in this frame

// determine the start times for each track

// determine the supported set of functions

// differ between field 1 and field2. Field 2 control codes are always

// difference in the experience. However, waiting for longer might mean that we can avoid

// different from the current state.

// different layout, where the child points to a dehydrated fragment, which

// different number of keys, not equal

// different options opens up some testing and extensibility scenarios

// different sorted keys, not equal

// different values, not equal

// direct_8x8_inference_flag

// direction. If it doesn't find a good position for it there it will then move

// directly represent `beforeInput`. The IE `textinput` event is not as

// disabled with `removeAttribute`. We have special logic for handling this.

// disassemble MPEG2-TS packets into elementary streams

// discard server response and fall back to client side render.

// discontinuity

// discrete update per root so we can flush them early, if needed.

// discrete, even inside a discrete event.

// dispatch our fake event using `dispatchEvent`. Inside the handler, we

// dispatched event, so that the debugger will treat it as an uncaught

// dispatching them after the mount.

// display buffer

// disposed

// disregard

// div on 'this'.

// div. Note, all WebVTT cue-setting alignments are equivalent to the CSS

// do a backward walk to estimate the duration

// do a destructive reset of the main segment loader and not restart the audio

// do a null check for targetPlayer because older firefox's would put document as e.target

// do for gDSFP. I can't remember why.

// do in Concurrent Mode.

// do is to check its .name property.

// do not count this as any sort of request or we risk double-counting

// do not delay if we're inside an act() scope

// do not expose it as an own/enumerable property of the object.

// do not include the null terminator in the tag value

// do not need to set it twice

// do not re-request

// do not update codec if we don't need to.

// do nothing if either rect isn't available

// do nothing if the src is falsey

// do nothing if the tech has been disposed already

// do nothing if there is not enough buffered data for a complete

// do nothing.

// do so now

// do the portal feature.

// do the same (see clones[i].inject)

// document fragment. This is how innerHTML does it.

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// document. Let's just use the local `querySelectorAll` to ensure we don't

// document.body.contains(el) will only check if el is contained within that one document.

// does not support removeSourceBuffer.

// does not use the safe live end to calculate playlist end, since we

// does the value of sourceDuration consider this when calculating arbitrary

// does to implement the `autoFocus` attribute on the client). But

// doesn't expect a non-string/function type and can throw confusing errors.

// doesn't fire when text is deleted, but conveniently, selectionchange

// doesn't flash 100% width/height, but class only applies with .video-js parent

// doesn't give us keycodes, so we need to ignore it.

// doesn't have to account for them.

// doesn't matter since that means that the other boundaries that

// doesn't matter which bit is selected; you can pick any bit without

// doesn't need to be requested, loadedmetadata won't trigger as part of the

// doesn't use a CCx INSTREAM-ID

// doesn't, we manually listen for the events and so we have to enqueue and

// don't attempt to fill gaps smaller than a single frame or larger

// don't auto mixin the evented mixin

// don't check this.tech_.hls as it will log a deprecated warning

// don't copy over the class attribute to the player element when we're in a div embed

// don't focus menu button if item is a caption settings item

// don't have to worry about disabling the audio of the audio segment loader since

// don't hoist over string (html) components

// don't natively support it.

// don't need to re-append the init segment if the ID matches

// don't need to transmux any subtitles

// don't process and append data if the mediaSource is closed

// don't support encrypted segments or fmp4 for now

// don't throw an error

// don't trigger a bandwidthupdate as the bandwidth is artifial

// don't wait for buffer check timeouts to begin fetching the

// don't want this event dispatched twice through the event system.

// don't want to say we are stuck while there is still content

// done

// done for audio. This is more important (though may not be that important) for

// double loadstart so we'll wait and see if it happens between now

// double values will cause Fibers to end up having separate shapes.

// downloaded rather than just bytes processed from components of the segment

// downloading segments

// draft-pantos-http-live-streaming-20

// dragenter handler.

// drop trailing zeroes

// due to its nature as a getter function. Do not remove or cues will

// duration

// duration for live is actually a strategy used by some players to work around the

// duration from index 0 to syncPoint.segmentIndex instead of adding.

// duration is present for the first sample, it will be present for

// duration should be Infinity for live playlists

// during componentDidUpdate we pass the "current" props.

// during playback.

// during validateProps() which runs for hydration too.

// e.g. 2^33 - 1. Since this comes before the data we loaded previously, we want to adjust

// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;

// e.g. a destroy function in one component may unintentionally override a ref

// e.g. it might try to read from a part of the store that no longer exists.

// e.g. options['children']['posterImage'] = false

// e.g. retrying a Suspense boundary isn't an update, but it does schedule work

// e.g. videojs(id, { controlBar: false });

// each time there is a track 'change' event

// each type's time info comes back as an array of 2 times, start and end

// earlier than the other. We assume that the sample is longer or the same

// effect even though we're bailing out, so that cWU/cDU are called.

// effect of all current children being unmounted; even if the type and key

// effect of interrupting the current render and switching to the update.

// effect of interrupting the current work-in-progress.

// effects aren't added until the complete phase. Once we implement

// either ensure that no exceptions are thrown from your task, or to manually

// element can scroll.

// element, no action is required.

// elements (not just inputs). Now that ReactDOMInput assigns to the

// elements instead of directly on the input). Without this, controlled

// embedded within the video stream

// eme handles the rest of the setup, so if it is missing

// emit an error event to blacklist the current playlist

// emit pmt info

// empty

// empty, and we know we can safely read.

// empty, we need to schedule the text content to be reset.

// emulate attribute EventHandler support to allow for feature detection

// emulation (EnterLeave) or use state localized to that

// encapsulates the subscription logic for connecting a component to the redux store, as

// encounters the gap, as audio stalls are more noticeable/jarring to a user than

// encrypted audio

// encrypted video

// end elment

// end of playlist

// end of the ADTS header

// end of the current stack, usually before setInterval(fn, 0).

// end of the sync sequence

// end time.

// enough info to load.

// enough to have mpc loaded.

// enqueue has not been called before, then it is important to

// ensure that new initial loading states can commit as soon as possible.

// ensure that we also pick the highest bandwidth variant that

// ensure that we pick the highest bandwidth variant that have exact resolution

// entanglement is usually "best effort": we'll try our best to render the

// entire base URL (i.e., is set equal to the base URL)

// entire character code to `getCharFromCode`.

// entry_count

// entry_size

// equal for testing purposes and therefore we hide it from enumeration.

// equal to the last appended mediaIndex

// equal to the last possible seekable value.

// equals CURRENT_APE_TAG_VERSION

// equivalent to this check.

// error See ReactErrorUtils for more information.

// error boundaries.

// error can be observed.

// error early if we're misconfigured

// erroring and the code that follows the `dispatchEvent` call below. If

// errors when attempting to use the function. So we report that it

// errors, it will trigger our global error handler.

// errors: https://github.com/facebookincubator/create-react-app/issues/3482

// errs on the side of fewer warnings

// escape sequence

// eslint-disable-line

// eslint-disable-line camelcase

// eslint-disable-line no-empty

// eslint-disable-line no-eval

// eslint-disable-line no-new

// eslint-disable-line no-new-wrappers

// eslint-disable-line no-redeclare

// eslint-disable-line no-use-before-define

// eslint-disable-next-line

// eslint-disable-next-line complexity

// eslint-disable-next-line guard-for-in

// eslint-disable-next-line guard-for-in, no-restricted-syntax

// eslint-disable-next-line new-cap

// eslint-disable-next-line no-console

// eslint-disable-next-line no-fallthrough

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-plusplus

// eslint-disable-next-line no-prototype-builtins

// eslint-disable-next-line no-redeclare

// eslint-disable-next-line no-unreachable

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line prefer-rest-params

// eslint-disable-next-line react-internal/no-production-logging

// eslint-disable-next-line react/no-danger

// eslint-disable-next-line react/no-find-dom-node

// eslint-disable-next-line-no-fallthrough

// eslint-disable-next-lined no-fallthrough

// estimate of overall bandwidth

// even if the work is suspended.

// even if we didn't push any bytes, we have to make sure we flush in case we reached

// even listeners these nodes might be wired up to.

// even then.

// event

// event exists. So we wouldn't see it and dispatch it.

// event is logged, it's coerced to an int. Convert to microseconds to

// event loop context, it does not interrupt the normal program flow.

// event naming?

// event on a non-React tree). We might also consider queueing events and

// event time. The next update will compute a new event time.

// event's native "bubble" phase, which means that we're

// event, then we can't dispatch it regardless of its target, since they

// event. Then reset the cached values once we can be sure the event is over.

// evented object itself.

// evented object.

// events fire on. That means we can skip this step, as event

// events from the nonDelegatedEvents list. Then we can remove

// events in browsers.

// events to queue when playback rate is zero

// events to their parent. We could also go through parentNode on the

// ever the previously attempted to render - not the "current". However,

// every available SauceLabs Selenium web driver worker at time of writing.

// every codec must be able to go into the container

// every request counts as a media request even if it has been aborted

// everyone, because the strict mode case will no longer be relevant

// everything is batched by default. We'll then have a similar API to opt-out of

// everything is ready just continue to haveMetadata

// everything, and the MediaSource should not be detached without a proper disposal

// example when flush() is called.

// exceed it.

// exceeds the limit, we'll fire a warning.

// except when we're ready for the next segment, this check can most likely be removed

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// exception, let the outer generator proceed normally. If

// exception.

// exclude any variants that are not supported by the browser before selecting

// execute code before the first await. Since we implement simple

// execute the callback.

// executed after the calls currently queued.

// executor callback, and why async functions synchronously

// exist in the last segment, however, there isn't enough information to make even

// exit early if clicked via the mouse

// exit early if it isn't a tab key

// exiting a task.

// expected

// expiration time are props and context. We're already in the middle of the

// expired so we know to work on those next.

// explicitly

// export mp4 inspector's findBox and parseType for backwards compatibility

// exported for testing

// exports

// expose properties, triggering a "Permission denied error" if any of its

// expressed by ending with 'Z'

// ext_ :    char0 for mid-row codes, and the base for extended

// extended Format chunk,

// extra objects for things that are never updated. It also allow us to

// factor of half segment duration will prevent duplicate cues from being

// fail the render phase where it didn't fail before. So we log it.

// fails when pasting 100+ items)

// fallback chain of variants

// fallback children.

// fallback state, counts as the whole row being in a fallback state.

// fallback to a naive implementation.

// fallback to what the user wants by using playlists the user has not disabled.

// fallback. Otherwise, don't capture and bubble to the next boundary.

// falls through

// falsy value can't be a Symbol

// feed incoming data to the front of the parsing pipeline

// fiber associated with it.

// fiber. If beginWork throws, we'll use this to reset the state.

// fibers and continue.

// fibers. We assume that return pointers never criss-cross, so A must

// field after effects, see: detachFiberAfterEffects.

// fifth byte of the TS packet header. The adaptation field is

// figure out the correct index to insert the CSS into

// fill the modal and pretend we have opened it

// fill the viewport

// filter it out using the allowed property list during the commit.

// filter out any playlists that have been disabled manually through the representations

// filter out any playlists that have been excluded due to

// filter out any variant that has greater effective bitrate

// filter out invalid sources and turn our source into

// filter out playlists without resolution information

// filter out the NAL units that were delivered

// filter out unmatched portions of the string

// filtered, and returned.

// final amounts. This seems counterintuitive, since we're intentionally

// final segment may be less than full segment duration

// find a gap in demuxed content.

// find a gap in muxed content.

// find a valid ADTS header starting at the next byte

// find all the variants have the same smallest resolution

// find out if this packets starts a new keyframe

// find that inner container before moving on to finding the parent

// find the media group, creating defaults as necessary

// find the playlist object if the target playlist has been

// find the playlist object if the target playlist has been specified by URI

// find the row code in an array and use its index :(

// find the smallest variant that is larger than the player

// find the start of the first frame and the end of the tag

// finish data processing

// finish setting up before triggering this event so the

// finished (and we have its end time).

// finished for all children that run this constructor

// finished this function's removes

// finishes

// finishing. If there are too many, it indicates an infinite update loop.

// fire if playback reaches that point.

// fire loadedmetadata the first time a media playlist is loaded

// fire selectionchange normally.

// fire. The workaround for this bug involves attaching an empty click

// fires if there is an `Update` effect scheduled during mounting.

// fires only on input and textarea thus if there's no focused element we

// first Period

// first gop to cover the time period of the

// first segment

// first segment of subsequent periods signal a discontinuity

// fixed, the key warnings will appear.)

// fixed.

// fixes shallow isOver which would only be non-shallow because of

// flags

// flagsNumeric: Token.UINT32_LE.get(buf, off + 64),

// flatten array argument into the main array

// flip memory

// flow doesn't do during mount. This doesn't happen at the root because

// flush any buffered data

// flush any buffered input

// flush pending packets if the conditions are right

// flush synchronous work at the end, to avoid factoring hazards like this.

// fmp4 relies on browser support, while ts relies on muxer support

// fold the underlying StyledComponent rules up (implicit extend)

// fold the underlying StyledComponent target up since we folded the styles

// following the rightmost slash "/", or the entire path if no

// for <SegmentTemplate>

// for HLS but we'll ignore "forward" PMT declarations if we see

// for a `Set` key will actually be the value again

// for advanced plugins.

// for both main and audio segment loaders to call endOfStream

// for details on the ADTS header, see http://wiki.multimedia.cx/index.php?title=ADTS

// for each

// for each item is not null. This allows registration of the Player component

// for each null value. However, we also don't want to call updateSlot

// for example, if the player isn't in the DOM for testing

// for instance, when we are rendition switching

// for it to be audio only. See `tracks.video && tracks.audio` if statement

// for samplingFrequencyIndex see ISO/IEC 13818-7:2006, 8.1.3.2.2, Table 35

// for that container to be the correct one

// for that fake event. If the callback throws, the error is "captured" using

// for that source buffer type, process the next action.

// for the cumulative average

// for the current time and duration displays

// for the error message.

// for the event.

// for the same issue with Chrome (on Windows) with JAWS.

// for tracking overall stats

// for warnings.

// force a default if we have none

// force the media element to update its loading state by calling load()

// forcing another re-render, which we don't want.

// forever

// fork the function.

// format as type/subtype

// formatting is only persistent for current row

// formulae from https://en.wikipedia.org/wiki/HSL_and_HSV

// forth between JSON. If we don't then it's not that big of a deal since we're

// forward data and done events from CCs to this CaptionStream

// forward one byte at a time until we find a pair of sync bytes that denote

// forward the event if the value has changed

// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt

// fragment nodes. Recursion happens at the normal flow.

// frame that called our sample function and the control.

// frame-by-frame appending for LHLS, simply because of the increased quantity of

// frame_count

// frame_cropping_flag

// frames added by the construct call.

// frames field is not present

// frames we just removed

// frames. Leaving for now, but should be looked into.

// free

// from and/or the last frame seen, the start time may reflect a frame that starts

// from being detected as stalling. As the buffer will not change in those cases, since

// from being lost during SSR hydration.

// from its placeholder state to its primary/resolved state.

// from loading a new playlist on any blacklist.

// from the *next* segment that have dts === this.latestDts_. By constantly

// from the content instead

// from the effect tag.

// from the first listed one

// from the front or back of non-whitespace characters. aka

// from the original lanes.

// from the previous request to create a new, more accurate, sync-point.

// from the previously enabled rendition to load before the new playlist has finished loading

// from the same playlist.

// full enough buffer to consider taking any actions.

// fullWindow mode is treated as a prefixed event and will get a fullscreenchange event as well

// fullscreen isn't supported so we'll just stretch the video element to

// fully completes before restoring state.

// function keys

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// function to ensure it is prepared to re-append the init segment (or handle other

// function, so that the plugin is ready to be set up again.

// function, symbol are assigned as empty strings

// function. This allows us to not require that the target object be an

// function.sent implementation.

// functions and classes

// functions are allowed to be static if they're just being

// functions in invokeGuardedCallback, and the production version of

// functions may check the length of the load queue and default to pushing themselves

// future (within the same segment), however, there may be a better way to handle it.

// future segments, we only try to align with gops that are both ahead of current

// gap is starts no more than 4 seconds back

// gap, findNextRange will return no ranges.

// gaps_in_frame_num_value_allowed_flag

// generate one and adjust offsets to match

// generated for ABR purposes

// get GC:ed but we don't know which for sure which parent is the current

// get `true` twice. That's probably fine?

// get appended without gap

// get attached.

// get it started back up to attempt the next item. While in terms of

// get lost if this row ends up dropped during a second pass.

// get namespace prefix

// get reset if `textContent` is mutated.  We could add a check in setTextContent

// get rid of the HTML5 video tag as soon as we are using another tech

// get the case where the capture phase event might change

// get the packet length, this will be 0 for video

// get the track id from the tfhd

// get to the completed state slightly earlier.

// get total start/end and captions for each track/stream

// getDefaultExport function for compatibility with non-harmony modules

// getHighestPriorityLane because it requires the fewest operations.

// getModifierState. If getModifierState is not supported, we map it to a set of

// getSnapshotBeforeUpdate is called.

// gets it and catching keydown lets us fire an event for the first

// getter

// getter usage

// gives the codec type string

// go through the sei_rbsp parsing each each individual sei_message

// goes through Scheduler.

// going to wait for all of them anyway, it doesn't really matter

// gop.pts is greater than the last alignment candidate. If no match is found

// gopsToAlignWith = [],

// gopsToAlignWith was set before the GOP buffer was cleared

// grab all master attributes

// grab options passed to player.src

// grab the first seekable start after sorting, or if there are none

// grab the furthest seekable end after sorting, or if there are none

// grab the size of the entire frame from the ID3 header

// grap the new part of content that was just downloaded

// graphicsmode

// grep: vjs-layout-huge

// grep: vjs-layout-large

// grep: vjs-layout-medium

// grep: vjs-layout-small

// grep: vjs-layout-tiny

// grep: vjs-layout-x-large

// grep: vjs-layout-x-small

// group ID

// grow, but to avoid an O(n) walk for every task we execute, we don't

// hacks to make that not totally break. Like transferring effects and

// had one; that is, all the effects in the tree including the root.

// handle invalid times

// handle it.

// handle the aborted events from those requests, there are some cases where we may

// handle the case of a playlist object (e.g., if using vhs-json with a resolved

// handle the fallback state.

// handleChange() below needs to reference the dispatch function without re-subscribing,

// handleSourceOpen is also called when we are "re-opening" a source buffer

// handled by `completeUnitOfWork` or `unwindWork`, but since we're

// handler;

// handler_type: 'soun'

// handler_type: 'vide'

// handlers can run. See https://github.com/facebook/react/issues/708.

// happen after `updateDOMProperties`. Otherwise HTML5 input validations

// happen in live with a 3 segment playlist), then don't use a time delta

// happens when a Suspense component is hidden. An extra fragment fiber

// has a stable shape and so hopefully should be cheap to allocate.

// has ever gone from having children to deleting them or vice versa

// has had a chance to be set.

// has no effect after the first

// has no siblings nor a parent, we set it to null. Usually this is

// has no source

// has the same contentProtection

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// have any meaningful metadata

// have been (and was previously) designed to take a closure to be

// have counted all the frames

// have had an internalInstanceKey on it.

// have inline positioning and will function as the cue background box.

// have newProps so we'll have to reuse them.

// have not changed. Which is fine.

// have nothing better to go on

// have one on the alternate so we need to check in case this was a

// have received

// have set the values to before during the first pass. Ideally this wouldn't

// have the same media dimensions/ resolution

// haven't yet tested that, and prepending is how we have always done things.

// header size field

// height

// helpful for us so just check activeElement instead.

// here is increment the column cursor by the given offset.

// here this.track_ refers to the new track instance

// here this.track_ refers to the old track instance

// heuristic to decide which lanes to attempt to render, and in which batches.

// hide mute toggle button if it's not supported by the current tech

// hide the poster when the user hits play

// hide this control if volume support is missing

// hide volume controls when they're not supported by the current tech

// hide volume panel if neither volume control or mute toggle

// higher priority.

// higher-level constructs such as frames and gops

// holds an emoji character like `\uD83D\uDE0A`.  Because its length

// hook up the audio segment stream to the first track with aac data

// hook up the segment streams once track metadata is delivered

// hook up the video segment stream to the first track with h264 data

// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

// horizresolution

// host node but that wouldn't work for React Native and doesn't let us

// hotkeys handling.

// hotkeys. We do not preventDefault here because we _want_ the browser to

// how <noscript> is being handled. So we use the same document.

// however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)

// however, VTTSegmentLoader has no need of a media source, so delete the reference

// however, few browsers have support for setLiveSeekableRange()

// however, the audio continued playing until it reached ~3 seconds past the gap

// however, the player time values will reflect a start from the baseMediaDecodeTime.

// http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g

// http://a.com/b/cd + /e/f/../g => http://a.com/e/g

// http://dvd.sourceforge.net/dvdinfo/pes-hdr.html

// http://fb.me/prop-types-in-prod

// http://id3.org/id3v2.3.0#ID3v2_frame_overview

// http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object

// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes

// http://www.gpo.gov/fdsys/pkg/CFR-2010-title47-vol1/pdf/CFR-2010-title47-vol1-sec15-119.pdf

// http://www.nonblocking.io/2011/06/windownexttick.html

// http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://bugs.chromium.org/p/v8/issues/detail?id=8538

// https://bugzilla.mozilla.org/show_bug.cgi?id=208427

// https://code.google.com/p/chromium/issues/detail?id=103041

// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

// https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange

// https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem#Exceptions

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developers.google.com/web/updates/2017/01/scrolling-intervention

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// https://en.wikipedia.org/wiki/Office_Open_XML_file_formats

// https://en.wikipedia.org/wiki/Zip_(file_format)#File_headers

// https://github.com/amilajack/eslint-plugin-flowtype-errors/issues/133

// https://github.com/dbry/WavPack/issues/71#issuecomment-483094813

// https://github.com/facebook/react/issues/11768

// https://github.com/facebook/react/issues/11918

// https://github.com/facebook/react/issues/12502

// https://github.com/facebook/react/issues/12506

// https://github.com/facebook/react/issues/13188

// https://github.com/facebook/react/issues/14365

// https://github.com/facebook/react/issues/16585

// https://github.com/facebook/react/issues/16734

// https://github.com/facebook/react/issues/19099

// https://github.com/facebook/react/issues/19651

// https://github.com/facebook/react/issues/3877

// https://github.com/facebook/react/issues/7253

// https://github.com/leetreveil/musicmetadata/issues/84

// https://github.com/react-dnd/react-dnd/issues/1310

// https://github.com/threatstack/libmagic/blob/master/magic/Magdir/matroska

// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

// https://github.com/videojs/video.js/issues/3180

// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl

// https://html.spec.whatwg.org/multipage/embedded-content.html#steps-to-expose-a-media-resource-specific-text-track

// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd

// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

// https://infra.spec.whatwg.org/#ascii-tab-or-newline

// https://infra.spec.whatwg.org/#c0-control-or-space

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume

// https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5

// https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-4.3.2.5

// https://tools.ietf.org/html/draft-pantos-http-live-streaming-23#section-6.2.3

// https://tools.ietf.org/html/rfc6381#section-3.3

// https://url.spec.whatwg.org/#url-parsing

// https://v8.dev/blog/elements-kinds#avoid-creating-holes

// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts

// https://wiki.multimedia.cx/index.php/RIFF

// https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html

// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream

// human readable value of progress bar (time complete)

// hydrated it yet. Even though we leave the comments in the

// hydration parent is the parent host component of this host text.

// iOS 7 safari for instance cannot do this.

// iOS Safari has broken hover handling

// iOS7 doesn't dispatch change events to TextTrackLists when an

// iTunes gap-less flag

// id

// id3v2.3

// id3v2.3 defines that TCOM, TEXT, TOLY, TOPE & TPE1 values are separated by /

// id3v2.4

// ideally we should send only video and audio in the data event

// identities match.

// ie8 doesn't parse the URL correctly until the anchor is actually

// if I do. eslint-disable-next-line no-fallthrough

// if Widevine key attributes are valid, store them as `contentProtection`

// if `el.src` is set, that source will be loaded.

// if `null` was passed, we want to disable the ResizeObserver

// if a Content Security Policy forbids using Function, but in that case

// if a caption was being displayed, it's gone now

// if a component just imports ReactDOM (e.g. for findDOMNode).

// if a new packet is starting, we can flush the completed

// if a slice of the total duration is not requested, use

// if a source was passed in then it is invalid because

// if a sourceset happens before a `loadstart` there

// if a track should show by default and the display hadn't loaded yet.

// if all the configuration is ready, initialize and begin loading

// if an adaption field is present, its length is specified by the

// if another player was fullscreen

// if another watcher is going to fix the issue or

// if audio group changed reset audio loaders

// if autoplay is a string we pass false to the tech

// if autoplay is enabled, begin playback. This is duplicative of

// if bandwidth was not set by options or pulled from local storage, start playlist

// if both SegmentTimeline and @duration are defined, it is outside of spec.

// if both are undefined

// if children contains a non-element object. We should try to avoid that.

// if control-flow has arrived here, then the error is real

// if data_alignment_indicator is set in the PES header,

// if decodeURIComponent/escape fails, we are dealing with partial

// if dragend handler does something like showing an alert.

// if evented is anything except false, we want to mixin in evented

// if it has not been computed yet.

// if it is not a native list

// if it's been set to something different to the doc

// if it's pinged, assume it's CPU-bound. Compute a new expiration time

// if it's the same type, continue down the current chain

// if load was called, but there was no source to fire

// if locations isn't set or is an empty array, exit early

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if muted defaults to true

// if mwFactory is a string, then we're at a fork in the road

// if no explicit duration was declared, use the target duration

// if no playlists have role "main", mark the first as main

// if not paused, queue a buffer check as soon as possible

// if not video or audio, it is timed-metadata or unknown

// if nothing has changed then don't resubscribe

// if only mute toggle is visible we don't want

// if present, use the duration specified in the playlist

// if setSource isn't present, implicitly select this middleware

// if shouldComponentUpdate returns false.

// if size > 31, handle error

// if someone has already defined a value or Safari, then bail

// if start was set once, keep using it

// if subtitle group changed reset subtitle loaders

// if that one is still mounted.

// if the `sourceset` `src` was an empty string

// if the audio playlist loader exists, then alternate audio is active

// if the base URL is relative then combine with the current location

// if the codecs were explicitly specified, use them instead of the

// if the component re-renders for a different reason and by that

// if the computed value is still 0, it's possible that the browser is lying

// if the currently rendering lanes are inclusive of the pending mutation

// if the entire frame has not arrived, wait for more data

// if the event has been aliased then we need to clean it before

// if the first item in each historyItem includes `fname`, then it's a match

// if the global option object was accidentally blown away by

// if the length and every pair is the same

// if the loader was in the process of switching media, it should either return to

// if the media initialization segment is changing, append it before the content

// if the media sequence is greater than 2^32, the IV will be incorrect

// if the player/tech is not ready or the src itself is not ready

// if the playlist is too short and the seekable range is an exact time (can

// if the previous middleware terminated, pass along the termination

// if the previous render was null (so the the container would already be empty).

// if the seek location is already buffered, continue buffering as usual

// if the timestamp offset changed, the timeline may have changed, so we have to re-

// if the track still has audio at this point it is only possible

// if the update could overlap existing segment information, merge the two segment lists

// if the user sets this track to selected then

// if the value is a valid string set it to that

// if the vhs-json object included the media playlist, use the media playlist

// if the video has not yet played once, and we already have

// if the video is already playing, or if this isn't a live video and preload

// if the viewer has paused and we fell out of the live window,

// if there are any packets waiting for a PMT to be found, process them now

// if there are no enabled playlists, then they have all been blacklisted or disabled

// if there are no sources, do not fire sourceset

// if there is no @duration attribute, use the largest segment duration as

// if there is no match of exact resolution

// if there is no tracker at this point it's unlikely

// if there is plenty of content buffered, and the video has

// if there isn't a player or there isn't a qualityLevels plugin

// if there's an error, report it

// if there's only one audio track, there no point in showing it

// if this is just filler, return immediately

// if this is segment-level data attach the output to the segment

// if this is the audio segment loader, and it hasn't been inited before, then any old

// if this is the last segment in the playlist

// if this isn't a live video and preload permits, start

// if this looks like a ts segment but we don't have enough data

// if this request included a segment key, save that data in the cache

// if this request included an initialization segment, save that data

// if time isn't a finite number between 0 and Infinity, like NaN,

// if unknown, streamType will be undefined

// if vhs-json was provided as the source, and the media playlist was resolved,

// if we already downloaded the sidx bytes in the container request, use them

// if we are a text track change event, we should also notify the

// if we are in Safari, there is a high chance that loadstart will trigger after the gesture timeperiod

// if we cannot overwrite the src/innerHTML property, there is no support

// if we changed fullscreen state and we're in prefixed mode, trigger fullscreenchange

// if we cleared out all timeouts for the current target, delete its map

// if we do not know if the main segment loader contains video yet or if we

// if we don't have a playlist yet, keep waiting for one to be

// if we don't have a tech then we do not queue up

// if we don't have too.

// if we encounter an updateend without a corresponding pending action from our queue

// if we ever do those wrong, this throw will surface the error in our tests.

// if we get a negative returnSize clamp it to 0

// if we have a audio track, with a codec that is not set to

// if we have a playerSrc that is not a blob, and a tech src that is a blob

// if we have a source and get another one

// if we have a video track, with a codec that is not set to

// if we have an mwFactory, call it with the player to get the mw,

// if we have any unsupported codecs blacklist this playlist.

// if we have matching source els but not matching sources

// if we have not yet loadTech_, we create {video,audio,text}Tracks_

// if we have the exact resolution as the player use it

// if we have yet to precompute the S-box tables

// if we only use three arrays to process all the categories of

// if we were able to base our duration estimate on timing

// if we were to get a change event on a non-remote track and

// if we were unpaused but waiting for a playlist, start

// if we were unpaused but waiting for a sourceUpdater, start

// if we're a child of a dehydrated container, we need to first

// if we're in the middle of processing a segment already, don't

// if we're not going to limit renditions by player size, make an early decision.

// if we've buffered to the end of the video, we need to call endOfStream

// iframe.contentDocument.defaultView;

// ignore PNG signature

// ignore duplicate control codes; the spec demands they're sent twice

// ignore events that don't look like ID3 data

// ignore it because `didError` will be false, as described above.

// ignore matrix structure: 36 bytes

// ignore payload

// ignore reserver: 10 bytes

// ignore this bit of metadata.

// ignore this error: work-around if last OGG-page is not marked with last-page flag

// ignore unknown stream types

// ignores it.

// immediately after.

// immediately flush them.

// immediately in some browsers.

// immediately, wait for more data to arrive.

// impact.

// implement a very limited played()

// implementation so that we don't have to check for their existence in the

// implementation using setTimeout.

// implementations of a working draft specification.

// implemented

// implemented in any major browser. Only KeyPress has charCode.

// important for decoding the next segment

// important information required for the construction of

// important to get this right, even though it requires care.

// improve the accuracy of manual timeupdates

// in Chrome audio will continue to play for ~3s when we run out of video

// in DEV mode if this property exists or not and warn if it does not.

// in IE and Edge, but seeking in place is sufficient on all other browsers)

// in LIVE, we always want to update with new playlists (including refreshes)

// in Players.players. So, we must loop through and verify that the value

// in VOD, this is always a rendition switch (or we updated our syncInfo above)

// in `handleAppendsDone_` after the segment has been successfully appended

// in a batch that does not also include the other lane. Typically we do this

// in case runtime.js accidentally runs in strict mode, we can escape

// in case the event system needs to trace it.

// in case they schedule additional work.

// in every case, so we don't have to touch the arguments object. The

// in fallback state. Then we render each row in the tail one-by-one.

// in firefox

// in iOS when a player is loaded with muted attribute

// in non-IE11 browsers. In IE11 this is too early to initialize media keys

// in order to determine if it's an fmp4 we need at least 8 bytes

// in order to provide more accurate timing information about the segment, save

// in our config atm.

// in raw AAC, all subsequent data will be timestamped based

// in some cases this will be empty string

// in some versions of iOS muted property doesn't always

// in that browser completely in favor of doing all that work.

// in that case, we need to prime the video element by calling load so it'll be ready in time

// in the "together" mode, so we can continue from the state we had.

// in the bubble phase, so we need to accumulate two

// in the case of an entirely constructed manifest object (meaning there's no actual

// in the cell to fill the remaining space of the table.

// in the concurrent tree already suspended during this render.

// in the cumulative average

// in the function makes it easier to test cases where console doesn't exist

// in the legacy event system, except the big difference between

// in the m3u8 for us to use

// in the meantime, we can add/remove/change items and dependencies.

// in the previous segment. Check for that case and ensure the start time is

// in the same tick for the source element, and browser freaks out.

// in the stack.

// in this optimized path, mostly pushing stuff onto the stack.

// in those segments, a viewer will never experience a rendition upswitch.

// in-progress render.

// include every environment we run tests in), so the test framework

// include the fallback deletion effect.

// included in the current render. Usually, the priority level of the

// including any interleaving updates that occur.

// incompatible configurations

// incompatible configurations or playback errors

// incomplete PES packets due to poor segmentation

// inconsistencies. Calling `techWaiting_` here allows us to simulate

// incrementally decrypt the segment

// increments the column cursor by 4, so we can get the desired

// increments, with an additional offset code of 1-3 to reach any

// index

// indicate that it still has pending work.

// indicate we didn't find a useful duration estimate

// infinite loop, because it iterates over the newly added props too.

// inflate our estimates of bandwidth. In the future this should be re-examined to

// info to the AudioSegmentStream, if it exists, because video timeline

// info), but not before then.

// information

// information for and save that information for sync purposes

// information provided directly from the Media Source, return

// information that is earlier than endSequence

// information yet to start the loading process (e.g., if the audio loader wants to

// inherited deeply down the subtree. The upper bits only affect

// initial commit.

// initial playlist, and let the normal flow continue from there.

// initial sources

// initial timestamp offset is 0

// initial value. In IE10/IE11 there is a bug where the placeholder attribute

// initialize the loader state

// initializeMediaKeys also won't use the webkit-prefixed APIs.

// initialized. Since we know we're in Chrome, we'll just detect this case

// initializing the plugin

// injected easily by `bin/regenerator --include-runtime script.js`.

// insert the new rendition

// insert the shortest possible amount (audio gap or audio to video gap)

// insert the tag as the first child of the player element

// insertElFirst seems to cause the networkState to flicker from 3 to 2, so

// inserted into the React tree here. It just happens to not need DOM

// inserted, before any life-cycles like componentDidMount gets called.

// inserted.

// inside a blocking mode tree. If the Suspense is outside of it, we

// inside a non-concurrent tree, in an inconsistent state. We want to

// instance.

// instance. Note that we don't check this field on  the targetNode

// instead of doing a copy to save memory

// instead of tuples.

// instead of videojs(id, { children: { controlBar: false });

// instead to prevent unintented scrolling.

// instead.

// integer

// intentionally not calling those, we need set it here.

// intermediate loading state. So we use heuristics to determine when.

// intermediate object creation for the common case of a

// internal queue

// interpret any video track with a baseMediaDecodeTime that is

// interprete each group as a key/value pair separated by 'keyValueDelim'.

// interpreted as UTf-8.

// interpreted as an absolute URL and we are done.

// interrupt deletion, so it's okay

// intersection of the two

// into a `fullscreenchange` event

// into the async generator function so it can be handled there.

// into the overlay which should be a block level element (usually a div).

// into this ASAP package. It was later adapted to RSVP which made further

// invalidates the heuristics of the event plugin. We

// invariant for a missing parent, which is super confusing.

// invocations of the iterator.

// invoke the done() callback when everything is finished

// invokeGuardedCallback uses a try-catch, all user exceptions are treated

// invoked without arguments, but in all the cases we care about we

// is 2, the property `which` does not represent an emoji correctly.

// is a list of axis, the order of which, it will move the box along. For example:

// is a new ref we mark this as an update. All the work is done in commitWork.

// is able to screenshot the current (not yet dragging) state.

// is always our zero-time so force a sync update each time the playlist

// is changed from JS so we redefine a setter for `.value` that updates

// is created synchronously, otherwise a store update may occur before the

// is currently timed out, too.

// is currently within a buffered region before attempting a corrective seek.

// is dragging) or in focus we do not want to hide the VolumeBar

// is dragging) we do not want to hide the VolumeBar

// is inserted in between the Suspense fiber and its children. Skip

// is just-larger-than the video player

// is larger than the estimated time until the player runs out of forward buffer

// is necessary.

// is not mp3 data but aac data.

// is not provided as part of the manifest should be considered, and an appropriate

// is not resilient to the DOM state changing so we don't do that here.

// is nothing to do as this `handleTechSourceset_`

// is often used for testing purposes.

// is placed in the cuetext.

// is re-rendered, the selectors are called again, and

// is ready to append that segment before requesting and downloading:

// is ready to be processed or not, isolating the queueing behavior to the loader.

// is refreshed from the server

// is the box that contains the StyleBox, such as a div. boxPositions are

// is to access a property that typically works for non-anonymous divs and

// is to add a scroll event listener that calls for a flush.

// is to tell small differences in time. Therefore, the longer we've already waited,

// is why the Promise constructor synchronously invokes its

// isBackwards

// isPendingTimestampOffset is set back to false after the first set of the

// isn't changing we want to reset. We cannot assume that the new rendition

// issue of live seekable ranges cited above.

// it

// it along the x axis in the negative direction.

// it and we'll lose our progress. We should only do this if the new lanes are

// it at the keypress level and bail immediately. Android Chrome

// it behind on this node.

// it can append.

// it can be sent as a "Transferable" and avoid the costly

// it cannot be shared with the current fiber.

// it causes problems. This is meant to give a nicer error message for

// it does not explicitly state whether the `traf` boxes themselves are contiguous.

// it doesn't make sense to restart only while in the period we're suspended.

// it for the first

// it from the child list so that we don't add it to the deletion

// it has changed

// it is emitted to the user. e.g. genre (20) -> Electronic

// it is made extraneous by the announcement of the control text

// it is no longer necessary to store `kind` or `kinds` on the track itself

// it is possible that no option is selected.

// it is removed from DOM and trigger endDrag manually.

// it later easily.

// it on the masterPlaylistLoader

// it should be regenerated.

// it should be stopped

// it using the ID of the original listener.

// it was filtered to a zero length Array. So we have to

// it will remove both because they both have the same guid.

// it would be great to allocate this array up front instead of

// it would have deleted the dehydrated boundary nested inside already.

// it would pause the execution at this line.

// it's already rendering, we won't interrupt it. This is intentional, since

// it's clearly an edge-case but don't thrown an error if asked to

// it's easier to simply treat all timeline changes the same.

// it's not part of the same transition once the transition has

// it's not practical to try every single possible combination. We need a

// it's sync, we still want to yield so that it can be painted.

// it, instead of erring the player or retrying this playlist, clear out the current

// it, on the update object. If the reducer hasn't changed by the

// it, so set the completion value of the entire function to

// it, we reset it along with everything else.

// it. If it has no children, this is still the first loop, and the only

// it. Using NoLane works because 0 is a subset of all bitmasks, so

// iterator prototype chain incorrectly implement this, causing the Generator

// its existence.

// its thennables. Instead, we'll transfer its thennables to the

// itself because the fibers are conceptually between the container

// itself should capture it.

// itself will be GC:ed when the parent updates the next time.

// itself. They will be added to the side-effect list as we pass through the

// itu_t_t35_contry_code must be 181 (United States) for

// itu_t_t35_provider_code should be 49 (ATSC) for captions

// jsdocs for instance/static members added above

// just useEffect instead to avoid the warning, since neither will run anyway.

// keep original time, can be adjusted if needed at a higher level

// keep running totals of these values

// keep track of the last seen segment's byte range end, as segments are not required

// keep track of the original for later so we can know if the source originally failed

// keep track of whether it suspended or not.

// keep track of whether the current source has played at all to

// key, when multiple keydown events are fired but only one keyup is.

// keys multiple times.

// keys quickly. Implicit (null) keys get added to this set with their index

// keystroke if user does a key repeat (it'll be a little delayed: right

// keyup, but we check on keydown as well in the case of holding down a

// kick off an additional segment request

// know how many should be ignored once we start receiving duplicates.

// known boolean attributes

// lane in the transition range.

// lanes in the same batch, but it's not worth throwing out partially

// lanes is a superset of the lanes we started rendering with.

// lanes, since that guarantees that the value we're about to read from

// last

// last error event is always used. If the callback actually does error,

// last four bytes of the ID3 header.

// last frame

// last rendered item.

// last segment

// last sibling.

// later and not trigger anything as the state now

// later functions will rely on for the initialization segment.  This is only valid

// layer

// layout effects, and so on.

// layout, but class component lifecycles also fire here for legacy reasons.

// lazily which won't cover if the log function was extracted eagerly.

// lazily.

// leave the full box header (4 bytes) all zero

// left in the tail. We'll just give up further attempts to render

// left padded with zeroes for single digit hex

// length

// length is different

// let the screen reader user know that the text of the element may change

// level idc

// level_idc u(8)

// libraries need to call batchedUpdates. Eventually, this API will go away when

// like `pendingMedia` in playlist loaders to check against that too. This will prevent us

// like a proxy to Context. This proxy object adds unnecessary code in PROD

// like caught exceptions, and the DevTools won't pause unless the developer

// like the control bar show themselves if needed

// likely unblocked. Try rendering again, at a new expiration time.

// line, that's a pretty good indicator that our sample threw at same line as

// line.

// list is not exhaustive. For a more comprehensive listing and semantics see

// list itself.

// list of the parent. The completion order of the children affects the

// list of tracks and searching for the appropriate mode value, so,

// list.

// list. PerformedWork effect is read by React DevTools but shouldn't be

// listen for fullscreenchange events for this player so that we

// listen for seeked event

// listen to document and player fullscreenchange handlers so we receive those events

// listener cancels out any reportedUserActivity when setting userActive(false)

// listener for reporting that the user is active

// listener has already been added previously. However, we

// listener on the target node.

// listeners added by techs that extend this.

// listeners could have broken dependent applications/libraries. These

// listeners still fire for all the media events.

// listeners still fire for error and load events.

// listeners still fire for the error event.

// listeners still fire for the invalid event.

// listeners still fire for the load event.

// listeners still fire for the toggle event.

// listeners.

// lists and take advantage of structural sharing.

// little endian

// live outside of this function.

// live playlist staleness timeout

// live window resyncs may be useful for monitoring QoS

// load a segment from the next timeline but the main loader hasn't yet crossed that

// load is usually pending the main loader appending new segments.

// load the first supported playback technology.

// load the media source into the player

// load this technology with the chosen source

// load via require if available and vtt.js script location was not passed in

// load vtt.js via the script location option or the cdn of no location was

// loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater

// loadedmetadata: newly equal to HAVE_METADATA (1) or greater

// loader should wait for audio to be ready to change its timeline so that both main

// loader's segments (or the content is audio/video only and handled by the main

// loader).

// loaders.

// locales and their language translations

// location

// location outside the try/catch block.

// locations where there is no enclosing try statement.

// log the name of the error type and any message

// log2_max_frame_num_minus4

// log2_max_pic_order_cnt_lsb_minus4

// logic may change behavior depending on the state, and changing state too early may

// lol @ IE not supporting String#repeat

// look at the current byte to determine if we've hit the end of

// looking for

// lower case chars

// lower priority turn.

// lower priority work to do. Instead of committing the fallback

// m3u8-parser does not attach an attributes property to media playlists so make

// machine readable value of progress bar (percentage complete)

// main manifest, or do nothing but trigger an event

// main reasons this is so complicated.

// main segment loader and not restart the audio loaders

// mainly used as a reference for debugging

// maintain codec case

// maintain extra degrees of precision.

// maintain functinality between segment loaders

// maintain functionality between segment loaders

// make a document fragment to hold the nodes from dummy

// make a dummy node to use innerHTML on

// make sure all the caches are set to default values

// make sure firstSourceWatch isn't setup twice.

// make sure only 1 track is enabled

// make sure player is still around to trigger

// make sure rgb are contained in a set of [0, 255]

// make sure sourceset isn't setup twice.

// make sure that `id` is copied over

// make sure that the close button is last in the dialog DOM

// make sure that we listen to fullscreenchange events before everything else to make sure that

// make sure the metadata queue is processed even though we have

// make sure there is ~3 seconds of forward buffer before taking any corrective action

// make sure to use the old src

// make sure we actually parsed captions before proceeding

// make sure we append init segment on playlist changes, in case the media config

// make sure we are dealing with uint8 data.

// makes debugging a little clearer.

// makes sense elsewhere

// makes the browser pass through the "text" unparsed

// making a request

// manifest object (instead of a URL). In the case of vhs-json, the default

// manifest on a server), default the uri to the page's href

// manifest.

// manipulation to avoid modifying the live DOM multiple times.

// manually remove the event handlers we added

// map pid to stream type for metadata streams

// map the browser API names to the spec API names

// mark start position, normally 0

// match everything inside parentheses

// match nothing as muxer does not support text right now.

// mathematical operations.

// maxBitrate

// max_num_ref_frames

// maximum tag key length

// maybe we want to continue warning if they don't exist, to preserve the

// mdat does not appear after the audio mdat

// mdat header

// mdhd is a FullBox, meaning it will have its own version as the first byte

// mdhd timescale

// mean more approximation)

// means `flushPassiveEffects` will sometimes result in additional

// means it has ended and the drag source node disappeared from DOM,

// meant to be awaited.

// mechanism to switch to other video tracks

// media playlist or, for the case of demuxed audio, a resolved audio media group)

// media source is not ready yet or sourceBuffers are already

// mediaBytesTransferred_

// mediaIndex is zero based but length is 1 based

// mediaRequestsAborted_

// mediaRequestsErrored_

// mediaRequestsTimedout_

// mediaRequests_

// mediaTransferDuration_

// member of intersection type." Whyyyyyy.

// memoized from props

// memoized props/state to indicate that this work can be reused.

// memoized state to indicate that this work can be reused.

// memory copy

// merge this playlist into the master

// messing up the order.

// meta has 4 bytes of padding, ignore

// method always terminates the yield* loop.

// middlewareSource is the source after it has been changed by middleware

// might be flawed or unnecessary.

// might match additional HTML that is hidden when we read it using

// might unsuspend it, and vice versa. The only reason to suspend is

// minifier not to mangle the names of these two functions.

// mirrors of them except middle instead of center on Safari.

// misidentified as a component to retain

// miss anything.

// missed a blur event somehow.

// mixing React radio buttons with non-React ones.

// mode

// modification_time

// modifications.

// modifier keys exposed by the event. In this case, Lock-keys are not supported.

// mono

// moov > trak > mdia > minf > stbl

// more than one track at a time) we will set changing_

// most significant bits and then multiply by 4 (equal to a left-shift

// mounted but this is a new fiber.

// mounted fiber is the parent but we need to continue to figure out

// move currently displayed captions (up or down) to the new base row

// move over init segment properties to media request

// move properties over from our custom `video-js` element

// move this assignment out of the common path and into each branch.

// move to the next table entry

// moved from outside the window (no target) onto the target once it hydrates.

// ms-prefixed APIs on Edge should prevent this from being a concern.

// multiple ons, but one off for everything

// multiple times for a "single" change. One for enabling the new active track, and

// multiple times, provide a shared state object

// must be in seconds. Since we've generated the segment list, we no longer need

// mustUseProperty

// mutated. We have already warned for this in the past.

// mutation observers, so that implementation is used instead.

// mutations because it already exists.

// mutations that haven't been synchronized yet.

// muted, defaultMuted, autoplay, controls, loop, playsinline

// mux.js support regex

// muxed content only relies on video timing information for now.

// name atom (optional)

// name function of the component

// name warnings.

// native HLS is definitely not supported if HTML5 video isn't

// native tracks don't have this

// necessary until the next `flush` completes.

// necessary.

// necessary. Instead, we should only append on changes, similar to what we've always

// need an additional field on the work in progress.

// need to clear out any cached data to prepare for the new segment

// need to delete the existing child.

// need to dispatch in order.

// need to increase our initial position by the length or width of the

// need to validate that the fiber is a host instance, otherwise

// needed.

// negative @r repeat value?

// nested `invokeGuardedCallback` calls do not clash. Otherwise, a

// nested call would trigger the fake event handlers of any call higher

// nested within a dehydrated boundary and if so, which one.

// never be thrown again.

// never been filled.

// never bubble through the *DOM* tree unless an ancestor with onclick

// never changes.

// never get an aborted event. For instance, if the network connection is lost and

// never get updated.

// new gop at the beginning

// new markup in a temp node and then move the child nodes across into

// new. If a row has multiple Suspense boundaries, any of them being in the

// next activityCheck

// next segment

// next state before entering the render phase. If the new state is the

// nextEffect pointers to assist with GC. If we have passive effects, we'll

// no codecs means that the playlist was excluded

// no codecs, no playback.

// no consecutive self refs (.b.b); that is a precedence boost and treated differently

// no effect? this.commonOrigin[tag.id] = prio1;

// no match

// no media playlist was specifically selected so select

// no media playlist was specifically selected so start

// no media source/source buffer or it isn't in the media sources

// no more pending effects.

// no need to quote tokens

// no point in updating if it's the same

// no removal because end of remove range is before start of buffer

// no segment to append any data for or

// no video/audio data.

// node and the first child. It isn't surrounding the container node.

// node from the tree.

// node has fully mounted yet, and for scheduling event replaying.

// node that is from the other tree.

// node that we're free to reuse. This is lazily created to avoid allocating

// node.

// node. Unfortunately, if multiple insertions are done in a row we have to

// non-alphabetical order. Handling that would require sorting CSS

// non-audio track volume

// non-interactive elements, which means delegated click listeners do not

// non-matching targets.

// non-printable. One would expect Tab to be as well (but it isn't).

// non-video PES packets MUST have a non-zero PES_packet_length

// non-zero as a gap.

// nonDelegatedEvents list in DOMPluginEventSystem.

// noop

// noop as we shouldn't be getting video/audio data captions

// nor polyfill, then a plain number is used for performance.

// normal children even if their identities match.

// normal flow, and needs an explicit trigger here.

// normalized. Since it only affects IE, we're skipping style warnings

// normally do.

// not 3gp data

// not a valid currentTime.

// not as a fragment. Nested arrays on the other hand will be treated as

// not defined.

// not have a clone, that means it wasn't processed, and the updates were

// not in the capture phase. That's because we emulate

// not measuring part of the render phase, but this makes it match what we

// not on done events. Clear out the buffer to keep that consistent.

// not on the rendition playlist. This is mostly the case for DASH, where audio and

// not part of the same transition once the transition has committed. If

// not setting `src=''` because that throws an error

// not setting timeout on the xhr object, because of old webkits etc. not handling that correctly

// not supported

// not sure if this is the best place for this

// notch on the scroll is always +/- 120, roughly equivalent to pixels.

// note more granular states.

// note that the frame cache may also protect us from cases where we haven't

// note that we're potentially using the same timestamp offset for both video and

// nothing should rely on this, but relying on it here means that we don't

// nothing to do

// now remove immediately so native controls don't flash.

// now unblocked. This first might not actually be unblocked yet.

// now we add all of that html in one by appending the

// now with segment timing information

// null and keep rendering. In the commit phase, we'll schedule a

// numOfPictureParameterSets

// numOfSequenceParameterSets

// number

// number of full frames in the audio gap

// numbers

// numpad keys

// object and shouldComponentUpdate will always return true.

// object before we construct the xhr request

// object should have default code and message properties. The default message

// object to not be returned from this call. This ensures that doesn't happen.

// object to signal that a request has timed out instead

// object type

// objects. For full spec compliance, you may wish to configure your

// obnoxiously named function :)

// obtained) init segment

// of 2) before we add the final 2 least significant bits of the

// of DevTools integration and associated warnings and logs.

// of a sync sequence

// of gopsToAlignWith starting from the END of the list

// of gopsToAlignWith starting from the START of the list

// of priority this work has the same priority as this current render,

// of roll-up rows set.

// of setting a boolean on the request object

// of the 32 columns specified by CEA-608. So all we need to do

// of the effect list for each phase: all mutation effects come before all

// of the existing task is the same as the priority of the next level that the

// of the player in a way that's still overrideable by CSS, just like the

// of the player. We calculate any gap between the left edge of the player

// of the player. We calculate the number of pixels from the `seekBarPoint`

// of the polyfill.

// of the preceding one.

// of the prior segment, the seekToTime doesn't need to account for any transmuxer

// of the tech do not support source handlers

// of this function.

// off browser.

// offset must be passed to the transmuxer for stream correcting adjustments.

// offset_:  char0 for tab offset codes

// offset_for_non_ref_pic

// offset_for_ref_frame[ i ]

// offset_for_top_to_bottom_field

// ok not to if the visible content is still enough to indicate what

// old media source and creating a new one, but it will take some work.

// on `loadedplaylist`

// on `mediachange`

// on a fiber.

// on any nested boundaries to let them know to try to render

// on bandwidth and download time

// on browsers which return a promise

// on each queue this loader is responsible for to ensure that the appends are

// on how they are encoded, see

// on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`

// on initial ready we have to trigger source set

// on it

// on the client side because the browsers are inconsistent. Instead we call focus().

// on the edge opposite of the axis direction passed. For example, if "+x" is

// on the first sourceset, we need to revert our changes

// on the manifest to emulate Widevine tag structure in a DASH mpd

// on the next seek remove the replay button

// on the player when they happen

// on the root.

// on the same list as effects. We want to keep the effects from the primary

// on the source buffer during subsequent appends

// on the value of this frame

// on trigger so that it does not mess up the order

// once multi-period is refactored

// once we know the file is VBR attach listener to end of

// one as a new cue.

// one below.

// one does not already exist for the lanes we're currently rendering (which

// one for disabling the track that was active

// one init segment to another if the video

// one is updating (and give the player a chance to re-adjust to the

// one or both loaders has not loaded sufficently to get codecs

// one or the other is undefined

// one segment downloaded do nothing

// one so we'll settle for GC:ing the subtree of this child. This child

// only add tracks that are of an appropriate kind and have a label

// only additional allocation required is the completion record, which

// only audio will play for the duration of our transmux.

// only change to audio type if the only codec we have is

// only codepath.)

// only count valid/non-duplicate source elements

// only emit packets that are complete. this is to avoid assembling

// only ever need at most two versions of a tree. We pool the "other" unused

// only examine SEI NALs

// only exclude playlists by codec change, if codecs cannot switch

// only know how to parse mp4 init segments at the moment

// only map a single elementary_pid for audio and video stream types

// only place where it should not be deduped is for ms-prefixed APIs, but the early

// only push to the frames array when currentFrame is not empty

// only push to the gops array when currentGop is not empty

// only seek if we still have not played

// only set up EVENT_MAP if it'll be used

// only store 1000 history entries

// only support one track of each type for now

// only update the source cache when the source

// opportunity later. So we mark this render as having a ping.

// opportunity to paint.

// option and select we don't quite do the same thing and select

// option to rely on it in the future?

// optional values will be: duration, size, compositionTimeOffset

// optionally, request the associated media init segment

// optionally, request the decryption key

// options object:

// or 1 to no : 1, of : 0

// or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)

// or a finally block) gives us a place to store values thrown from

// or boolean value assignment. Regular attributes that just accept strings

// or canceled due to a timeout

// or captions.)

// or completeWork depending on whether we want to add them top->down or

// or full non string data. Just return the potentially garbled string.

// or if we're handling partial data, we need to ensure the transmuxer is cleared

// or not, return the runtime object so that we can declare the variable

// or one or the other is undefined

// or qualityLevels_ listeners have already been setup, do nothing.

// or the media source does not contain this source buffer.

// or there are listed playlists (the case for DASH, as the manifest will have already

// or this:

// or until the end of the playlist."

// or we need at least two bytes after an id3Offset

// or, if something suspended, wait to commit it after a timeout.

// order may not be the same as the new order. We use the new order.

// order.

// original foundation for this library.

// other events and have it go through ReactBrowserEventEmitter. Since it

// other expected methods like isPropagationStopped. Seems to be a problem

// other falsey values will throw errors

// other nodes in them. We also ignore components with pure text content in

// otherwise `mousedown` should be enough for a button

// otherwise extend cue until a CUE-IN is found

// otherwise it won't capture incoming events that are only

// otherwise request sidx bytes

// otherwise use the setter to validate and

// otherwise we won't suspend.

// otherwise, we want to go down the new chain

// our activeElementValue variable, allowing us to ignore those changes

// our isFullscreen method is updated properly for internal components as well as external.

// our reported seekable range, seeks will work as expected. The large number as

// ourselves to this constraint, though. If the behavior diverges, we should

// out before we start adding more data

// out empty kinds.

// out known bad ones like `onclick`. We can't suggest a specific replacement though.

// out-of-date in this scenario

// outer generator.

// over and traverse parent path again, this time treating the exception

// over this extra fragment fiber and proceed to the next parent.

// overall buffer: 0 => 10.1, 10.2 => 20

// override settings for metadata only segments

// overriding native HLS only works if audio tracks have been emulated

// overwrite any existing program map table

// overwritten while composition continues.

// packet

// packet_flag: buf.readUInt8(off + 5),

// page's first load. Thankfully, this version of Safari supports

// paint-on mode

// painted. Conceptually, this is really the same as pinging.

// parent boundary that hasn't above this one so we need to find

// parent re-rendered without this component and we're about to unmount.

// parse assembled packet's PES header

// parse color string to rgb

// parse offset-table

// parse one or more ID3 frames

// parse out CC data packets and save them for later

// parse out the cc_data_1 and cc_data_2 fields

// parse out the user data payload

// parse parameters

// parse the IV string into a Uint32Array

// parse the description and URL fields

// parse the final nal

// parse the rest of the packet based on the type

// parse the sei

// parse the text fields

// parsing rules -- if we're down here, then none of those matched and

// parsing this ID3 tag so set those values now

// part of the second pass. In that case nothing will subscribe to

// pass entirely and go straight to rendering the fallback. (In Concurrent

// pass host context to this method?

// pass null in place of where we usually pass the current child set. This has

// pass the Container node as the targetNode, you will not actually get the

// pass the inline option down to the VolumeControl as vertical if

// pass through beginWork to rerender all children (including the tail) with

// pass to any Profiler onRender() hooks. This also provides DevTools with a

// passed and the box is overlapping on the left edge of the container, then

// passed in

// passed inline.

// passed through to selectorFactory

// passed-in reference and easier access

// passing null.

// passing the value through getToStringValue first.

// passive by default on document. React doesn't bind them

// passive effects. So we need to keep flushing in a loop until there are

// past.

// path from the normal path. I'm tempted to do a labeled break here

// path to compute the correct tail.

// pause before seeking as video.js will restore this state

// pause, load, play

// paused, currentTime, buffered, volume, poster, preload, error, seeking

// pending level.

// pending request is cleared

// pending time is whatever is left on the root fiber.

// pending updates to the end of the list and keep processing.

// pending work.

// performance.now returns a float, representing milliseconds. When the

// performs all bitwise operations on 32-bit integers but javascript

// permits, start downloading segments

// pes_header_data_length specifies the number of header bytes

// phase event listeners (via emulation).

// phase event listeners.

// phase introduces a potential mistake where we suspend lanes that were

// phase, which we are now aborting. Remove the updates from the queues so

// phase. They should be discarded if the render is aborted. Therefore,

// physical keyboard key.

// pid is a 13-bit field starting at the last bit of packet[1]

// pinged or updated while we were rendering.

// place our cache into shared context so it'll persist between HMRs

// placeholder and without scheduling a timeout. Delay indefinitely

// placement for inserting new children.

// plaintext

// play was terminated if the returned value is null

// playback has started, which triggers the live display erroneously.

// played, networkState, readyState, videoWidth, videoHeight, crossOrigin

// player instance. If so, return that.

// player is now responsive.

// player properties first, and can't use `this` before `super()`

// player.triggerReady is always async, so don't need this to be async

// playing and pausing synchronously during the transition to fullscreen

// playing for ~3 seconds after the video gap starts. This is done to account for

// playing state.

// playlist doesn't have enough information to determine whether we are stuck

// playlist loader

// playlist loader for the audio group), we want to do a destructive reset of the

// playlist loader setups from media groups will expect to be able to pass a playlist

// playlist loader will not return media if it has not been fully loaded

// playlist yet. This is determined by the existence of loader.media_

// playlist, and if `BUFFER_LOW_WATER_LINE` is greater than the duration availble

// playlist, we can leave the old reference and just lose the timing info

// playlist-level duration indicators when they're present

// playlist. Discontinuities and track changes are handled in other sections.

// playlist. This is needed for users relying on the retryplaylist event to catch a

// playlists do not contain their own source URI, but one is needed for consistency in

// please ensure we do the following:

// plugin (BeforeInput, Change, Select). The state in

// plugin. However, the plugins below either expect

// point

// point will be set to a small number, e.g. 1. The user then seeks backwards over the

// point would mean that this was the perfect segment to fetch

// portion of the segment (meaning that we have only recieved meta-data

// position of the cue box. The reference edge will be resolved later when

// position.

// possible for anything else to have happened in between our callback

// possible that the main loader will cross two timelines before the audio loader has

// possible to detect changes to the mode attribute and polyfill

// possible. If it's not a ParsingError then throw it like normal.

// possibly be a whole packet, keep it because it might be the start of a packet

// post mount to force it to diverge from attributes. However, for

// potential round trip time of the new request so that we are not too aggressive

// pre-calculate constants

// pre_defined

// precedence over all the other tracks.

// prefix operator or function

// premature removal of the waiting class, wait for the time to change.

// prepare for the next URI

// presortIndex that we can use to ensure we get a stable-sort

// prettier-ignore

// prevent a bail out.

// prevent dispose from being called twice

// prevent iOS Safari from disabling metadata text tracks during native playback

// prevent the div from affecting layout

// prevent the event from propagating through the DOM and triggering

// prevent the event from propagating through the DOM and triggering Player

// prevent the percent from changing at the live edge

// prevents this from causing an error after dispose

// previous segment

// previously was rendered in its fallback state. One of the promises that

// primary children. In mutation mode, we also need the flag to

// primary tree will commit in an inconsistent state, so when we do the

// printable characters (normalized to `Unidentified`), ignore it.

// priority as an argument to that function and this one.

// priority for this boundary.

// priority over other events including IO, animation, reflow, and redraw

// priority this work has the same priority as this current render, it's

// priority without also including the lower priority updates. This works well

// priority, timing-wise, so we must wait

// priority. Bailout.

// priority: the bailed out fiber's child reuses the current child.

// private frame

// private instance variables

// private settings

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),

// problems, please detail your unique predicament in a GitHub issue.

// process the abstract event manually.

// process them now.

// processUpdateQueue, but that didn't happen in this case because we

// processed.

// processing to allow it to go through first.

// profile idc

// profile_compatibility

// profile_idc

// profiler durations.

// program element descriptors"

// project, and the +json suffix identifies the structure of the media type.

// proper Unicode equivalent. The first keys that are only a single byte

// properties are accessed. The only seemingly possible way to avoid erroring

// properties in the client & server versions or applying

// properties when it's removed from the dom

// properties:

// property

// property can be overriden by passing in a message parameter.

// property, it may be the creator of the child that's responsible for

// propertychange on the first input event after setting `value` from a

// props have not changed. If false, the selector will always return a new

// props.

// provide a buffer of .1 seconds to handle rounding/imprecise numbers

// provided all of the details necessary to generate the audio playlist, as opposed to

// provides a surprisingly accurate mapping for US and European users.

// pts value for current time + 3 seconds to give a bit more wiggle room

// public for test

// public properties

// pull out the words of the IV to ensure we don't modify the

// push all active track cues

// push offset forward one +  4 byte timestamp

// push the final Gop

// pushHostContext() only pushes Fibers that provide unique contexts.

// pushed data for the entire first or last frame yet

// queue -> linked list of updates. After this render pass, we'll restart

// queue actions until both are available and the media source action can process.

// queue if the exception handled by Node.js’s

// queue is a singly-linked list with no cycles, we can append to both

// queue up a call to play on `ready` or `loadstart`

// queueing is accummulative.

// raise warnings and prevent the new value from being assigned.

// raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR

// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR

// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR

// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR

// rare, but as a last resort, pick a default lane. This will have

// rarely, since we try to avoid it) updated during the render phase.

// rather than attributes. These are all booleans.

// rather, it wraps around an inner component, which may or may not

// rawAsap provides everything we need except exception management.

// re-expose some internal objects for backwards compatibility with < v2

// re-initializing custom elements if they exist. But this breaks

// re-render a fallback. This is temporary until we migrate everyone to

// reach back into the player for options later.

// reach the max position.

// react-dom is used with production (non-profiling) bundle of

// readyState is 0, so it must be delayed until the tech fires loadedmetadata.

// really starts. To get around this, full segment appends should probe for the info

// reasons:

// reassemble the packet

// received and ignore everything with a dts before that. However, since

// received we consider it an emitted track for the purposes of coalescing

// recent event, and we assume time is monotonically increasing.

// recent mutation.

// reclaim the extra memory if needed.

// recommended filename extension for Ogg Opus

// recommended filename extension for Ogg Speex

// reconciliation

// record like context.tryEntries[i].completion. This interface could

// record the map on the packet as well

// record the time that we receive the first byte of data

// record the track config

// recoverable errors.

// recreated.

// recursive case

// recursively calls this function to bubble the event up the DOM.

// recursively search for the next box along the path

// reduce size and overhead. The separate object references context via

// reducer returns their initial state. This effectively populates

// ref objects should be passed straight through without wrapping

// refer to itself by name.

// reference it.

// references between the player and the plugin instance and nulling out

// refresh live playlists after a target duration passes

// regardless of field and data channel.

// regardless, but we want the hash to be consistent with the hash provided

// regeneratorRuntime in the outer scope, which allows this module to be

// region with no indication that anything is amiss (seen in Firefox). Seeking to

// register it to the root container. Otherwise, we should

// register source handlers with the appropriate techs

// register the event to the target element and mark it as

// relative to others. Lower the degradation priority for all sample

// relative to the bottom of the video instead of the top. Therefore, we

// reliably everywhere they are implemented.

// remain on that fallback regardless of whether the content has resolved.

// remainder back to queue

// remaining in the buffer was malformed and throw it out

// remaining updates is accumlated during the evaluation of the

// remember chunk offsets

// remote text track list. This can potentially cause a false positive

// removal listener that was just added. Otherwise, we create a memory leak.

// remove '0x' from the key id string

// remove 'px' from variable and parse as integer

// remove HTMLTrackElement and TextTrack from remote list

// remove added visible namespaces

// remove all event handlers for track lists

// remove any captions and ID3 tags

// remove any child track or source nodes to prevent their loading

// remove any overlapping cues to prevent doubling

// remove any remaining space and CRLF

// remove any src reference.

// remove any src reference. not setting `src=''` because that causes a warning

// remove content

// remove controlTextEl_ on dispose

// remove current track audio if it gets disabled

// remove from 0, the earliest point, to Infinity, to signify removal of everything.

// remove from the queue because you can't remove arbitrary nodes from an

// remove pkcs#7 padding from the decrypted bytes

// remove quotes and escapes

// remove reference to the player after disposing of the element

// remove reference to track object on dispose

// remove the listener before adding it just in case it wasn't previously removed

// remove the parity bits

// remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback

// remove unused buffered range elements

// removeChild on the inner nodes because they're removed by the top

// removed.

// removes all cues before it processes new ones

// removing the GOP currently being played, as removing it can cause playback stalls.

// removing the leftmost matching pattern on each iteration,

// render and there's another warning for that anyway.

// render pass will run to completion or restart or "suspend" the commit.

// render phase update. It assumes there is either a current hook we can

// renderLanes from the original lanes.

// renderer.

// rendering it again.

// rendering it before rendering the rest of the expired work.

// rendering the fallback children.

// rendering. We might want to restart this render. This should mirror

// rendition and hope another will switch audio groups

// replaced it with a custom player.

// replaying on render function. This currently only patches the object

// report Enter as charCode 10 when ctrl is pressed.

// report at the same interval as activityCheck

// representations API and EME setup is correct

// represents a master playlist, some media playlists may need to be resolved before

// req-like

// request can be skipped (since the top level of the manifest, at a minimum, is

// request for pre-resolved manifests, add on resolvedUri here.

// request the new playlist

// request the specified URL

// request triggers due to a limitation in the XHR library

// requesting to switch to the same playlist multiple times

// requires more things to be just right.

// requires two or more WebVTT line terminators between the WebVTT header and the

// rerender the children.

// res-like

// reserved

// reserved 4 bytes

// reserved for later use (must be zero),

// reserved: Reserved for use where no type needs to be indicated

// reset config and pps because they may differ across segments

// reset the error state

// reset the hasStarted state

// reset the stream state

// reset values in the transmuxer since a discontinuity should start fresh

// resolve any segment URIs to prevent us from having to do it later

// resolve the segment URL relative to the playlist

// resolvedUri is added on internally after the initial request. Since there's no

// resolvedUri: sidxRange.resolvedUri,

// responding to a native `waiting` event when the tech fails to emit one.

// response is just bytes in this case

// rest of the file

// restore all track modes to their pre-fullscreen state

// restore muted on play terminatation

// restoring to default

// result in far fewer object allocations and property accesses

// result in the desired behaviour.

// result in valid data being returned

// result, either by returning a { value, done } result from the

// resulting list is the set that would belong to the root's parent, if it

// results concatenated to recover the actual value.

// resuming, this may not be true.

// retain the segment in case the playlist updates while doing an async process

// retries so that we don't show too many loading states too quickly.

// retrieved from the tech (see: currentTime). However, for completeness,

// retry any lane at equal or lower priority, but don't try updates at higher

// retry listener to the promise. This flag is also used to hide the

// return 'CLASS NAME' + this._super();

// return NaN if the duration is not known

// return early if no audio data has been observed

// return early if we don't need to resolve

// return early no gops can be aligned with desired gopsToAlignWith

// return for IE11 above, and the existence of modern EME APIs in addition to

// return it or return null if no good candidate was found

// return the composition start time, in seconds

// return the less-precise, playlist-based duration estimate

// return the minimum

// return the node so it can be chained (e.g. when within callback refs

// return the string representation of the specified byte range,

// return true if the playhead reached the absolute end of the playlist

// return true if there is too little buffer left and buffer has reached absolute

// return true.

// return undefined explicitly as that's the contract for this method

// revealOrder undefined can't be trusted because it don't

// right edge of the `SeekBar` and the player.

// right now, boxes will come back from partial transmuxer, data from full

// right-to-left category. What this means is that these characters are

// right-to-left characters out of the Unicode data table. That table can

// role='presentation' causes VoiceOver to NOT treat this span as a break.

// rollover point. In loading this segment, the timestamp values will be very large,

// root boundaries that match that of our current "rootContainer".

// root has work on. This function is called on every update, and right before

// root inside of batchedUpdates should be synchronous, but layout updates

// root.

// root; if a task was already scheduled, we'll check to make sure the priority

// rounding behaviors, there are cases where the spacing adjustment is off

// row at the tail. So we'll keep on and cut off the rest.

// safari and edge can unload the iframe before resizemanager dispose

// safe live point).

// same as the current state, we may be able to bail out entirely.

// same children then we're still in progressive loading state.

// same error.

// same event, like if you perform an update inside `flushSync`. Or any other

// same fiber again.

// same object

// same object, but that doesn't work so well.

// sample's values as they should be as close as possible

// sample_count

// sample_description_index

// sample_duration

// sample_flags

// sample_size

// samples (that is, adts frames) in the audio data

// samples (that is, frames) in the video data

// samplesize

// sanitizeURL

// satisfies our requirement. Our requirement is not to produce perfect

// satisfy linter

// save all the nals in the last GOP into the gop cache

// save that information as a possible sync-point reference in future

// saved for the new playlist's segment, however, if the segment fell off the

// scale the PTS values into the clock rate of the track

// scan for NAL unit boundaries

// scan the tracks listed in the metadata

// schedule a callback until after flushing layout work.

// schedule a side-effect to do the updates.

// schedule decryption keys

// schedule encryption keys

// scheduleCallbackForFiber to preserve the ability to schedule a callback

// scheduled before we entered the render phase.

// scheduled work and instead do synchronous work.

// scheduler/tracing

// scraping the MDN documentation.

// screen readers to read the appended control text unnecessarily

// script and fires only keydown, keypress, keyup. Catching keyup usually

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// search past them. This leads to exponential search for the next sibling.

// second parameter to the `classList.toggle()` method! Which is fine because

// second pass to render the fallback, we do some exceedingly, uh, clever

// section starts in this packet, the payload_unit_start_indicator

// section.

// sections may be split into multiple packets. If a PSI

// see ISO/IEC 13818-1:2013 (E), section 2.6 "Program and

// see ISO/IEC 14496-12:2012, Section 8.8.8.1

// see Recommendation ITU-T H.264 (4/2013),

// see enableTouchActivity in Component

// see https://tools.ietf.org/html/rfc1808

// see if any start/end pair is different

// see if we need to begin loading immediately

// see requestSidx_ for the container request

// see the shouldWaitForTimelineChange function.

// see: https://cycling74.com/forums/aiffs-80-bit-sample-rate-value

// seek forward to the live point

// seek to the live point

// seek within an empty playlist

// seekable behavior. See https://github.com/w3c/media-source/issues/5 for details.

// seekable has been calculated based on buffering video data so it

// seekable is the same as last time

// seekable range specified across browsers, just return Infinity.

// seekable range specified across browsers, the duration should be greater than or

// seekable, ended, playbackRate, defaultPlaybackRate, disablePictureInPicture

// seekables are pretty far off, rely on main

// seen error.

// sees loadstart before loadedmetadata

// segment

// segment but no audio data. (seen in several playlists with alternate

// segment here

// segment timing. Mark that the segment contains no cues so we don't re-request

// segment yet

// segment's mediaIndex

// segment, are removed.

// segmentInfo.startOfSegment used to be used as the timestamp offset, however, that

// segments from the previous timeline would be adjusted by the new timestamp offset.

// segments with no data

// select next rate option

// selected breakpoint.

// selected should be accurate, unless the video has been transmuxed at some point

// selection (this matches native `select` event behavior). In HTML5, select

// selection at a reasonable bandwidth

// selectionchange needs to be attached to the document

// selector

// self and source are DEV only properties.

// semantics of the native select event.

// separate issue. Write a regression test using string refs.

// separator characters). See issue #115.

// seq_parameter_set_id

// seq_scaling_list_present_flag[ i ]

// seq_scaling_matrix_present_flag

// sequence number is unchanged, and this playlist hasn't become the end of the playlist

// sequenceParameterSetLength

// server clock

// set "main" media equal to video

// set + toTitleCase(name)

// set a flag in case another tech triggers fullscreenchange

// set audio isFmp4 so we use the correct "supports" function below

// set because the element doesn't exist yet.

// set fullscreenKey, muteKey, playPauseKey from `hotkeys`, use defaults if not set

// set innerHTML to the value provided

// set it to one to complete this function's removes

// set it to showing.

// set of B.return.

// set selected to that true value otherwise

// set tabindex to -1 to remove the video element from the focus order

// set the appropriate stream type

// set the bandwidth to a very low value and trigger an ABR switch to

// set the bandwidth to that of the desired playlist being sure to scale by

// set the correct value.

// set the default state based on current tracks

// set the focus into the submenu, except on iOS where it is resulting in

// set the percent based on the width of the progress bar (bufferedEnd)

// set the pipeline up as a stream before binding to get access to the trigger function

// set them on the actual target element itself. This is primarily

// set to the existing values in tracks or default values

// set to true and it does not execute

// set to zero.

// set trackinfo on the pending segment so that

// set up ID reference

// set up the parsing pipeline

// setControls is special-cased above

// setDisablePictureInPicture, setCrossOrigin

// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline

// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate,

// setter

// setting context.delegate to null, and returning the ContinueSentinel.

// setting it the first time we go from not suspended to suspended.

// setting the bandwidth manually resets the throughput counter

// setting the native MediaSource's duration to infinity ends up with consequences to

// setting to text is required for partial responses

// settings object here.

// setup ID and URI references (URI for backwards compatibility)

// setup active group and track getters and change event handlers

// setup an encryption key for upcoming segments

// setup segment loaders

// setup single error event handler for the segment loader

// setup sourceset after late sourceset/init

// setup the IV for the next round

// shift displayed rows up

// shift rows and add rcon

// shift tasks off the queue after they have been executed.

// short-circuit the search for empty paths

// should *not* suspend the commit.

// should be deferred until the end of the batch.

// should be fixed once requests begin (as sync points are generated based on sync

// should be invisible. If there are already mounted boundaries

// should be non-inclusive

// should be replaced with spaces, so add one now

// should be used, but also covers the case where the provided src is a vhs-json

// should clear the child pointer of the parent alternate to let this

// should contain the most accurate values we have for the segment's player times.

// should default to the closest comparable log.

// should equal 'APETAGEX'

// should equal 'MAC '

// should equal 'wvpk'

// should fire a `waiting` event in this scenario, but due to browser and tech

// should immediately commit it or wait a bit.

// should often be correct, it's better to rely on the buffered end, as the new

// should probably be inlined somewhere and have its logic

// should still not happen in general

// should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)

// shouldComponentUpdate is tricky; but we'll have to account for

// shouldWaitForTimelineChange function.

// show an error

// show or hide replay icon

// showing an intermediate loading state. The longer we have already waited, the harder it

// showing content on the screen, as opposed to being in fallback state or

// sibling order but that isn't a strong guarantee promised by React.

// sibling, or the parent if there are no siblings. But since the root

// sibling. If there are no more siblings, return to the parent fiber.

// siblings.

// side information

// side of them.

// side-effect order.

// sidx is implemented

// sidxMapping is used when parsing the masterXml, so store

// signals that the Tech is ready at which point Tech.el_ is part of the DOM

// similar to how we default the target to `elem` in

// since all parts of the request must be considered, but should not make callbacks

// since in the common case of a single root app it probably is. If it's not

// since it's known to be in an inconsistent state. Use a force update to

// since its loads follow main, needs to listen on timeline changes. For more details,

// since sourceSet is async we have to update the cache again after we select a source since

// since the rest will all be insertions.

// since the transmuxer is using the actual timing values, but the buffer is

// since the transmuxer is using the actual timing values, but the time is

// since they are now stored in the `kinds` property of all instances of

// since we are no longer "waiting" on any requests. XHR callback is not always run

// since we don't support appending fmp4 data on progress, we know we have the full

// since we're leaving it behind on this node.

// single callback argument

// size of the referenced (sub)segment

// skip current playlist which is about to be blacklisted

// skip if unchanged

// skip if we already have subtitles

// skip if we already have the highest quality audio for a language

// skip it. We do not want to affect tracks of incompatible kind(s).

// skip past non-sync sequences

// skip past the elementary stream descriptors, if present

// skip text encoding (1 byte),

// skip the PSI header and parse the first PMT entry

// skip the payload and parse the next message

// skip undefined seekable

// skip variants that are already blacklisted forever

// skipListeners allows us to avoid triggering the resize event when setting both width and height

// skipNextSeeked_

// skipped over the parent when we bailed out.

// skipped update, the previous update/state is the new base

// slash is present) is removed and the embedded URL's path is

// slash), then the embedded URL inherits the base URL path

// slice out `bg_` if it's a background color

// slowing down the queue of pending tasks, we rethrow the error in a

// snapshot each metadata track's initial state, and update the snapshot

// so checking hasElData first.

// so forEach((val, val) =>` but for maps we want to use

// so indicate selected state to screen reader in the control text.

// so it's not still clickable or right-clickable

// so let's just skip over it to find memo() outer wrapper.

// so older techs won't support it

// so select the first segment

// so that ID3 frame timing can be adjusted to match video timing

// so that MediaSources can trigger the `ended` event when it runs out of

// so that caption timing can be adjusted to match video timing

// so that e.g. DevTools can display custom hook values.

// so that results are always delivered in the correct order. If

// so that the async generator function has the opportunity to do

// so that we don't need to depend on findDOMNode() from react-dom.

// so that we don't prematurely signal complete for interactions when there's e.g. hidden work.

// so the browser didn't dispatch the dragend event.

// so the stack is accurate.

// so this matches nothing.

// so we allow it only if we don't know what the parent is, as all other

// so we assign defaultValue to the same thing as the value property

// so we can always restart.

// so we can remove this all together. Right now this will block custom

// so we can tell if any async act() calls try to run in parallel.

// so we don't get into an infinite type loop

// so we have to check that the video buffer did have some buffer in the

// so we have to do it now instead.

// so we mimic that behavior

// so we need to prevent overwriting the URL entirely

// so we use a ref to ensure that it always has the latest version.

// so we use the old behaviour (Context.Consumer references Context) to

// so we'll check if the controls were already showing before reporting user

// so we'll just enter that. The only difference is we'll bail out

// so we'll need to turn off any default tracks if we're manually doing

// solution. The value can be a boolean or object so that's why it's forced

// some playlist attributes are optional

// some profiles have more optional data we don't need

// some renderers as primary and others as secondary. We only expect

// someone may have tampered with the value

// someone, bail early with an informative error

// something happened, try the next middleware on the current level

// sometimes bails out later in the begin phase. This indicates that we should

// sometimes when it hasn't). IE's event fires out of order with respect

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// sort caption byte-pairs based on their PTS values

// sort keys so we can make sure they have

// sort variants by resolution

// sorted from last index to first index

// source URL.

// source buffer list

// source buffer queue entries do.

// source buffers to no longer be updating. "If the updating attribute equals true on

// source during the current render pass, so we need to do a bit more work.

// source object (rather than just a URL). Therefore, since the media playlist

// sources, since the MediaSource reports duration as the highest value without

// sourceset on. We have to watch for a source append

// spaces, for instance (\u3000) are not recorded correctly.

// span elements have no implicit role, but some screen readers (notably VoiceOver)

// special case the scroll event because the reality is that any

// special cases and we'll deal with them.

// special to do. Need to push to the stack regardless, though, to avoid

// specific variant

// specified

// specified by URI

// specified.

// split the key and value

// split the string using attributes as the separator

// split up the encryption job and do the individual chunks asynchronously

// stall is most likely caused by buffering in a low bandwidth environment. The tech

// start measuring the time to display the caption

// start segment loader loading in case they are paused

// start time. Meaning cached frame data may corrupt our notion of where this segment

// start updating the snapshot again after leaving fullscreen

// started (i.e., source buffers are created) as they don't need the source buffers, but

// started, so reset to an unstarted state.

// startup

// state

// state away from loading until we are officially done loading the segment data.

// state of the host tree right before we mutate it. This is where

// state variables a,b,c,d are loaded with pre-whitened data

// state, no effects. Same as what we do for Offscreen (except that

// state, only for the following bubble event to come in

// state. Now that we have additional work, cancel the timeout.

// stateNode is any.

// statement, but eslint doesn't know about invariant, so it complains

// statically styled-components don't need to build an execution context object,

// step 7; otherwise, it inherits the <params> of the base

// step 7; otherwise, it inherits the <query> of the base

// stepped past dehydrated DOM nodes to get here. However they could

// still be stored in history.

// still contain them after `trim` but whitespace only strings

// still want to warn on the client.

// stop processing if received empty content

// stop the interval that maintains activity if the touch is holding

// stop updating!

// stopWatching() should be a noop here but we call it just in case we

// storage is set to 0).

// store HTMLTrackElement and TextTrack to remote list

// store a single event to be replayed.

// store of value, maybe maybe overwritten

// store some metadata about all the Gops

// store the old function

// store the version in case other components read from it.

// str.indexOf instead of regex because str.indexOf is faster performance wise.

// stream (going from a non-existent timeline, -1, to timeline 0). It's important

// stream may still be played without them.

// stream so we can do the duration calculation when we

// streamDependenceFlag, URL_flag, reserved, streamPriority

// streamType

// streams will only accept data that matches their type.

// strict mode using a global Function call. This could conceivably fail

// string ('') which would equal false if we just check for a false value.

// strip off any carriage returns here so the regex matching

// strip whitespace

// stuck in a gap due to video underflow.

// style object but the events that fire will still be prefixed, so we need

// stylis has no concept of state to be passed to plugins

// sub-tree for that root and make that our ancestor instance.

// subscribed to the source, and if so, whether there are any pending

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// subsequent closed-captioning control code.

// subsequent synchronous update to re-render the Suspense.

// subsequent tasks. The higher level `asap` function ensures that if an

// succeed and there will likely be errors in render.

// sufficient for updates within the same priority, since we want to treat

// sum the byteLength's all each nal unit in the frame

// superfluous and we'll delete it. Since we can't eagerly delete it

// support both crossOrigin and crossorigin to reduce confusion and issues around the name

// support req/res-like objects as argument

// support window.event.

// supports a much greater range (52-bits) of integer using standard

// supports within in a single renderer. Such as parallel server rendering.

// supposed to capture all errors that weren't caught by an error

// suppress the useLayoutEffect warning on server side.

// sure that the property is attached to avoid undefined reference errors

// suspend for longer if possible.

// suspend the commit. Pretend as if the suspended component rendered

// suspended it has resolved, which means at least part of the tree was

// suspended level. Ping the last suspended level to try

// suspended now, right before marking the incoming update. This has the

// suspended render.

// switch back to default audio track

// switch based on the tag type

// switch on that value.

// switch to fully loaded playlists immediately

// switch to previously loaded playlists immediately

// switching from an already loaded playlist

// switching to the active playlist is a no-op

// sync

// sync request failed, fall back to using date header from mpd

// sync request first. This will double the request time

// sync to live point (if VOD, our seekable was updated and we're simply adjusting)

// sync to the beginning of the live window

// synchronous operation, process next entry

// synchronously to block concurrent data mutations, and we'll includes

// systems is that the modern event system now has an event listener

// tag data that is not complete enough to be parsed

// tag, DecoderConfigDescrTag

// tag, DecoderSpecificInfoTag

// tag, ES_DescrTag

// tagTypes: this.type,

// tags get no namespace.

// tail

// take effect. We don't believe this should ever be the case

// take emergency action

// takes the extra step of enabling pause on caught exceptions. This is

// target duration

// targetDuration should be the same duration as the only segment

// tech dispose

// tech will handle clearing of the emulated track list

// tech.player() is deprecated but setup a reference to HLS for

// techs are registerd as Components but can't aren't compatible

// tell screen readers not to automatically read the time as it changes

// temporary flucations in client bandwidth

// tests) on adding the timingInfo event. However, it seems unlikely that there's a

// text should be swapped to non-displayed memory as if it was a pop-on

// text uses application/<container> for now

// textContent. E.g. "foo" will match "f<span>oo</span>" but that still

// than a half second

// than clear all of our current tracks

// than once; for example, if non-React code also calls `dispatchEvent`

// than seekable start

// than the current estimated bandwidth

// that "." is removed.

// that are shown on error are two different sets, so we shouldn't reuse

// that can cause this.

// that child fiber is setting, not the reconciliation.

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that continues in the next segment

// that could already be hydrated, we wouldn't have found them

// that data is about to be appended, we can check the final cases to determine

// that follow the last byte of the field.

// that has been unmounted.

// that have been unsubscribed in the  middle of the notification loop.

// that if the target is disposed BEFORE this object, we remove the

// that is eventually read during hydration.

// that is referenced by index, and one by URI. The index reference may no longer be

// that is registered above

// that is the true start of the segment (where the playback engine should begin

// that it's possible to trigger this behavior outside the boundaries of

// that just executes the given callback immediately.

// that means we don't have enough of the stream to parse the first

// that might cause other unknown side-effects that we

// that needs to happen before normalization.

// that plays more nicely with the browser's DevTools. The idea is to preserve

// that regardless.

// that should result in the most accurate guess about which segment

// that the "current" fiber pointer gets updated so we need a commit

// that the "current" props pointer gets updated so we need a commit

// that the first request is asynchronous.

// that the playlist is audio only. We delete the resolvedUri property here

// that the segments have changed in some way and use that to

// that these rules apply to the first timeline change because if they did not, it's

// that trying again will succeed

// that unless we find reason to.

// that was thrown. It's possible that this error handler will fire more

// that way

// that we can show the initial loading state as quickly as possible.

// that we do not currently use.

// that we do not support here.

// that we don't block potential future ES APIs.

// that we first we try to render one tree, and if that fails, we render again

// that were previously skipped when the tree was hidden. That set of

// that weren't processed.

// that will be the result of the seek-to-live behavior

// the "pluginsetup" event is the value returned by the `plugin` function.

// the .value of the Promise<{value,done}> result for the

// the ADTS frame header

// the DOM node back to the controlled value. This is necessary when React

// the DOM nodes representing these roots are the "rootContainer".

// the ID3 tag header

// the ISO-BMFF spec says that trackId can't be zero, but there's some broken content out there

// the MD5 hash of the file (see notes for usage... it's a littly tricky)

// the PTS and DTS are not written out directly. For information

// the React name like we do for attributes that exist only in HTML.

// the VolumeBar is turned on.

// the VolumeControl is on.

// the `SeekBar`. This ensures we stay within it at all times.

// the `possibleStandardNames` module to ensure casing and incorrect

// the actual .el_ is removed here

// the actual printable character.

// the allowed property list in the commit phase instead.

// the alt audio loader should not be responsible for setting the timestamp offset

// the attribute overrides the option

// the audio codec cannot change

// the audio timeline as well. If the content is video only, this won't have any

// the audio/video source buffer is updating

// the audioAppendStart should be regenerated.

// the bandwidth of the primary segment loader is our best

// the base Plugin class).

// the base URL.

// the base state unless the queue is empty.

// the begin phase. There's still some bookkeeping we that needs to be done

// the bits per sample (typically 16)

// the box orientation styles are applied.

// the box. If no amount is passed then the default is the line height of the

// the browser a kick to remove any cached frames from the previous rendtion (.04 seconds

// the buffer is the entire video duration.

// the buffered value for this loader changed

// the byte containing the constraint_set flags

// the bytes of the program-level descriptor field in MP2T

// the callback doesn't error, but the error event was fired, we know to

// the capture phase here still. This is a trade-off,

// the change event. As a poor substitute, we manually dispatch

// the class is already set up properly in the divEmbed case

// the click is considered a control

// the codecs that the muxer outputs?

// the commit side-effects on the root.

// the complete size of the tag, including this footer (excludes header)

// the component is rerendered and the value reverted before all the event

// the compression level (see defines I.E. COMPRESSION_LEVEL_FAST)

// the control. I.e. before we entered the sample frame. So we ignore this result.

// the current byte isn't a one or zero, so it cannot be part

// the current source cache is not up to date

// the current word being examined

// the currentTime_ that means that our conservative guess was too conservative.

// the currently set timestampOffset, but this isn't desirable as it can produce bad

// the curried logByType bound to the specific log and history

// the cursor when the user is inactive, and a mousemove signals user

// the data section starts immediately after the PES header.

// the default drag preview from drawing in IE is to screenshot

// the developer's perspective, the error is uncaught.

// the differences of WebKitDataCue in safari and VTTCue in other browsers

// the different event systems have different DOM event listeners.

// the dispatcher used for mounts.

// the dragging state in which the node itself has zero opacity

// the duration can be reliably known.

// the earliest expiration time on the root. Then use that to quickly bail out

// the earliest opportunity.

// the effect of interrupting the current work-in-progress render.

// the effect of remounting all children regardless of whether their

// the end of the segment

// the endTime of each cue is the startTime of the next cue

// the endTime of last cue is the duration of the video

// the error is really just that at least one of the requests timed-out

// the error. Bubble it to the next boundary.

// the event in the out event of the other target. If this is replayed,

// the evented object itself.

// the existing behavior manually on the roots now.

// the existing children. Conceptually, the normal children and the children

// the fact that we have it is the same as the expected.

// the final result produced by the iterator.

// the final segment

// the first ancestor. Next time, we will ignore the event.

// the first bit of working word is 1

// the first item in the list.

// the first pass, we schedule a deletion for all the current children by

// the first segment, return the first segment

// the first self-ref is always untouched

// the first timeline

// the following conditional otherwise it may consider this a bad "guess"

// the force suspend context. If the first render didn't have anything in

// the frame size is transmitted as a 28-bit integer in the

// the future if we implement resuming, or some form of that.

// the gap, leading currentTime into a buffered range. Seeking to currentTime

// the given SegmentTimeline is handling for more elements than we have

// the high order number of APE frame data bytes

// the host tree after it's been mutated. The idiomatic use case for this is

// the hottest path, and Object.assign() was too slow:

// the hydration is successful of a javascript: URL, we

// the initial state tree.

// the inner div's lines. This could be due to bold text, etc, on some platforms.

// the input might not even be in a form. It might not even be in the

// the intial addOrChangeSourceBuffers will always be

// the key of the property that will be chosen; otherwise it's assumed to be

// the key.

// the keyframe seems to work fine with HLS playback

// the last two bytes of default_sample_flags is the sample

// the list will propagate the change when it rerenders.

// the logic of whether or not a root suspends once it completes.

// the longer we can wait additionally. At some point we have to give up though.

// the main content and only render fallbacks.

// the main loader will save the first timeline mapping, and ensure that there won't

// the manifest is empty until the parse stream begins delivering data

// the mapping table ends at the end of the current section

// the matching element property will return a value for typeof

// the maximum sample rate is limited by the structure of frame headers to 655350Hz.

// the message event.

// the method takes exactly one argument, since that happens to be true

// the middle of the notification loop, where `subscription` will then be null. This can

// the most recent event from that source.

// the mutation phase, so that the previous tree is still current during

// the new API.

// the new state tree with any relevant data from the old one.

// the newly allocated props object.

// the next discrete event.

// the next prop is different than the server value, so just return

// the next tick, or earlier if something calls `flushSyncCallbackQueue`.

// the number of audio blocks in one frame

// the number of audio blocks in the final frame

// the number of bits left to examine in the current word

// the number of bytes left to examine in workingData

// the number of bytes of APE frame data

// the number of channels (1 or 2)

// the number of descriptor bytes (allows later expansion of this header)

// the number of fields in the tag

// the number of header APE_HEADER bytes

// the number of header data bytes (from original file)

// the number of seconds prepended to the original segment due to GOP fusion

// the offset from the current position to the start of the

// the one the child playlist loader was created with

// the only reason we track the event time, then probably not.

// the only thing we can do is call play

// the other plugins are essentially polyfills. So the plugin

// the outer generator.

// the outer most that is known.

// the performance wins from the change. So we emulate

// the phases properly, like we do with the SimpleEvent

// the player must be playing before calling this

// the playlist we were trying to load (but failed) and that should be

// the plugin's state and replacing methods with a function that throws.

// the problematic code almost always lies inside that component.

// the progress bar won't make it all the way to the end

// the proper solution is to fix the accidental strict mode problem. If

// the reference container's positions. This has to be done because this

// the render phase.

// the renderer. Such as when we're dispatching events or if third party

// the request was aborted

// the request was aborted and the SegmentLoader has already started

// the response was a success so set any bandwidth stats the request

// the rest of this function depends on `oldPlaylist` being defined

// the rest.

// the results of the space calculations above.

// the right from there.

// the root always starts with a "current" with a null child.

// the root has an effect, we need to add it to the end of the list. The

// the same guid as the event listener in on().

// the same root, then it's not a huge deal, we just might batch more stuff

// the sample rate (typically 44100)

// the sample somewhere in the control.

// the scope of our checks.

// the second request remains unsent. In that case, the aborted algorithm will not

// the segment has a map

// the segment loader is already synced to the previous rendition

// the segment's mediaIndex at the time it was requested

// the segment's playlist

// the sidx was updated, so the previous mapping was removed

// the source is consistent with the values that we read during the most

// the source that is selected could be out of order from the cache update above this callback.

// the stack without entering the complete phase. If this is a boundary,

// the stack.

// the start of the range and it's accuracy is 0 (greater accuracy values

// the starting segment list is available. Therefore, go directly to setup of the

// the stream

// the stream can be played without it. Although an attributes property may have been

// the stream is CBR if the first 3 frame bitrates are the same

// the sync controller leads to improper behavior.

// the sync point is properly aligned

// the tag.

// the target fiber to a different ancestor. We had similar logic

// the target node

// the terminating data of the file (not including tag data)

// the time stamp to be `value - 2^33`.

// the timing info here comes from video. In the event that the audio is longer than

// the total number of bytes currently in the buffer

// the total number of frames

// the total size in bytes of the ID3 tag being parsed

// the transmuxer still needs to be updated before then.

// the tree, it is using a ref to a child-less DOM node.

// the un-prefixed "animation" and "transition" properties are defined on the

// the unwanted keypress events. Enter is however both printable and

// the update is added to a shared queue, which outlasts the

// the update queue. However, there's an exception: SimpleMemoComponent

// the updates that were skipped. Usually we only suspend at the end of

// the validation flag non-enumerable (where possible, which should

// the value of an included boolean attribute is typically an empty

// the video codec cannot change

// the video, this will trim the start of the audio.

// the w3c spec. For instance, setting the duration on the media source may trigger

// the whole system, dispatch the event without a target.

// the whole system.

// the work-in-progress hook.

// the wrapperState._initialValue property. This uses:

// their URIs throughout VHS, but some formats (e.g., DASH) don't have external URIs

// their event listeners to the respective elements that their

// their field 1 value plus 1. That's why there's the "| field" on the

// them got retried so they'll still be blocked in the same way

// them to update.

// them, so not going to go to as much trouble as loadstart to prevent

// them. Future PMT declarations have the current_next_indicator

// then applied, in order, to the new path:

// then call the mw's setSource method

// then don't suspend/restart.

// then exit early

// then it needs to call setState to recover from errors.

// then it's because we couldn't dispatch against this target previously

// then let that catch block handle the exception normally.

// then make a copy of that object for use

// then manually add it to the children array so that this.addChild

// then remember this position as the best position.

// then resolve URIs in advance, as they are usually done after a playlist request,

// then return the result that innerHTML's setter would

// then the tail doesn't matter. Anything new that suspends will work

// then this takes precedence over the enableLowInitialPlaylist option

// then we are loading something new

// then we suspend/restart for 500ms since the last time we showed a fallback

// then we will start at the given offset in seconds

// then we would risk falsely saying two separate memo(Foo)

// then we'll get the priority of the current running Scheduler task,

// there are also other cases when this might happen (such as patching

// there are any.

// there are some actions that may trigger updateend events without set definitions in

// there can only ever be one caption message in a frame's sei

// there cannot never be a character before the start of a string

// there is already an outstanding playlist request

// there is only one valid source element url

// there may be state updates already scheduled from the old source.

// there should be at least two self-refs to do a replacement (.b > .b)

// there to be two concurrent renderers at most: React Native (primary) and

// there were no valid sources

// there were two requests, the first may have triggered an error immediately, while

// there's a media source queue entry before the next entry of this type, in which

// there's a new task, or that there's no remaining work on this root.

// there's pending input, always yield at the end of the frame.

// there's still, potentially, more segment to process), so there's nothing to do.

// there. The easy solution is to only fire `hover` in `dragover` on FF.

// therefore not reporting its length accurately..

// these aren't boolean attributes (they are coerced to strings).

// these children are not part of the reconciliation list of children.

// these modules complicates things, as you'll essentially

// these properties stay in sync with the current stylis run

// these will be passed to the tech during loading

// they are left as they are instead.

// they are not equal

// they are not text inputs.

// they are the same object and thus, equal

// they cannot handle preferred fallback states.

// they do not persist to the next render. Do not remove updates from hooks

// they fire before the next serial event.

// things simple and return the next function itself.

// this also caches the init segment for later use

// this alternate audio variant

// this can occur if someone sets the src in player.ready(), for instance

// this case.

// this current gop starts after the current gop we want to align on, so increment

// this element and its contents can be hidden from assistive techs since

// this forces the browser to pass the bytes to us unprocessed

// this function wraps mapToProps in a proxy function which does several things:

// this happens in fullscreen when we really need to hide the cursor.

// this immediate suspense boundary and gets reset each new

// this in the host environment that also has access to this prop. That

// this is a hash for the sole purpose of mapping non-camel-cased event names

// this is an encrypted segment

// this is important because we can abort a request and this value must be

// this is important because we will update this.mediaIndex with this value

// this is needed for backward-compatibility and node compatibility.

// this is needed to work around a chrome bug where setting defaultChecked

// this is no longer necessary.

// this is the end of the path and we've found the box we were

// this is the only place where we trigger fullscreenchange events for older browsers

// this is the same time range

// this is used in parseByDuration

// this is where an 'else' would go for a dispatching packets

// this isn't necessary on the desktop but shouldn't hurt

// this may also return a SuspenseComponent or HostRoot to indicate that.

// this may be an unsynced ts segment

// this means we are switching from demuxed to muxed audio. In this case we want to

// this needs a better comment about why this is needed

// this point, it errored again. Commit it.

// this render is thrown away. Since it's a race condition, not sure it's

// this render.

// this sei_message is a 608/708 caption so save it and break

// this shouldn't pose an issue

// this special case and use the same logic for all events.

// this value is only a single digit

// this will cause newTime to be Infinity, which is

// this will never be skipped by the check above.

// this will throw an extra error

// this.parse_mxhd(mdhd_data, this.currentTrack);

// this.positionAll();

// this.warning(VideoJS.warnings.videoNotReady);

// those cases. Even if our error event handler fires more than once, the

// those special-case tags.

// those trigger a fallback, then don't suspend/restart. We want to ensure

// those two cases. Need to fix this before exposing flushDiscreteUpdates

// those updates as parallel.

// through Scheduler

// through in twos. The events are in pairs of two to save code

// through the React tree. However, on Mobile Safari the click would

// through this pass since if the target is hydrated it would

// throughout VHS, but some formats (e.g., DASH) don't have external URIs

// throw an APPEND_BUFFER_ERR.

// throw the exception.

// throwing away hundreds of media segment fragments

// thrown for two primary cases:

// thrown on the next check for two primary cases:

// thus be captured by `keypress`, no other non-printable key should.

// time 0 for the new content.

// time and in the last segment appended.

// time in seconds

// time the reducer has changed.

// time we apply the entanglement.

// time we enter the render phase, then the eager state can be used

// time we have to render. So rendering one more row would likely

// time will appear as if we are in a buffered region, even if we are stuck in a

// time will be between 0 and 100, the native media source may report the duration

// time" (the start time in the player) can't be considered accurate.

// time. The end time can be roughly calculated by the receiver using the duration.

// timeline before setting the offset, otherwise, if audio is behind in loading,

// timeline), then the load call will be added to the queue until it is ready to be

// timeline++ here would treat it like HLS discontuity and content would

// timelines

// timeout the request.

// timescale, 90,000 "ticks" per second

// timestamp (equal to an OR.)

// timestamp offset (before it was added to the queue). But the presence of

// timestamp offset as a property of segmentInfo serves as enough evidence that

// timestamp offset on the transmuxer and source buffer.

// timestamp offset(s)) can process immediately. While the extra state isn't optimal,

// timestamp offset.

// timestamp offset. Retaining this bit of state prevents us from updating in the

// timestamp rollover, this means the roll over is happening in the opposite direction.

// timing information.

// title for backward compat

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to a SimpleMemoComponent to allow fast path updates.

// to a theoretical Cea708Stream that handles SERVICEn data

// to account for it here, too. Reset to the value of the current fiber.

// to add them to the deletion list.

// to arrive.

// to attempt to render the primary children again.

// to avoid a push/pop misalignment.

// to avoid choosing a lane that is already in the middle of rendering.

// to avoid console warnings. Use a 'touch-action: none' style

// to avoid triggering an `unknownwaiting` event when the network is slow.

// to be a string.

// to be able to optimize each path individually by branching early. This needs

// to be removed, such as transitioning from a checkbox into a text input

// to camel-cased function names

// to capture the MutationObserver implementation in a closure, were integrated

// to check if something is fmp4. This will allow us to save bandwidth

// to check if the un-prefixed events are usable, and if not remove them from the map.

// to consolidate.

// to create a new function object. We can even get away with assuming

// to delete it. So we need to remove it from the list. Deletions are stored

// to determine if a codec is audio or video

// to determine mime types

// to determine what the child props should be

// to determine what the child props should be.

// to document anymore, but changing this now would undo

// to each component as well so they don't need to

// to each decrypted block

// to emit a full packet

// to enable drag and drop

// to fetch

// to filter them out until we fix the logic to handle them correctly.

// to find the callsite that caused this warning to fire.

// to follow the WebVTT spec (https://w3c.github.io/webvtt/#file-structure) that

// to forget to do before returning it. E.g. for the single child case.

// to get either `parent` or `self`

// to get it started back up to attempt the next item. While in terms

// to it.

// to key and input events on deletion, so we discard it.

// to load.

// to make an initial playlist selection

// to missing segment timing info).

// to only set the value if/when the value differs from the node value (which would

// to our new `video` element. This will move things like

// to prevent a playlist loader from being created so that we don't have

// to prevent null checking

// to prevent use before define eslint error, we define loadHandler

// to provide the offset, in which case it defaults to the next byte after the

// to recompute its display state. This lets us compute its display state

// to render it.

// to resolve setup of media groups

// to schedule a side-effect to do the updates.

// to schedule work on. In this case we have to schedule it on the

// to see if one of its parents is a React owned DOM node.

// to see the second sync byte, wait until we have enough data

// to see what path the root points to. On the way we may hit one of the

// to select from them based on their priority.

// to stabilize

// to stay in place.

// to switch statement in `completeWork`.

// to the algorithm must be the same. For example, we use the `renderLanes`

// to the document fragment

// to the end of the execution stack. The player is destroyed before then

// to the end. This breaks the guarantee that life-cycles fire in

// to the initSegment cache

// to the manifest object

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to the result

// to the right edge of the `SeekBar` and add to that any gap between the

// to the source buffer

// to the standard ASCII/Unicode. The two-byte keys that follow are the CEA608

// to the viewport origin (top left).

// to this case. If none is defined, JND is used instead.

// to throw, e.g. if it has a cross-origin src attribute.

// to true so that we don't trigger additional change events

// to unblock.

// to update this element.

// to work around IE not supporting custom drag previews.

// to write/read, add an empty attributes object for these cases.

// together more than necessary.

// together.

// track of how many dependencies remain but it gets tricky because

// track the amount of workingData that has been processed

// track.timelineStartInfo.baseMediaDecodeTime is the location, in time, where

// track: ID3v1.1 field added by Michael Mutschler

// track_ID

// trackinfo may cause an abort if the trackinfo

// tracking the number of packets received with dts === this.latestDts_, we

// tracks into a single segment

// tracks that don't need a display.

// transfer ownership of bytes back to us.

// transfer ownership of bytes to worker.

// transfer ownership of the underlying ArrayBuffer

// transformation: unity matrix

// translate audio and video streams to tracks

// transmuxed done action is fired after both audio/video pipelines are flushed

// transmuxed endedtimeline action is fired after both audio/video pipelines end their

// transmuxed partialdone action is fired after both audio/video pipelines are flushed

// traversal in a later effect. See PR #16820. We now clear the sibling

// traverse array

// traverseAllChildren used to do for objects as children

// treat calls to play_ somewhat like the `one` event function

// treat it like a new mount, even though an empty version of it already

// treat them as a break between items in the DOM when using arrow keys

// tree is part of a hydrating tree. This is used to determine if a child

// tree which will affect the tail. So we need to use the normal

// tree.

// tree. So we copy the primary child fragment's effect list, which does not

// tree. To do this we can use getClosestInstanceFromNode, but we

// trigger a mousemove event. This causes an issue when you're hiding

// trigger an abort: see https://xhr.spec.whatwg.org/#the-abort()-method

// trigger final timing info

// trigger firstplay to inform the source handler to ignore the next seek event

// trigger media change if the active media has been updated

// trigger mousedown/up.

// trigger this to allow MasterPlaylistController

// triggered on the document directly.

// triggered the connection error may also show as a ready state of 0 (unsent).

// trim gop list to the first gop found that has a matching pts with a gop in the list

// trim whitespace and remove optional quotes around the value

// trun flag constants

// truncate top 4 bytes

// try to extract the composed characters from the fallback object.

// try to get the type of the src that was passed in

// try to parse APEv2 header

// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake

// try-catch. Neat!

// trying to load the master OR while we were disposing of the tech

// ts or aac

// two add buffers.

// type

// type = event.type || event,

// type of the event.

// typeof check of "unknown" circumvents this issue (and is also

// types other than video.

// un-pause

// unblock the surrounding content. Then immediately retry after the

// undefined on initial render

// under any circumstances.

// undesired scrolling behavior when the player is in an iframe

// unencrypted bytes of the segment

// unfortunate because it triggers the slow path all the time. We need

// unified ._invoke helper method.

// unintuitive, though, because even though React has caught the error, from

// units

// unknown tag type

// unknown waiting corrections may be useful for monitoring QoS

// unlike current.memoizedProps which will be the unresolved ones.

// unmount all the children. componentDidCatch will schedule an update to

// unmounted.

// unpack any ADTS frames which have been fully received

// unravel them when transferring them to the base queue.

// until `blur` in IE8.

// until no matching pattern remains.

// until there is ~ 3 seconds of forward buffer available. PlaybackWatcher should also

// until we find a segment that contains `time` and return it

// until we receive more data.

// unusual case, but if it does occur should not

// unwanted click events.

// up necessary since we never stop tracking anymore.

// up text content during hydration mismatch). So we'll check this again.

// up the fiber tree from the target instance and attempt to find

// up/down buttons on an <input type="number">. Anonymous divs do not seem to

// update `currentSource` cache always

// update in the past but didn't complete it.

// update loader's sidxMapping with parsed sidx box

// update the SegmentLoader instead of doing it twice here and

// update the collected properties after the first render

// update the control-text

// update the internal poster variable

// update the manifest with the m3u8 entry from the parse stream

// update the mediaIndex on the SegmentInfo object

// update the mediaIndex on the SegmentLoader

// update the playlist reference within media groups

// update the progress bar time tooltip with the current time

// update the source to the initial source right away

// update the tech `src` cache

// update the tech's poster

// update the time mapping so we can translate from display time to media time

// update the timestampoffset

// update the width of the progress bar

// update to the current fiber, too, which means it will persist even if

// update will cause an error

// update/state.

// updateend events on source buffers. This does not appear to be in the spec. As such,

// updates at the same priority within the same event. To do this, the inputs

// updates) to a group of lanes (used for flushing work).

// updates, and deletions. To avoid needing to add a case for every possible

// updates, to preserve historical behavior of legacy mode.

// us to ship builds of React without the polyfilled plugins below.

// use as a base. When we reach the end of the base list, we must switch to

// use make it a noop by treating it as the default revealOrder.

// use parent's node as drag image. Neither works in IE though.

// use that

// use the prototype version instead.

// use the provided error or create one

// use the resolved media playlist object

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// useMutableSource, we should ensure that there is no partial work at the

// used for debugging

// used for testing

// used for tests

// used in error messages

// used to add stuffing to PES packets that don't fill a complete

// used to compute Connect's displayName from the wrapped component's displayName.

// used to get the classname of a nested styled component

// useful for monitoring QoS

// useful, so we don't use it.

// user interaction

// user will be considered inactive

// uses processed (transmuxed or parsed) media to determine the types required.

// using `which`.

// using events, since devices can have both touch and mouse events.

// using the ID of the original listener.

// using the calculated bandwidth from the progress event to allow the bitrate

// using the current time.

// utf-8 textstring

// v2.3: Involved people list

// valid selection is anchorNode and focusNode both equal to this node

// valid use-case where an init segment/data should be triggered without associated

// value atom

// value set by a create function in another component.

// value uses the end of the last segment if it is available. While this value

// value="" should make a value attribute (#6219)

// values are in referecne to their respective edges.

// values of profile_idc that indicate additional fields are included in the SPS

// values should be accessible on both the class and instance

// values.

// variable specified by delegate.resultName (see delegateYield).

// various flags for id and decoding

// vendor (skip)

// verify that the 2 layer bits are 0, aka this

// verify that the error was real and we are loaded

// version

// version 0

// version 1

// versionIndex number * 1000 (3.81 = 3810) (remember that 4-byte alignment causes this to take 4-bytes)

// vertresolution

// very earliest DTS we have seen in video because Chrome will

// very likely created by videojs-contrib-hls from information

// via an interval

// video and audio. We could use `undefined` here, but having a string

// video are always separate (and separately specified).

// video buffer underflow/underrun (note that this is not done when there is audio

// video buffer:   0 => 10.1, 10.2 => 20

// video element

// video first then audio

// video in the DOM (weird behavior only with minified version)

// video stalls). The player's time will reflect the playthrough of audio, so the

// video timeline for the segment

// video timeline for the segment, and add track info

// video tracks should contain an independent and disposable samples

// video underflow may be useful for monitoring QoS

// video, depending on the writing direction, and reverse our axis directions.

// videoTimingInfo is set after the segment is downloaded and transmuxed, and

// videojs-contrib-eme accepts the option of specifying: 'com.some.cdm': 'url'

// videojs.xhr no longer considers status codes outside of 200 and 0

// videojs.xhr now uses a specific code on the error

// videojs/videojs-contrib-hls#1225

// visual feedback, "flashing" outermost parent rectangles is sufficient.

// vjs.log(currentTime, cue.startTime);

// void

// volume panel expanding when hovered or active

// vtt tracks may use single file in BaseURL

// wait for 376 bytes before detecting no container

// wait for a `loadstart` to update the cache to `currentSrc`.

// wait for the transmuxed event since we may have audio and video

// wait one tick to allow haveMaster to run first on a child loader

// wait until the next time we yield.

// wait until the tech is ready to set the source

// waiting on one of the segment loaders to get enough data to create source buffers

// walk forward to see if a precise duration estimate can be made

// want to reconcile without matching against the existing set. This has the

// want to warn if we can't detect the priority

// warnings.

// was changed but the input saw no event or value set

// was copied.

// was initialized.

// was loaded

// was not updated using the player api

// was part of *our* root.

// was passed in and we need to copy the results of 'getBoundingClientRect'

// was previously checked to update will cause it to be come re-checked

// watch for that also.

// way this could possibly happen is if this was unmounted, if at all.

// way to access it when the onCommitRoot() hook is called.

// way to define them.

// we already scheduled one when we created the queue.

// we already threw above.

// we also don't want support bad code like autoplay='false'

// we are actually fully unblocked it will be fast to replay them.

// we are appending the muxer init segment

// we are not seeking and end of stream has already been called

// we bail out on a parent fiber that then captures an error thrown by

// we buffered times 0 to 100 with real times of 100 to 200, even though current

// we can accurately attribute time spent working on it, And so that cascading

// we can assume that they would have prevented this update.

// we can begin loading now that everything is ready

// we can check for matching boolean properties, but not all browsers

// we can continue to replace it without aborting even if it is not a text

// we can optimize this reconciliation pass by not tracking side-effects.

// we can re-append the init segment in the event that we get data from a new

// we can't make a solid case if there's no seekable, default to false

// we can't take the video.js controls fullscreen but we can go fullscreen

// we cannot be behind if

// we consider them active even if they're not moving their finger or mouse.

// we could not find an appropriate tech, but let's still notify the delegate that this is it

// we couldn't have known the appropriate pts and dts before

// we did find already has their listeners attached.

// we do an inner loop while we're still inside the host node.

// we do not have information on this specific

// we do not need anything but the streamDescriptor of the mp4a codecBox

// we do not want to toggle fullscreen state

// we do not want to/need to throttle duration changes,

// we don't care about invariant's own frame

// we don't have a silent frame pregenerated for the sample rate, so use a frame

// we don't have data, return nothing.

// we don't have to handle sourceclose since dispose will handle termination of

// we don't need anything but the "config" parameter of the

// we don't need to track live playback if the document is hidden,

// we don't need to update the play progress if the document is hidden,

// we don't overwrite the injected window.WebVTT if it loads right away

// we don't trigger the QuotaExceeded error

// we don't want the player to report touch activity on itself

// we don't want the tech to report user activity automatically.

// we don't yet have the start for whatever media type (video or audio) has

// we exhausted workingWord and still have not found a 1

// we filter those out.

// we find the first AUD

// we got a a property like outerHTML which we can't actually copy, ignore it

// we have data, return it

// we have no other playlist to switch to

// we have sidx mappings

// we have to build the index from byte locations to

// we have to dispose of event handlers correctly before that happens

// we have to make sure that child.name isn't in the techOrder since

// we have to manually remove event listeners

// we have to wait for the PMT to arrive as well before we

// we haven't gotten to hydrate it yet. There might still be a

// we haven't yet gotten a key frame, so reset nal units to wait for more nal

// we ignore all errors here, since when the component

// we just switched back to the page and someone may be looking, so, update ASAP

// we keep it false

// we keep track of which ones already failed during this batch.

// we know that the last error event is the correct one, because it's not

// we make sure to use segment.bytes here as that

// we must "resync" the segment loader when we switch renditions and

// we must have the start of a new ID3 tag. Assume anything

// we need at least 10 bytes to determine a type

// we need info from two childrend of each track fragment box

// we need some notion of whether the timestamp offset or other relevant information

// we need to clear out the fmp4 active init segment id, since

// we need to have appended data in order for the timestamp offset to be set

// we need to transfer the updates to that queue, too. Because the base

// we need to trap an event listener onto the target.

// we need to traverse up through the DOM till we find the correct

// we need to update the referenced segment so that timing information is

// we only want the first start value we encounter

// we only want this handler to be executed on the first 'change' event

// we pass in the meantime. That's going to be our tail in reverse

// we read something.

// we reloaded the same playlist so we are in a live scenario

// we set it to zero here to ensure that if we do start actually caching

// we should only be appending the next init segment if we detect a change, or if

// we should only put them on the work-in-progress queue, not the current one.

// we should probably never restart.

// we shouldn't set this.

// we still want to if preventDefault isn't supported (IE8).

// we then clamp the value to duration if necessary.

// we triggered the event on the remote text track list which doesn't

// we use str.trim as it will trim any whitespace characters

// we use the getter here to get the actual value set on src

// we want drag drop operation to start

// we want the start of the first segment to be placed

// we want to continually update the end time

// we want to make sure muted state is updated

// we want to report this error outside of the normal stack as a last resort.

// we were an insertion and now need to pop up reenter hydration of our

// we will add them all to the child before it gets rendered. That means

// we'd have a different number of entries on the stack depending on

// we'll have to schedule a deletion. To do that, this node needs a dummy

// we'll need to consider how to pull off dev-tooling

// we're bailing out early *without* evaluating the component, we need

// we've finished searching all of data

// we've run out of retries

// we've succeeded, now we need to go deeper

// webpackBootstrap

// weird character?

// well as nesting subscriptions of descendant components, so that we can ensure the

// whatever is in buffer already. This may occur in circumstances, for

// when DevTools forces us to display a fallback; we skip the first render

// when a key is defined for this segment, the encrypted bytes

// when considering updates across different priority levels, but isn't

// when double-clicking inside a control bar or a modal

// when iOS/Safari or other browsers attempt to autoplay.

// when multiple updates have the same source, and we only want to respond to

// when playing, let's ensure we smoothly update the play progress bar

// when recalculated before sending off to CoalesceStream

// when switching from demuxed audio/video to muxed audio/video (noted by no

// when the module is executed.

// when the request is aborted. This will prevent the loader from being stuck in the

// when the user is inputting text

// when the video is a live stream

// when they should be reading from current and writing to workInProgress.

// when type is audio?

// when using autoplay.

// when using this, you need to use the bind method when you remove the listener as well.

// when we are disabling other tracks (since we don't support

// when we call document.createEvent(). However this can cause confusing

// when we enter fullscreen playback, stop updating the snapshot and

// when we haven't started playing yet, the start of a live playlist

// where a click on the parent is significant

// where the parsing rules cause implicit opens or closes to be added.

// where the user has an older version of dnd-core like in

// where we should count the work of multiple passes.

// whether getRootHostContext() throws somewhere in renderer code or not.

// whether mapToProps needs to be invoked when props have changed.

// whether or not to update the SegmentLoader's state with this

// whether we should append an init segment.

// which branch we're currently rendering. Ideally we would model this using

// which can happen in any order for a new source

// which cannot be detected. Assuming that it is a US keyboard layout

// which child belongs to which set.

// which could also happen between now and the next loop, so we'll

// which is probably not what we want.

// which is the "Title/Songname/Content description" frame

// which may cause missed updates; we also must ensure the store subscription

// which may not happen if the playlist is resolved.

// which ones gets to ping. In theory we could get clever and keep

// which overrides globally set options.

// which we only know at the end of the request and should reflect total bytes

// which will be subsequently normalized to a Node of some kind.

// which will cause this if check to always fail.

// while the slider is active (the mouse has been pressed down and

// while we loop through.

// whitespace character.

// width

// will abruptly end the dragging, which is not obvious.

// will add the minimum number of fields specified by the guide

// will also be stalled, until after new appends.

// will be called again and this will be handled there.

// will be cased anyway with server rendering.

// will be true and the first byte of the payload will indicate

// will commit it even if something suspended.

// will have a length of 0, failing this check.

// will load the data & process the response in a special response object

// will populate textContent as well.

// will receive the previous state. This effectively populates

// will result in captions being re-parsed for certain segments. If we add them again

// will sometimes influence the value of checked (even after detachment).

// will still be current since we haven't rendered them yet. The mounted

// will still happily dispatch `dragover` despite target being no longer

// will throw again, if neither props nor store state

// will work properly for other components

// window.event assignment in both IE <= 10 as they throw an error

// with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?

// with < v2

// with a lower index than this, it is cleared from the display

// with current event handlers.

// with findDOMNode and how it requires the sibling field to carry out

// with native controls

// with switching to a playlist that might save us a fraction of a second.

// with the Javascript Ninja code. So we're just overriding all events now.

// with the currentUpdateLanePriority above. As an example of how this

// with the most recent appeneded data. This will make sure that when appending

// with the normal suspend path.

// with the previous one.

// within that segment. Since the transmuxer maintains a cache of incomplete data

// within the master playlist

// without a seekable range, the player cannot seek to begin buffering at the live

// without calling the reducer again.

// without clearing we will have two of the same captions visible.

// without having to recalculate it. We will also use it in commitWork() to

// without immediately flushing it. We only do this for user-initiated

// won't dispatch.

// won't update its child set by applying minimal side-effects. Instead,

// word

// word 0

// word 1

// word 2

// word 3

// word 4

// word-level access to the encrypted bytes

// work is current during componentDidMount/Update.

// work triggered during the render phase will be associated with it.

// work without treating it as a typical update that originates from an event;

// work, so we want to set both property and attribute

// work-in-progress hook.

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// works around https://bugs.chromium.org/p/chromium/issues/detail?id=895449

// worth fixing.

// worth it because we expect very few discrete events to queue up and once

// would have $Time$ values of [0, 1, 2, 5]

// wrap native functions with a function

// wrapper function to constrain it.

// wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)

// write the sample table

// written right-to-left for sure. It was generated by pulling all the strong

// xhr.responseXML will throw Exception "InvalidStateError" or "DOMException"

// xtra header only exists in first frame

// yet. If it is, then it will have a pending insertion effect on it.

// you've misconfigured your bundler to force strict mode and applied a

// {

// |

// }

// ~

// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.

// ¡

// ¢

// £

// ¤

// ¥

// ©

// «

// ®

// °

// »

// ½

// ¿

// À

// Á

// Â

// Ã

// Ä

// Å

// Ç

// È

// É

// Ê

// Ë

// Ì

// Í

// Î

// Ï

// Ñ

// Ò

// Ó

// Ô

// Õ

// Ö

// Ø

// Ù

// Ú

// Û

// Ü

// ß

// à

// á

// â

// ã

// ä

// å

// ç

// è

// é

// ê

// ë

// ì

// í

// î

// ï

// ñ

// ò

// ó

// ô

// õ

// ö

// ÷

// ø

// ù

// ú

// û

// ü

// —

// ‘

// “

// ”

// •

// ℠

// ™

// │

// ┌

// ┐

// └

// █

// ♪

//# sourceMappingURL=invariant.esm.js.map

//# sourceMappingURL=shallowequal.esm.js.map

//# sourceMappingURL=styled-components.browser.esm.js.map

//# sourceMappingURL=stylis.min.js.map

////case TEXT_NODE:

//<!DOCTYPE

//Compatible state

//Don't override existing accept header declared by user

//IE8 CORS GET successful response doesn't have a status field, but body is fine

//IE9 may still call readystatechange

//LexicalHandler

//S_ATTR_SPACE,	S_ATTR_END,	S_TAG_SPACE, S_TAG_CLOSE

//S_TAG,	S_ATTR,	S_EQ,	S_ATTR_NOQUOT_VALUE

//TODO:

//TODO: 这里有可能sax回退，有位置错误风险

//TODO:..

//[4]   	NameStartChar	   ::=   	":" | [A-Z] | "_" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]

//[4a]   	NameChar	   ::=   	NameStartChar | "-" | "." | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]

//[5]   	Name	   ::=   	NameStartChar (NameChar)*

//\u10000-\uEFFFF

//append comment source.substring(4,end)//<!--

//appendChild and setAttributeNS are preformance key

//attrName

//audio.removeEventListener("ended", switchMusic);

//audio.src = "";

//buf.sort.apply(attrs, attributeSorter);

//can not hit in level3

//can not set prefix,because prefix !== ''

//cannot be imported.

//case CDATA_SECTION_NODE:

//case COMMENT_NODE:

//case DOCUMENT_NODE:

//case DOCUMENT_TYPE_NODE:

//case ENTITY_NODE:

//case ENTITY_REFERENCE_NODE:

//case NOTATION_NODE:

//case NOTATION_NODE：

//case PROCESSING_INSTRUCTION_NODE:

//case S_ATTR:void();break;

//case S_ATTR_NOQUOT_VALUE:void();break;

//case S_ATTR_SPACE:

//case S_EQ:

//case S_TAG:void();break;

//case S_TAG_CLOSE:

//case S_TAG_SPACE:

//closed el<el />

//console.dir(el)

//console.dir(map)

//console.error('#@@@@@@'+tagName)

//console.error(3,true,node.flag,node.prefix,node.namespaceURI)

//console.error(config);

//console.error(parseStack.length,parseStack)

//console.log("__aa",parentNode.lastChild.nextSibling == null)

//console.log('###',this.nodeType,uri,prefix,buf.join(''))

//console.log('#\n\n\n\n\n\n\n####')

//console.log('@@@@',node.tagName,prefix,uri,visibleNamespaces)

//console.log('p++',p)

//console.log('remove attr:'+attr)

//console.log()

//console.log(1)

//console.log(attr.nodeName,key)

//console.log(attrName,value,start,p)

//console.log(chars)

//console.log(currentNSMap,0)

//console.log(isHTML,uri,prefix=='')

//console.log(ls.length)

//console.log(node.nodeType,node.tagName,ns.prefix,prefix)

//console.log(parentNode.lastChild.nextSibling == null)

//console.log(tagName)

//console.log(this == oldAttr.ownerElement)

//console.log(value)

//const add = action.album.filter(m=> state.some(s=> s.path === m.path));

//const newAudio = new Audio();

//default:throw e;

//dispatch(audioStatus_set(newAudio));

//do dynamic

//document factory method:

//el.prefix = null;

//end document

//end outer switch

//endPrefixMapping and startPrefixMapping have not any help for dom builder

//equal

//error

//errorHandler.error('element parse error: '+e);

//fatalError: equal must after attrName or space after attrName

//fatalError: no end quot match

//fatalError: no equal before

//for level2

//for(var i=0;i<len;i++){

//four real opeartion method

//get real attribute name,and remove it by removeAttributeNode

//hack!!

//has some bugs

//has to be after open

//html input fileの場合、ファイルタイプの変換が必要だがlocalのパスを取得できる環境下では不要　

//ie8

//if is cdata child node

//if(!/\]\]>/.test(text)){

//if(isHTML && prefix ==null && uri == 'http://www.w3.org/1999/xhtml'){

//if(tagName in closeMap){

//if(typeof require == 'function'){

//ignore warning

//implementation : null,

//important!!

//isHTML = true;

//java sax connect width xmldom on rhino(what about: "? && !(chars instanceof String)")

//lexHandler.startCDATA();

//localNSMap = null

//no prefix attribute has no namespace

//no prefix element has default namespace

//node.flag = '11111'

//node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));

//normal

//not space

//parseStack.push(el);

//prefix == null for no ns prefix attribute 

//raises 

//readonly attribute DOMString        internalSubset;

//remember xhr can in fact be XDR for CORS in IE

//setAudio(newAudio);

//skip <

//space

//startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId) 

//status

//tagName

//throw new Error('unexpected end of input')

//try{//attribute position fixed

//update childNodes

//update namespace

//used in characters() methods

//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,

//var attrs = node2.attributes;

//var len = attrs.length;

//visibleNamespaces.length = startVisibleNamespaces;

//}

//} 

//}catch(e){console.error('@@@@@'+e)}

//}else{//text area

//忘记闭合
