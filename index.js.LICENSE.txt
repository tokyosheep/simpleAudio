/*
    {
        albums:[
            {
                musics:musicData[],
                name:string,
                path:string
            }
        ],
        playList:PlayListClass[
            currentMusicIndex:number,
            index:number,
            musics:music[],
            name:string,
            selected:boolean
        ]
    }
*/

/*
 * Default compareKeys function will work for numbers, strings and dates
 */

/* binding */

/* harmony export */

/* harmony import */

/* webpack/runtime/compat get default export */

/*!   exports [maybe provided (runtime-defined)] [no usage info] */

/*! ./DataBase */

/*! ./bst */

/*! ./cursor */

/*! ./customUtils */

/*! ./executor */

/*! ./indexes */

/*! ./ipcCmmut */

/*! ./lib/avltree */

/*! ./lib/bst */

/*! ./lib/datastore */

/*! ./model */

/*! ./persistence */

/*! ./storage */

/*! CommonJS bailout: exports is used directly at 59:6-13 */

/*! CommonJS bailout: module.exports is used directly at 136:0-14 */

/*! CommonJS bailout: module.exports is used directly at 204:0-14 */

/*! CommonJS bailout: module.exports is used directly at 294:0-14 */

/*! CommonJS bailout: module.exports is used directly at 314:0-14 */

/*! CommonJS bailout: module.exports is used directly at 3:0-14 */

/*! CommonJS bailout: module.exports is used directly at 455:0-14 */

/*! CommonJS bailout: module.exports is used directly at 543:0-14 */

/*! CommonJS bailout: module.exports is used directly at 58:41-55 */

/*! CommonJS bailout: module.exports is used directly at 59:16-30 */

/*! CommonJS bailout: module.exports is used directly at 5:0-14 */

/*! CommonJS bailout: module.exports is used directly at 704:0-14 */

/*! CommonJS bailout: module.exports is used directly at 78:0-14 */

/*! CommonJS bailout: this is used directly at 1226:8-12 */

/*! async */

/*! binary-search-tree */

/*! crypto */

/*! default exports */

/*! dynamic exports */

/*! electron */

/*! events */

/*! export AVLTree [provided] [no usage info] [provision prevents renaming (no use info)] -> ./node_modules/binary-search-tree/lib/avltree.js */

/*! export BinarySearchTree [provided] [no usage info] [provision prevents renaming (no use info)] -> ./node_modules/binary-search-tree/lib/bst.js */

/*! export __esModule [maybe provided (runtime-defined)] [no usage info] [provision prevents renaming (no use info)] */

/*! export areThingsEqual [provided] [no usage info] [missing usage info prevents renaming] */

/*! export checkObject [provided] [no usage info] [missing usage info prevents renaming] */

/*! export compareThings [provided] [no usage info] [missing usage info prevents renaming] */

/*! export deepCopy [provided] [no usage info] [missing usage info prevents renaming] */

/*! export defaultCheckValueEquality [provided] [no usage info] [missing usage info prevents renaming] */

/*! export defaultCompareKeysFunction [provided] [no usage info] [missing usage info prevents renaming] */

/*! export deserialize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getDotValue [provided] [no usage info] [missing usage info prevents renaming] */

/*! export getRandomArray [provided] [no usage info] [missing usage info prevents renaming] */

/*! export initDataBaseEvent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export initIpcEvent [provided] [no usage info] [missing usage info prevents renaming] */

/*! export isPrimitiveType [provided] [no usage info] [missing usage info prevents renaming] */

/*! export match [provided] [no usage info] [missing usage info prevents renaming] */

/*! export modify [provided] [no usage info] [missing usage info prevents renaming] */

/*! export serialize [provided] [no usage info] [missing usage info prevents renaming] */

/*! export uid [provided] [no usage info] [missing usage info prevents renaming] */

/*! exports [maybe provided (runtime-defined)] [no usage info] */

/*! exports [not provided] [no usage info] */

/*! fs */

/*! mkdirp */

/*! namespace exports */

/*! nedb */

/*! other exports [maybe provided (runtime-defined)] [no usage info] */

/*! other exports [not provided] [no usage info] */

/*! path */

/*! runtime requirements: __webpack_exports__, module */

/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: __webpack_require__, module */

/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__, __webpack_require__.d, __webpack_require__.* */

/*! runtime requirements: module */

/*! runtime requirements: module, __webpack_exports__, top-level-this-exports */

/*! runtime requirements: module, __webpack_require__ */

/*! underscore */

/*! unknown exports (runtime-defined) */

/*! util */

/*!*********************!*\
  !*** external "fs" ***!
  \*********************/

/*!***********************!*\
  !*** ./main/index.ts ***!
  \***********************/

/*!***********************!*\
  !*** external "path" ***!
  \***********************/

/*!***********************!*\
  !*** external "util" ***!
  \***********************/

/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/

/*!*************************!*\
  !*** external "events" ***!
  \*************************/

/*!**************************!*\
  !*** ./main/DataBase.ts ***!
  \**************************/

/*!**************************!*\
  !*** ./main/ipcCmmut.ts ***!
  \**************************/

/*!***************************!*\
  !*** external "electron" ***!
  \***************************/

/*!************************************!*\
  !*** ./node_modules/nedb/index.js ***!
  \************************************/

/*!**************************************!*\
  !*** ./node_modules/mkdirp/index.js ***!
  \**************************************/

/*!****************************************!*\
  !*** ./node_modules/nedb/lib/model.js ***!
  \****************************************/

/*!*****************************************!*\
  !*** ./node_modules/nedb/lib/cursor.js ***!
  \*****************************************/

/*!******************************************!*\
  !*** ./node_modules/nedb/lib/indexes.js ***!
  \******************************************/

/*!******************************************!*\
  !*** ./node_modules/nedb/lib/storage.js ***!
  \******************************************/

/*!*******************************************!*\
  !*** ./node_modules/nedb/lib/executor.js ***!
  \*******************************************/

/*!********************************************!*\
  !*** ./node_modules/nedb/lib/datastore.js ***!
  \********************************************/

/*!**********************************************!*\
  !*** ./node_modules/nedb/lib/customUtils.js ***!
  \**********************************************/

/*!**********************************************!*\
  !*** ./node_modules/nedb/lib/persistence.js ***!
  \**********************************************/

/*!***********************************************!*\
  !*** ./node_modules/underscore/underscore.js ***!
  \***********************************************/

/*!**************************************************!*\
  !*** ./node_modules/binary-search-tree/index.js ***!
  \**************************************************/

/*!****************************************************!*\
  !*** ./node_modules/binary-search-tree/lib/bst.js ***!
  \****************************************************/

/*!********************************************************!*\
  !*** ./node_modules/binary-search-tree/lib/avltree.js ***!
  \********************************************************/

/*!***********************************************************!*\
  !*** ./node_modules/nedb/node_modules/async/lib/async.js ***!
  \***********************************************************/

/*!************************************************************!*\
  !*** ./node_modules/binary-search-tree/lib/customUtils.js ***!
  \************************************************************/

/*#__PURE__*/

/**
 * Add an element to an array field only if it is not already in it
 * No modification if the element is already in the array
 * Note that it doesn't check whether the original array contains duplicates
 */

/**
 * Add one or several document(s) to all indexes
 */

/**
 * Add the use of a projection
 * @param {Object} projection - MongoDB-style projection. {} means take all fields. Then it's { key1: 1, key2: 1 } to take only key1 and key2
 *                              { key1: 0, key2: 0 } to omit only key1 and key2. Except _id, you can't mix takes and omits
 */

/**
 * Apply the projection
 */

/**
 * Arithmetic and comparison operators
 * @param {Native value} a Value in the object
 * @param {Native value} b Value in the query
 */

/**
 * Check a DB object and throw an error if it's not valid
 * Works by applying the above checkKey function to all fields recursively
 */

/**
 * Check a key, throw an error if the key is non valid
 * @param {String} k key
 * @param {Model} v value, needed to treat the Date edge case
 * Non-treatable edge cases here: if part of the object if of the form { $$date: number } or { $$deleted: true }
 * Its serialized-then-deserialized version it will transformed into a Date object
 * But you really need to want it to trigger such behaviour, even when warned not to use '$' at the beginning of the field names...
 */

/**
 * Check if a directory exists and create it on the fly if it is not the case
 * cb is optional, signature: err
 */

/**
 * Check that a tree is a BST as defined here (node ordering and pointer references)
 */

/**
 * Check that all nodes (incl. leaves) fullfil condition given by fn
 * test is a function passed every (key, data) and which throws if the condition is not met
 */

/**
 * Check that all pointers are coherent in this tree
 */

/**
 * Check that the balance factors are all between -1 and 1
 */

/**
 * Check that the core BST properties on node ordering are verified
 * Throw if they aren't
 */

/**
 * Check that two values are comparable
 */

/**
 * Check the recorded height is correct for every node
 * Throws if one height doesn't match
 */

/**
 * Check whether 'things' are equal
 * Things are defined as any native types (string, number, boolean, null, date) and objects
 * In the case of object, we check deep equality
 * Returns true if they are, false otherwise
 */

/**
 * Check whether two values are equal (used in non-unique deletion)
 */

/**
 * Compare { things U undefined }
 * Things are defined as any native types (string, number, boolean, null, date) and objects
 * We need to compare with undefined as it will be used in indexes
 * In the case of objects and arrays, we deep-compare
 * If two objects dont have the same type, the (arbitrary) type hierarchy is: undefined, null, number, strings, boolean, dates, arrays, objects
 * Return -1 if a < b, 1 if a > b and 0 if a = b (note that equality here is NOT the same as defined in areThingsEqual!)
 *
 * @param {Function} _compareStrings String comparing function, returning -1, 0 or 1, overriding default string comparison (useful for languages with accented letters)
 */

/**
 * Constructor
 * @param {Object} options Optional
 * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not
 * @param {Key}      options.key Initialize this BST's key with key
 * @param {Value}    options.value Initialize this BST's data with [value]
 * @param {Function} options.compareKeys Initialize this BST's compareKeys
 */

/**
 * Constructor
 * We can't use a direct pointer to the root node (as in the simple binary search tree)
 * as the root will change during tree rotations
 * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not
 * @param {Function} options.compareKeys Initialize this BST's compareKeys
 */

/**
 * Constructor of the internal AVLTree
 * @param {Object} options Optional
 * @param {Boolean}  options.unique Whether to enforce a 'unique' constraint on the key or not
 * @param {Key}      options.key Initialize this BST's key with key
 * @param {Value}    options.value Initialize this BST's data with [value]
 * @param {Function} options.compareKeys Initialize this BST's compareKeys
 */

/**
 * Count all documents matching the query
 * @param {Object} query MongoDB-style query
 */

/**
 * Create a BST similar (i.e. same options except for key and value) to the current one
 * Use the same constructor (i.e. BinarySearchTree, AVLTree etc)
 * @param {Object} options see constructor
 */

/**
 * Create a new Persistence object for database options.db
 * @param {Datastore} options.db
 * @param {Boolean} options.nodeWebkitAppName Optional, specify the name of your NW app if you want options.filename to be relative to the directory where
 *                                            Node Webkit stores application data such as cookies and local storage (the best place to store data in my opinion)
 */

/**
 * Create a new _id that's not already in use
 */

/**
 * Create a new collection
 * @param {String} options.filename Optional, datastore will be in-memory only if not provided
 * @param {Boolean} options.timestampData Optional, defaults to false. If set to true, createdAt and updatedAt will be created and populated automatically (if not specified by user)
 * @param {Boolean} options.inMemoryOnly Optional, defaults to false
 * @param {String} options.nodeWebkitAppName Optional, specify the name of your NW app if you want options.filename to be relative to the directory where
 *                                            Node Webkit stores application data such as cookies and local storage (the best place to store data in my opinion)
 * @param {Boolean} options.autoload Optional, defaults to false
 * @param {Function} options.onload Optional, if autoload is used this will be called after the load database with the error object as parameter. If you don't pass it the error will be thrown
 * @param {Function} options.afterSerialization/options.beforeDeserialization Optional, serialization hooks
 * @param {Number} options.corruptAlertThreshold Optional, threshold after which an alert is thrown if too much data is corrupt
 * @param {Function} options.compareStrings Optional, string comparison function that overrides default for sorting
 *
 * Event Emitter - Events
 * * compaction.done - Fired whenever a compaction operation was finished
 */

/**
 * Create a new cursor for this collection
 * @param {Datastore} db - The datastore this cursor is bound to
 * @param {Query} query - The query this cursor will operate on
 * @param {Function} execFn - Handler to be executed after cursor has found the results and before the callback passed to find/findOne/update/remove
 */

/**
 * Create a new index
 * All methods on an index guarantee that either the whole operation was successful and the index changed
 * or the operation was unsuccessful and an error is thrown while the index is unchanged
 * @param {String} options.fieldName On which field should the index apply (can use dot notation to index on sub fields)
 * @param {Boolean} options.unique Optional, enforce a unique constraint (default: false)
 * @param {Boolean} options.sparse Optional, allow a sparse index (we can have documents for which fieldName is undefined) (default: false)
 */

/**
 * Create the left child of this BST and return it
 */

/**
 * Create the right child of this BST and return it
 */

/**
 * Deep copy a DB object
 * The optional strictKeys flag (defaulting to false) indicates whether to copy everything or only fields
 * where the keys are valid, i.e. don't begin with $ and don't contain a .
 */

/**
 * Delete a key or just a value
 * @param {Key} key
 * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted
 */

/**
 * Delete a key or just a value and return the new root of the tree
 * @param {Key} key
 * @param {Value} value Optional. If not set, the whole key is deleted. If set, only this value is deleted
 */

/**
 * Delete the current node if it has only one child
 * Return true if it was deleted
 */

/**
 * Delete the current node if it is a leaf
 * Return true if it was deleted
 */

/**
 * Ensure an index is kept for this field. Same parameters as lib/indexes
 * For now this function is synchronous, we need to test how much time it takes
 * We use an async API for consistency with the rest of the code
 * @param {String} options.fieldName
 * @param {Boolean} options.unique
 * @param {Boolean} options.sparse
 * @param {Number} options.expireAfterSeconds - Optional, if set this index becomes a TTL index (only works on Date fields, not arrays of Date)
 * @param {Function} cb Optional callback, signature: err
 */

/**
 * Ensure the datafile contains all the data, even if there was a crash during a full file write
 * @param {String} filename
 * @param {Function} callback signature: err
 */

/**
 * Execute a function on every node of the tree, in key order
 * @param {Function} fn Signature: node. Most useful will probably be node.key and node.data
 */

/**
 * Explicit name ...
 */

/**
 * Find all documents matching the query
 * If no callback is passed, we return the cursor so that user can limit, skip and finally exec
 * @param {Object} query MongoDB-style query
 * @param {Object} projection MongoDB-style projection
 */

/**
 * Find one document matching the query
 * @param {Object} query MongoDB-style query
 * @param {Object} projection MongoDB-style projection
 */

/**
 * Flush data in OS buffer to storage if corresponding option is set
 * @param {String} options.filename
 * @param {Boolean} options.isDir Optional, defaults to false
 * If options is a string, it is assumed that the flush of the file (not dir) called options was requested
 */

/**
 * From a database's raw data, return the corresponding
 * machine understandable collection
 */

/**
 * From a one-line representation of an object generate by the serialize function
 * Return the object itself
 */

/**
 * Fully write or rewrite the datafile, immune to crashes during the write operation (data will not be lost)
 * @param {String} filename
 * @param {String} data
 * @param {Function} cb Optional callback, signature: err
 */

/**
 * Get a value from object with dot notation
 * @param {Object} obj
 * @param {String} field
 */

/**
 * Get all data for a key between bounds
 * Return it in key order
 * @param {Object} query Mongo-style query where keys are $lt, $lte, $gt or $gte (other keys are not considered)
 * @param {Functions} lbm/ubm matching functions calculated at the first recursive step
 */

/**
 * Get all documents in index whose key is between bounds are they are defined by query
 * Documents are sorted by key
 * @param {Query} query
 * @return {Array of documents}
 */

/**
 * Get all documents in index whose key match value (if it is a Thing) or one of the elements of value (if it is an array of Things)
 * @param {Thing} value Value to match the key against
 * @return {Array of documents}
 */

/**
 * Get all elements in the index
 * @return {Array of documents}
 */

/**
 * Get all matching elements
 * Will return pointers to matched elements (shallow copies), returning full copies is the role of find or findOne
 * This is an internal function, use exec which uses the executor
 *
 * @param {Function} callback - Signature: err, results
 */

/**
 * Get an array of all the data in the database
 */

/**
 * Get number of keys inserted
 */

/**
 * Get the descendant with max key
 */

/**
 * Get the descendant with min key
 */

/**
 * Get the maximum key
 */

/**
 * Get the minimum key
 */

/**
 * Handle every persistence-related task
 * The interface Datastore expects to be implemented is
 * * Persistence.loadDatabase(callback) and callback has signature err
 * * Persistence.persistNewState(newDocs, callback) where newDocs is an array of documents and callback has signature err
 */

/**
 * Handle models (i.e. docs)
 * Serialization/deserialization
 * Copying
 * Querying, update
 */

/**
 * If executor is ready, queue task (and process it immediately if executor was idle)
 * If not, buffer task for later processing
 * @param {Object} task
 *                 task.this - Object to use as this
 *                 task.fn - Function to execute
 *                 task.arguments - Array of arguments, IMPORTANT: only the last argument may be a function (the callback)
 *                                                                 and the last argument cannot be false/undefined/null
 * @param {Boolean} forceQueuing Optional (defaults to false) force executor to queue task even if it is not ready
 */

/**
 * If newDoc is an array of documents, this will insert all documents in the cache
 * @api private
 */

/**
 * If one insertion fails (e.g. because of a unique constraint), roll back all previous
 * inserts and throws the error
 * @api private
 */

/**
 * Increment a numeric field's value
 */

/**
 * Inherit basic functions from the basic binary search tree
 */

/**
 * Insert a key, value pair in the tree while maintaining the AVL tree height constraint
 * Return a pointer to the root node, which may have changed
 */

/**
 * Insert a new document
 * @param {Function} cb Optional callback, signature: err, insertedDoc
 *
 * @api private Use Datastore.insert which has the same signature
 */

/**
 * Insert a new document in the index
 * If an array is passed, we insert all its elements (if one insertion fails the index is not modified)
 * O(log(n))
 */

/**
 * Insert a new element
 */

/**
 * Insert an array of documents in the index
 * If a constraint is violated, the changes should be rolled back and an error thrown
 *
 * @API private
 */

/**
 * Inverted match of the query
 * @param {Model} obj
 * @param {Query} query
 */

/**
 * Keep a pointer to the internal tree constructor for testing purposes
 */

/**
 * Load the database
 * 1) Create all indexes
 * 2) Insert all data
 * 3) Compact the database
 * This means pulling data out of the data file or creating it if it doesn't exist
 * Also, all data is persisted right away, which has the effect of compacting the database file
 * This operation is very quick at startup for a big collection (60ms for ~10k docs)
 * @param {Function} cb Optional callback, signature: err
 */

/**
 * Load the database from the datafile, and trigger the execution of buffered commands if any
 */

/**
 * Manage access to data, be it to find, update or remove it
 */

/**
 * Match all of the subqueries
 * @param {Model} obj
 * @param {Array of Queries} query
 */

/**
 * Match an object against a specific { key: value } part of a query
 * if the treatObjAsValue flag is set, don't try to match every part separately, but the array as a whole
 */

/**
 * Match any of the subqueries
 * @param {Model} obj
 * @param {Array of Queries} query
 */

/**
 * Modify a DB object according to an update query
 */

/**
 * Modify the tree if its left subtree is too small compared to the right
 * Return the new root if any
 */

/**
 * Modify the tree if its right subtree is too small compared to the left
 * Return the new root if any
 */

/**
 * Other functions we want to use on an AVLTree as if it were the internal _AVLTree
 */

/**
 * Perform a left rotation of the tree if possible
 * and return the root of the resulting tree
 * The resulting tree's nodes' heights are also updated
 */

/**
 * Perform a right rotation of the tree if possible
 * and return the root of the resulting tree
 * The resulting tree's nodes' heights are also updated
 */

/**
 * Persist cached database
 * This serves as a compaction function since the cache always contains only the number of documents in the collection
 * while the data file is append-only so it may grow larger
 * @param {Function} cb Optional callback, signature: err
 */

/**
 * Persist new state for the given newDocs (can be insertion, update or removal)
 * Use an append-only format
 * @param {Array} newDocs Can be empty if no doc was updated/removed
 * @param {Function} cb Optional, signature: err
 */

/**
 * Prepare a document (or array of documents) to be inserted in a database
 * Meaning adds _id and timestamps if necessary on a copy of newDoc to avoid any side effect on user input
 * @api private
 */

/**
 * Pretty print a tree
 * @param {Boolean} printData To print the nodes' data along with the key
 */

/**
 * Push an element to the end of an array field
 * Optional modifier $each instead of value to push several values
 * Optional modifier $slice to slice the resulting array, see https://docs.mongodb.org/manual/reference/operator/update/slice/
 * Différeence with MongoDB: if $slice is specified and not $each, we act as if value is an empty array
 */

/**
 * Queue a rewrite of the datafile
 */

/**
 * Queue all tasks in buffer (in the same order they came in)
 * Automatically sets executor as ready
 */

/**
 * Rebalance the tree along the given path. The path is given reversed (as he was calculated
 * in the insert and delete functions).
 * Returns the new root of the tree
 * Of course, the first element of the path must be the root of the tree
 */

/**
 * Remove a document from the index
 * If an array is passed, we remove all its elements
 * The remove operation is safe with regards to the 'unique' constraint
 * O(log(n))
 */

/**
 * Remove all docs matching the query
 * For now very naive implementation (similar to update)
 * @param {Object} query
 * @param {Object} options Optional options
 *                 options.multi If true, can update multiple documents (defaults to false)
 * @param {Function} cb Optional callback, signature: err, numRemoved
 *
 * @api private Use Datastore.remove which has the same signature
 */

/**
 * Remove an index
 * @param {String} fieldName
 * @param {Function} cb Optional callback, signature: err
 */

/**
 * Remove one or several document(s) from all indexes
 */

/**
 * Remove the first or last element of an array
 */

/**
 * Removes all instances of a value from an existing array
 */

/**
 * Reset all currently defined indexes
 */

/**
 * Reset an index
 * @param {Document or Array of documents} newData Optional, data to initialize the index with
 *                                                 If an error is thrown during insertion, the index is not modified
 */

/**
 * Responsible for sequentially executing actions on the database
 */

/**
 * Return a function that tells whether a given key matches a lower bound
 */

/**
 * Return a function that tells whether a given key matches an upper bound
 */

/**
 * Return a random alphanumerical string of length len
 * There is a very small probability (less than 1/1,000,000) for the length to be less than len
 * (il the base64 conversion yields too many pluses and slashes) but
 * that's not an issue here
 * The probability of a collision is extremely small (need 3*10^12 documents to have one chance in a million of a collision)
 * See http://en.wikipedia.org/wiki/Birthday_problem
 */

/**
 * Return an array with the numbers from 0 to n-1, in a random order
 */

/**
 * Return the balance factor
 */

/**
 * Return the list of candidates for a given query
 * Crude implementation for now, we return the candidates given by the first usable index if any
 * We try the following query types, in this order: basic match, $in match, comparison match
 * One way to make it better would be to enable the use of multiple indexes if the first usable index
 * returns too much data. I may do it in the future.
 *
 * Returned candidates will be scanned to find and remove all expired documents
 *
 * @param {Query} query
 * @param {Boolean} dontExpireStaleDocs Optional, defaults to false, if true don't remove stale docs. Useful for the remove function which shouldn't be impacted by expirations
 * @param {Function} callback Signature err, docs
 */

/**
 * Return the path the datafile if the given filename is relative to the directory where Node Webkit stores
 * data for this application. Probably the best place to store data
 */

/**
 * Revert an update
 */

/**
 * Search for all data corresponding to a key
 */

/**
 * Self-balancing binary search tree using the AVL implementation
 */

/**
 * Serialize an object to be persisted to a one-line string
 * For serialization/deserialization, we use the native JSON parser and not eval or Function
 * That gives us less freedom but data entered in the database may come from users
 * so eval and the like are not safe
 * Accepted primitive types: Number, String, Boolean, Date, null
 * Accepted secondary types: Objects, Arrays
 */

/**
 * Set a field to a new value
 */

/**
 * Set a limit to the number of results
 */

/**
 * Set automatic compaction every interval ms
 * @param {Number} interval in milliseconds, with an enforced minimum of 5 seconds
 */

/**
 * Simple binary search tree
 */

/**
 * Skip a the number of results
 */

/**
 * Sort results of the query
 * @param {SortQuery} sortQuery - SortQuery is { field: order }, field can use the dot-notation, order is 1 for ascending and -1 for descending
 */

/**
 * Stop autocompaction (do nothing if autocompaction was not running)
 */

/**
 * Tell if a given document matches a query
 * @param {Object} obj Document to check
 * @param {Object} query
 */

/**
 * Tells if an object is a primitive type or a "real" object
 * Arrays are considered primitive
 */

/**
 * The signature of modifier functions is as follows
 * Their structure is always the same: recursively follow the dot notation while creating
 * the nested documents if needed, then apply the "last step modifier"
 * @param {Object} obj The model to modify
 * @param {String} field Can contain dots, in that case that means we will set a subfield recursively
 * @param {Model} value
 */

/**
 * Two indexed pointers are equal iif they point to the same place
 */

/**
 * Type-aware projection
 */

/**
 * Unset a field
 */

/**
 * Update a document in the index
 * If a constraint is violated, changes are rolled back and an error thrown
 * Naive implementation, still in O(log(n))
 */

/**
 * Update all docs matching query
 * @param {Object} query
 * @param {Object} updateQuery
 * @param {Object} options Optional options
 *                 options.multi If true, can update multiple documents (defaults to false)
 *                 options.upsert If true, document is inserted if the query doesn't match anything
 *                 options.returnUpdatedDocs Defaults to false, if true return as third argument the array of updated matched documents (even if no change actually took place)
 * @param {Function} cb Optional callback, signature: (err, numAffected, affectedDocuments, upsert)
 *                      If update was an upsert, upsert flag is set to true
 *                      affectedDocuments can be one of the following:
 *                        * For an upsert, the upserted document
 *                        * For an update with returnUpdatedDocs option false, null
 *                        * For an update with returnUpdatedDocs true and multi false, the updated document
 *                        * For an update with returnUpdatedDocs true and multi true, the array of updated documents
 *
 * WARNING: The API was changed between v1.7.4 and v1.8, for consistency and readability reasons. Prior and including to v1.7.4,
 *          the callback signature was (err, numAffected, updated) where updated was the updated document in case of an upsert
 *          or the array of updated documents for an update if the returnUpdatedDocs option was true. That meant that the type of
 *          affectedDocuments in a non multi update depended on whether there was an upsert or not, leaving only two ways for the
 *          user to check whether an upsert had occured: checking the type of affectedDocuments or running another find query on
 *          the whole dataset to check its size. Both options being ugly, the breaking change was necessary.
 *
 * @api private Use Datastore.update which has the same signature
 */

/**
 * Update multiple documents in the index
 * If a constraint is violated, the changes need to be rolled back
 * and an error thrown
 * @param {Array of oldDoc, newDoc pairs} pairs
 *
 * @API private
 */

/**
 * Update one or several documents in all indexes
 * To update multiple documents, oldDoc must be an array of { oldDoc, newDoc } pairs
 * If one update violates a constraint, all changes are rolled back
 */

/**
 * Updates the value of the field, only if specified field is greater than the current value of the field
 */

/**
 * Updates the value of the field, only if specified field is smaller than the current value of the field
 */

/**
 * Use a function to match
 * @param {Model} obj
 * @param {Query} query
 */

/**
 * Utility functions for comparing things
 * Assumes type checking was already done (a and b already have the same type)
 * compareNSB works for numbers, strings and booleans
 */

/**
 * Way data is stored for this database
 * For a Node.js/Node Webkit database it's the file system
 * For a browser-side database it's localforage which chooses the best option depending on user browser (IndexedDB then WebSQL then localStorage)
 *
 * This version is the Node.js/Node Webkit version
 * It's essentially fs, mkdirp and crash safe write and read functions
 */

/**
 * When checking if the BST conditions are met, also check that the heights are correct
 * and the tree is balanced
 */

/************************************************************************/

/******/

/***/

/*args...*/

/*async.info = _console_fn('info');
    async.warn = _console_fn('warn');
    async.error = _console_fn('error');*/

/*global setImmediate: false, setTimeout: false, console: false */

//     (c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.

//     Underscore may be freely distributed under the MIT license.

//     Underscore.js 1.4.4

//     http://underscorejs.org

// **Reduce** builds up a single result from a list of values, aka `inject`,

// --------------

// ---------------

// ----------------

// -----------------

// ------------------

// --------------------

// ================================

// ============================================

// ==============================================================

// A bit lenient on corruption

// A strict comparison is necessary because `null == undefined`.

// Actually create all modifier functions

// Add a "chain" function, which will delegate to the wrapper.

// Add all accessor Array functions to the wrapper.

// Add all mutator Array functions to the wrapper.

// Add all of the Underscore functions to the wrapper object.

// Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.

// Add the first object to the stack of traversed objects.

// Add your own custom functions to the Underscore object.

// After serialization and before deserialization hooks with some basic sanity checks

// After this loop, replaceWith is the right-most leaf in the left subtree

// Aliased as `all`.

// Aliased as `any`.

// Aliased as `include`.

// Aliased as `methods`

// Aliased as `select`.

// Aliased as `unique`.

// Alter tree structure

// Always tell the queue task is complete. Execute callback if any was given.

// An "empty" object has no enumerable own-properties.

// An internal function to generate lookup iterators.

// An internal function used for aggregate "group by" operations.

// Append all elements in toAppend to array

// Apply all sorts

// Apply modifiers

// Apply projection

// Applying limit and skip

// Array Functions

// Arrays (first element is most significant and so on)

// Arrays (no match since arrays are used as a $in)

// Assume equality for cyclic structures. The algorithm for detecting cyclic

// Bad looking specific fix, needs to be generalized modifiers that behave like $unset are implemented

// Baseline setup

// Basic matching is possible

// Bind all of an object's methods to that object. Useful for ensuring that

// Booleans

// But I don't have time for a cleaner implementation now

// By default (no onload handler), if there is an error there, no operation will be possible so warn the user by throwing an exception

// By default, Underscore uses ERB-style template delimiters, change the

// Callback was supplied

// Can't optimize arrays of integers longer than 65,535 elements.

// Can't rely on Object.keys throwing on non objects since ES6

// Certain characters need to be escaped so that they can be put into a

// Change the docs in memory

// Check for consistency

// Check if module is in cache

// Check if the value is an array if we don't force a treatment as value

// Check if we are using an array-specific comparison function

// Check result is valid and return it

// Coerce dates and booleans to numeric primitive values. Dates are compared by their

// Collection Functions

// Combine delimiters into one regular expression via alternation.

// Common section was identical, longest one wins

// Compare `[[Class]]` names.

// Compare array lengths to determine if a deep comparison is necessary.

// Compile the template source, escaping string literals appropriately.

// Convenience version of a common use case of `filter`: selecting only objects

// Convenience version of a common use case of `find`: getting the first object

// Convenience version of a common use case of `map`: fetching a property.

// Convert an object into a list of `[key, value]` pairs.

// Converts lists into objects. Pass either a single array of `[key, value]`

// Count the expected number of properties.

// Counts instances of an object that group by a certain criterion. Pass

// Create a (shallow-cloned) duplicate of an object.

// Create a function bound to a given object (assigning `this`, and arguments,

// Create a new module (and put it into the cache)

// Create the array if it doesn't exist

// Current version.

// Dates

// Deep compare objects.

// Deep compare the contents, ignoring non-numeric properties.

// Defers a function, scheduling it to run after the current call stack has

// Define a fallback version of the method in browsers (ahem, IE), where

// Delays a function for the given number of milliseconds, and then calls

// Delegates to **ECMAScript 5**'s native `Object.keys`

// Delegates to **ECMAScript 5**'s native `every` if available.

// Delegates to **ECMAScript 5**'s native `filter` if available.

// Delegates to **ECMAScript 5**'s native `forEach` if available.

// Delegates to **ECMAScript 5**'s native `indexOf` if available.

// Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.

// Delegates to **ECMAScript 5**'s native `map` if available.

// Delegates to **ECMAScript 5**'s native `reduceRight` if available.

// Delegates to **ECMAScript 5**'s native `some` if available.

// Delegates to ECMA5's native Array.isArray

// Delete a value

// Delete a whole node

// Delete only a value

// Delete only a value (no tree modification)

// Delete the whole node

// Determine if at least one element in the object matches a truth test.

// Determine if the array or object contains a given value (using `===`).

// Determine whether all of the elements match a truth test.

// Determine whether in memory or persistent

// Do the actual projection

// Either no match is found and the function will return from within the loop

// Empty tree

// Empty tree, insert as root

// Ensure that both objects contain the same number of properties.

// Especially useful on the arguments object. Passing an **n** will return

// Establish the root object, `window` in the browser, or `global` on the server.

// Execute the module function

// Extend a given object with all the properties in passed-in object(s).

// Extracts the result from a wrapped and chained object.

// Fill cached database (i.e. all indexes) with data

// Fill in a given object with default properties.

// Finding documents

// For NW apps, store data in the same directory where NW stores application data

// For a $in match

// For a basic match

// For a comparison match

// Function (ahem) Functions

// Functions for escaping and unescaping strings to/from HTML interpolation.

// General objects (check for deep equality)

// Generate a unique integer id (unique within the entire client session).

// Generate an integer Array containing an arithmetic progression. A port of

// Get the first element of an array. Passing **n** will return the first N

// Get the last element of an array. Passing **n** will return the last N

// Given its name, create the complete modifier function

// Groups the object's values by a criterion. Pass either a string attribute

// Hackish way of checking if object is Date (this way it works between execution contexts in node-webkit).

// Handles objects with the built-in `forEach`, arrays, and raw objects.

// Helper function to continue chaining intermediate results.

// Identical objects are equal. `0 === -0`, but they aren't identical.

// If Underscore is called as a function, it returns a wrapped object that

// If a sort is defined, wait for the results to be sorted before applying limit and skip

// If a variable is not specified, place data values in local scope.

// If an error happened, we need to rollback the insert on all other indexes

// If an error happened, we need to rollback the update on all other indexes

// If an error was raised, roll back changes in the inverse order

// If an insert fails due to a unique constraint, roll back all inserts before it

// If match for array element, return true

// If newTree is undefined, that means its structure was not modified

// If not assume projection is an object and callback undefined

// If not, treat it as an array of { obj, query } where there needs to be at least one match

// If the array is large and already in sort order, pass `true`

// If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),

// If the next field is an integer, return only this item of the array

// If the queryValue is an array, try to perform an exact match

// If the value of the named property is a function then invoke it;

// If upsert option is set, check whether we need to insert the doc

// If we do, it will only be ready once loadDatabase is called

// In the case of any other error, just see if there's a dir

// In-memory only datastore

// Indexed by field name, dot notation can be used

// Initialize result

// Insert in left subtree

// Insert in right subtree

// Insert in the internal tree, update the pointer to the root if needed

// Insert new leaf at the right place

// Interface

// Internal implementation of a recursive `flatten` function.

// Internal recursive comparison function for `isEqual`.

// Invert the keys and values of an object. The values must be serializable.

// Invoke a method (with arguments) on every item in a collection.

// Invokes interceptor with the obj, and then returns obj.

// Is a given array, string, or object empty?

// Is a given object a finite number?

// Is a given value a DOM element?

// Is a given value a boolean?

// Is a given value an array?

// Is a given value equal to null?

// Is a given variable an object?

// Is a given variable undefined?

// Is the given value `NaN`? (NaN is the only number which does not equal itself).

// JavaScript micro-templating, similar to John Resig's implementation.

// Keep the identity function around for default iterators.

// Key not found, no modification

// Leaf

// Left is not too small, don't change

// Linear search. Performance is inversely proportional to the number of

// List of HTML entities for escaping.

// Load entry module

// Memoize an expensive function by storing its results.

// Methods used to actually work on the tree

// Methods used to test the tree

// N milliseconds. If `immediate` is passed, trigger the function on the

// Need to use an internal function not tied to the executor to avoid deadlock

// New database

// No change

// No lower bound

// Node with only one child

// Node with two children

// Normal query

// Not 100% satisfying as non objects can be interpreted as objects but no false negatives so we can live with it

// Nothing supplied as callback

// Numbers

// OOP

// Object Functions

// Objects

// Objects with different constructors are not equivalent, but `Object`s

// Only the elements present in just the first array will remain.

// Or a match is found and deletePath will contain the path from the root to the node to delete after the loop

// Partially apply a function by creating a version that has had some of its

// Perform a deep comparison to check if two objects are equal.

// Perform the update

// Persistence handling

// Preparing update (if an error is thrown here neither the datafile nor

// Primitive query against a primitive type

// Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is

// Produce a duplicate-free version of the array. If the array has already

// Produce an array that contains every item shared between all the

// Produce an array that contains the union: each distinct element from all of

// Provide the compiled function source as a convenience for precompilation.

// Queue a load of the database right away and call the onload handler

// Randomize replacement to avoid unbalancing the tree too much

// Rebalance the tree and update all heights

// Recreate all indexes in the datafile

// Recursively compare objects and arrays.

// RegExps are compared by their source patterns and flags.

// Regexes containing the keys and values listed immediately above.

// Remove the first object from the stack of traversed objects.

// Retrieve the names of an object's properties.

// Retrieve the values of an object's properties.

// Retrocompatibility with v0.6 and before

// Return a completely flattened version of an array.

// Return a copy of the object only containing the whitelisted properties.

// Return a copy of the object without the blacklisted properties.

// Return a random integer between min and max (inclusive).

// Return a sorted list of the function names available on the object.

// Return a version of the array that does not contain the specified value(s).

// Return all the elements for which a truth test fails.

// Return all the elements that pass a truth test.

// Return the array of values

// Return the exports of the module

// Return the first value which passes a truth test. Aliased as `detect`.

// Return the maximum element or (element-based computation).

// Return the minimum element (or element-based computation).

// Return the number of elements in an object.

// Return the results of applying the iterator to each element.

// Returns a function that is the composition of a list of functions, each

// Returns a function that will be executed at most one time, no matter how

// Returns a function that will only be executed after being called N times.

// Returns a function, that, as long as it continues to be invoked, will not

// Returns a function, that, when invoked, will only be triggered at most once

// Returns everything but the first entry of the array. Aliased as `tail` and `drop`.

// Returns everything but the last entry of the array. Especially useful on

// Returns the first function passed as an argument to the second,

// Right is not too small, don't change

// Rollback any index which didn't fail

// Root

// Run Underscore.js in *noConflict* mode, returning the `_` variable to its

// Run a function **n** times.

// STEP 1: get candidates list by checking indexes from most to least frequent usecase

// STEP 2: remove all expired documents

// Safely convert anything iterable into a real, live array.

// Same key as root

// Same key: no change in the tree structure

// Save the previous value of the `_` variable.

// See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.

// See: https://bugs.webkit.org/show_bug.cgi?id=80797

// Shortcut function for checking if an object has a given property directly

// Shuffle an array.

// Simply replace the object with the update query contents

// Sort the object's values by a criterion produced by an iterator.

// Sorting

// Special case

// Special case: the in-order predecessor is right below the node to delete

// Specific to arrays

// Start chaining a wrapped Underscore object.

// String comparison function

// Strings

// Strings, booleans, numbers, null

// Strings, numbers, dates, and booleans are compared by value.

// Take the difference between one array and a number of other arrays.

// The cornerstone, an `each` implementation, aka `forEach`.

// The leaf is itself a root

// The module cache

// The primary purpose of this method is to "tap into" a method chain, in

// The require function

// The right-associative version of reduce, also known as `foldr`.

// The special _id index is managed by datastore.js, the others need to be persisted

// This entry module used 'exports' so it can't be inlined

// This is a bit of a hack since we construct an object with an arbitrary key only to dereference it later

// This leaf is also the root

// This new executor is ready if we don't use persistence

// This node is also the root

// This queue will execute all commands, one-by-one in order

// This will be true for all values of exists except false, null, undefined and 0

// Trim out all falsy values from an array.

// Try as many times as needed to get an unused _id. As explained in customUtils, the probability of this ever happening is extremely small, so this is O(1)

// Underscore templating handles arbitrary delimiters, preserves whitespace,

// Unwrap any wrapped objects.

// Update heights

// Update the datafile

// Updating documents

// Use a comparator function to figure out the smallest index at which

// Use the in-order predecessor

// Use the in-order predecessor (no need to randomize since we actively rebalance)

// Use the in-order successor

// Useful for temporary DOM ids.

// Using regular expressions with basic querying

// Utility Functions

// We are in the case where the node to delete has two children

// We can't use value directly because for dates it is already string in this function (date.toJSON was already called), so we use this

// We don't index documents that don't contain the field if the index is sparse

// We may want to force all options to be persisted including defaults, not just the ones passed the index creation function

// When customizing `templateSettings`, if you don't want to define an

// Windows can't fsync (FlushFileBuffers) directories. We can live with this as it cannot cause 100% dataloss

// With this implementation index creation is not necessary to ensure TTL but we stick with MongoDB's API here

// Write failed, use old version

// Write was successful

// Zip together multiple lists into a single array -- elements that share

// [the Python documentation](http://docs.python.org/library/functions.html#range).

// _id is always indexed and since _ids are generated randomly the underlying

// `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for

// `_.map`.

// a and b should be objects at this point

// all alias

// all callbacks defined on an object belong to it.

// allowing you to adjust arguments, run code before and after, and

// allows it to work with `_.map`.

// an index go together.

// an object should be inserted so as to maintain order. Uses binary search.

// and correctly escapes quotes within interpolated code.

// and deletePath the path from the root (inclusive) to replaceWith (exclusive)

// any alias

// arguments pre-filled, without changing its dynamic `this` context.

// available.

// be triggered. The function will be called after it stops being called for

// been sorted, you have the option of using a faster algorithm.

// binary is always well-balanced

// callback is undefined, will return a cursor

// can be used OO-style. This wrapper holds altered versions of all the

// check allows it to work with `_.map`.

// cleared.

// conditionally execute the original function.

// consuming the return value of the function that follows.

// containing specific `key:value` pairs.

// criterion.

// currentNode.compareKeys(key, currentNode.key) is > 0

// define __esModule on exports

// define getter functions for harmony exports

// during a given window of time.

// either a string attribute to count by, or a function that returns the

// equivalent to `new String("5")`.

// except in the very rare event of the first time database is loaded and a crash happens

// false/undefined/null supplied as callbback

// field cannot be empty so that means we should return undefined so that nothing can match

// foldl alias

// foldr alias

// following template settings to use alternative delimiters.

// for **isSorted** to use binary search.

// from different frames are.

// getDefaultExport function for compatibility with non-harmony modules

// global on the server, window in the browser

// guaranteed not to match.

// if the stat fails, then that's super weird.

// inject alias

// interpolation, evaluation or escaping regex, we need one that is

// is borked.

// it with the arguments supplied.

// item in an array, or -1 if the item is not included in the array.

// k here could be any string

// leading edge, instead of the trailing.

// let the original error be the failure reason.

// millisecond representations. Note that invalid dates with millisecond representations

// no module.id needed

// no module.loaded needed

// not a direct alias for IE10 compatibility

// null

// of `NaN` are not equivalent.

// often you call it. Useful for lazy initialization.

// omit-type projection

// on itself (in other words, not on a prototype).

// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if

// or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.

// or only normal fields. Mixed objects are not allowed

// order to perform operations on intermediate results within the chain.

// other numeric values.

// otherwise, return it.

// pairs, or two parallel arrays of the same length -- one of keys, and one of

// passed-in arrays.

// pick-type projection

// previous owner. Returns a reference to the Underscore object.

// queryValue is an actual object. Determine whether it contains comparison operators

// queryValue is an object of this form: { $comparisonOperator1: value1, ... }

// queryValue is either a native value or a normal object

// reduce only has a series version, as doing reduce in parallel won't

// select alias

// startup

// stop subsequent errors hitting callback multiple times

// string literal.

// strip it from all operators and update it according to updateQuery

// structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

// task.arguments is an array-like object on which adding a new field doesn't work, so we transform it into a real array

// the arguments object. Passing **n** will return all the values in

// the array, excluding the last N. The **guard** check allows it to work with

// the corresponding values.

// the in-memory indexes are affected)

// the native Python `range()` function. See

// the passed-in arrays.

// the rest N values in the array. The **guard**

// there already.  If so, then hooray!  If not, then something

// there isn't any inspectable "Arguments" type.

// to group by, or a function that returns the criterion.

// undefined

// undefined (no match since they mean field doesn't exist and can't be serialized)

// underscore functions. Wrapped objects may be chained.

// unique nested structures.

// updateQuery contains modifiers, use the find query as the base,

// updateQuery is a simple object with no modifier, use it as the document to insert

// values in the array. Aliased as `head` and `take`. The **guard** check

// values in the array. The **guard** check allows it to work with `_.map`.

// we need this function. Return the position of the first occurrence of an

// webpackBootstrap

// work in many situations.

//// cross-browser compatiblity functions ////

//// exported async module functions ////

//// nextTick implementation with browser-compatible fallback ////

//if(debug)mainWindow.webContents.openDevTools();
